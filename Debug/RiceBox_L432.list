
RiceBox_L432.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdfc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000178c  0800bf8c  0800bf8c  0001bf8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d718  0800d718  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  0800d718  0800d718  0001d718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d720  0800d720  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d720  0800d720  0001d720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d724  0800d724  0001d724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0800d728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000149c  20000094  0800d7bc  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001530  0800d7bc  00021530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001db0d  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000390f  00000000  00000000  0003dbd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  000414e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  00042c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002480f  00000000  00000000  00044218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b117  00000000  00000000  00068a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d86b6  00000000  00000000  00083b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c1f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007108  00000000  00000000  0015c244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000094 	.word	0x20000094
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bf74 	.word	0x0800bf74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000098 	.word	0x20000098
 80001cc:	0800bf74 	.word	0x0800bf74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b974 	b.w	8000d5c <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468e      	mov	lr, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d14d      	bne.n	8000b36 <__udivmoddi4+0xaa>
 8000a9a:	428a      	cmp	r2, r1
 8000a9c:	4694      	mov	ip, r2
 8000a9e:	d969      	bls.n	8000b74 <__udivmoddi4+0xe8>
 8000aa0:	fab2 f282 	clz	r2, r2
 8000aa4:	b152      	cbz	r2, 8000abc <__udivmoddi4+0x30>
 8000aa6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aaa:	f1c2 0120 	rsb	r1, r2, #32
 8000aae:	fa20 f101 	lsr.w	r1, r0, r1
 8000ab2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ab6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aba:	4094      	lsls	r4, r2
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	0c21      	lsrs	r1, r4, #16
 8000ac2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ac6:	fa1f f78c 	uxth.w	r7, ip
 8000aca:	fb08 e316 	mls	r3, r8, r6, lr
 8000ace:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ad2:	fb06 f107 	mul.w	r1, r6, r7
 8000ad6:	4299      	cmp	r1, r3
 8000ad8:	d90a      	bls.n	8000af0 <__udivmoddi4+0x64>
 8000ada:	eb1c 0303 	adds.w	r3, ip, r3
 8000ade:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ae2:	f080 811f 	bcs.w	8000d24 <__udivmoddi4+0x298>
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	f240 811c 	bls.w	8000d24 <__udivmoddi4+0x298>
 8000aec:	3e02      	subs	r6, #2
 8000aee:	4463      	add	r3, ip
 8000af0:	1a5b      	subs	r3, r3, r1
 8000af2:	b2a4      	uxth	r4, r4
 8000af4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af8:	fb08 3310 	mls	r3, r8, r0, r3
 8000afc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b00:	fb00 f707 	mul.w	r7, r0, r7
 8000b04:	42a7      	cmp	r7, r4
 8000b06:	d90a      	bls.n	8000b1e <__udivmoddi4+0x92>
 8000b08:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	f080 810a 	bcs.w	8000d28 <__udivmoddi4+0x29c>
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	f240 8107 	bls.w	8000d28 <__udivmoddi4+0x29c>
 8000b1a:	4464      	add	r4, ip
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	1be4      	subs	r4, r4, r7
 8000b24:	2600      	movs	r6, #0
 8000b26:	b11d      	cbz	r5, 8000b30 <__udivmoddi4+0xa4>
 8000b28:	40d4      	lsrs	r4, r2
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b30:	4631      	mov	r1, r6
 8000b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b36:	428b      	cmp	r3, r1
 8000b38:	d909      	bls.n	8000b4e <__udivmoddi4+0xc2>
 8000b3a:	2d00      	cmp	r5, #0
 8000b3c:	f000 80ef 	beq.w	8000d1e <__udivmoddi4+0x292>
 8000b40:	2600      	movs	r6, #0
 8000b42:	e9c5 0100 	strd	r0, r1, [r5]
 8000b46:	4630      	mov	r0, r6
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	fab3 f683 	clz	r6, r3
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d14a      	bne.n	8000bec <__udivmoddi4+0x160>
 8000b56:	428b      	cmp	r3, r1
 8000b58:	d302      	bcc.n	8000b60 <__udivmoddi4+0xd4>
 8000b5a:	4282      	cmp	r2, r0
 8000b5c:	f200 80f9 	bhi.w	8000d52 <__udivmoddi4+0x2c6>
 8000b60:	1a84      	subs	r4, r0, r2
 8000b62:	eb61 0303 	sbc.w	r3, r1, r3
 8000b66:	2001      	movs	r0, #1
 8000b68:	469e      	mov	lr, r3
 8000b6a:	2d00      	cmp	r5, #0
 8000b6c:	d0e0      	beq.n	8000b30 <__udivmoddi4+0xa4>
 8000b6e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b72:	e7dd      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000b74:	b902      	cbnz	r2, 8000b78 <__udivmoddi4+0xec>
 8000b76:	deff      	udf	#255	; 0xff
 8000b78:	fab2 f282 	clz	r2, r2
 8000b7c:	2a00      	cmp	r2, #0
 8000b7e:	f040 8092 	bne.w	8000ca6 <__udivmoddi4+0x21a>
 8000b82:	eba1 010c 	sub.w	r1, r1, ip
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2601      	movs	r6, #1
 8000b90:	0c20      	lsrs	r0, r4, #16
 8000b92:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b96:	fb07 1113 	mls	r1, r7, r3, r1
 8000b9a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b9e:	fb0e f003 	mul.w	r0, lr, r3
 8000ba2:	4288      	cmp	r0, r1
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x12c>
 8000ba6:	eb1c 0101 	adds.w	r1, ip, r1
 8000baa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x12a>
 8000bb0:	4288      	cmp	r0, r1
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2c0>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	1a09      	subs	r1, r1, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bc0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bc4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x156>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x154>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2ca>
 8000be0:	4608      	mov	r0, r1
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bea:	e79c      	b.n	8000b26 <__udivmoddi4+0x9a>
 8000bec:	f1c6 0720 	rsb	r7, r6, #32
 8000bf0:	40b3      	lsls	r3, r6
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa20 f407 	lsr.w	r4, r0, r7
 8000bfe:	fa01 f306 	lsl.w	r3, r1, r6
 8000c02:	431c      	orrs	r4, r3
 8000c04:	40f9      	lsrs	r1, r7
 8000c06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c0a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c0e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c12:	0c20      	lsrs	r0, r4, #16
 8000c14:	fa1f fe8c 	uxth.w	lr, ip
 8000c18:	fb09 1118 	mls	r1, r9, r8, r1
 8000c1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c20:	fb08 f00e 	mul.w	r0, r8, lr
 8000c24:	4288      	cmp	r0, r1
 8000c26:	fa02 f206 	lsl.w	r2, r2, r6
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b8>
 8000c2c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2bc>
 8000c38:	4288      	cmp	r0, r1
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2bc>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4461      	add	r1, ip
 8000c44:	1a09      	subs	r1, r1, r0
 8000c46:	b2a4      	uxth	r4, r4
 8000c48:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c4c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c50:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c54:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c58:	458e      	cmp	lr, r1
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1e2>
 8000c5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c60:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2b4>
 8000c66:	458e      	cmp	lr, r1
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2b4>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4461      	add	r1, ip
 8000c6e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c72:	fba0 9402 	umull	r9, r4, r0, r2
 8000c76:	eba1 010e 	sub.w	r1, r1, lr
 8000c7a:	42a1      	cmp	r1, r4
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46a6      	mov	lr, r4
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x2a4>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x2a0>
 8000c84:	b15d      	cbz	r5, 8000c9e <__udivmoddi4+0x212>
 8000c86:	ebb3 0208 	subs.w	r2, r3, r8
 8000c8a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c8e:	fa01 f707 	lsl.w	r7, r1, r7
 8000c92:	fa22 f306 	lsr.w	r3, r2, r6
 8000c96:	40f1      	lsrs	r1, r6
 8000c98:	431f      	orrs	r7, r3
 8000c9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000c9e:	2600      	movs	r6, #0
 8000ca0:	4631      	mov	r1, r6
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	f1c2 0320 	rsb	r3, r2, #32
 8000caa:	40d8      	lsrs	r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb4:	4091      	lsls	r1, r2
 8000cb6:	4301      	orrs	r1, r0
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cc4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cc8:	0c0b      	lsrs	r3, r1, #16
 8000cca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cce:	fb00 f60e 	mul.w	r6, r0, lr
 8000cd2:	429e      	cmp	r6, r3
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x260>
 8000cda:	eb1c 0303 	adds.w	r3, ip, r3
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce4:	429e      	cmp	r6, r3
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b8>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1b9b      	subs	r3, r3, r6
 8000cee:	b289      	uxth	r1, r1
 8000cf0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cf4:	fb07 3316 	mls	r3, r7, r6, r3
 8000cf8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfc:	fb06 f30e 	mul.w	r3, r6, lr
 8000d00:	428b      	cmp	r3, r1
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x28a>
 8000d04:	eb1c 0101 	adds.w	r1, ip, r1
 8000d08:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000d12:	3e02      	subs	r6, #2
 8000d14:	4461      	add	r1, ip
 8000d16:	1ac9      	subs	r1, r1, r3
 8000d18:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0x104>
 8000d1e:	462e      	mov	r6, r5
 8000d20:	4628      	mov	r0, r5
 8000d22:	e705      	b.n	8000b30 <__udivmoddi4+0xa4>
 8000d24:	4606      	mov	r6, r0
 8000d26:	e6e3      	b.n	8000af0 <__udivmoddi4+0x64>
 8000d28:	4618      	mov	r0, r3
 8000d2a:	e6f8      	b.n	8000b1e <__udivmoddi4+0x92>
 8000d2c:	454b      	cmp	r3, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f8>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d38:	3801      	subs	r0, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f8>
 8000d3c:	4646      	mov	r6, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x28a>
 8000d40:	4620      	mov	r0, r4
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1e2>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x260>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b8>
 8000d4c:	3b02      	subs	r3, #2
 8000d4e:	4461      	add	r1, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x12c>
 8000d52:	4630      	mov	r0, r6
 8000d54:	e709      	b.n	8000b6a <__udivmoddi4+0xde>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x156>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <DWT_Delay_Init>:
uint16_t SUM; uint8_t Presence = 0;

#include "DHT.h"

uint32_t DWT_Delay_Init(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0

  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <DWT_Delay_Init+0x58>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	4a13      	ldr	r2, [pc, #76]	; (8000db8 <DWT_Delay_Init+0x58>)
 8000d6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d6e:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <DWT_Delay_Init+0x58>)
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	4a10      	ldr	r2, [pc, #64]	; (8000db8 <DWT_Delay_Init+0x58>)
 8000d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d7a:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000d7c:	4b0f      	ldr	r3, [pc, #60]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a0e      	ldr	r2, [pc, #56]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000d82:	f023 0301 	bic.w	r3, r3, #1
 8000d86:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000d88:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a0b      	ldr	r2, [pc, #44]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000d9a:	bf00      	nop
     __ASM volatile ("NOP");
 8000d9c:	bf00      	nop
 __ASM volatile ("NOP");
 8000d9e:	bf00      	nop

  /* Check if clock cycle counter has started */

			 if(DWT->CYCCNT)
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <DWT_Delay_Init+0x5c>)
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <DWT_Delay_Init+0x4c>
				 {
					 return 0; /*clock cycle counter started*/
 8000da8:	2300      	movs	r3, #0
 8000daa:	e000      	b.n	8000dae <DWT_Delay_Init+0x4e>
				 }
			 else
				{
					return 1; /*clock cycle counter not started*/
 8000dac:	2301      	movs	r3, #1
				}



}
 8000dae:	4618      	mov	r0, r3
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	e000edf0 	.word	0xe000edf0
 8000dbc:	e0001000 	.word	0xe0001000

08000dc0 <delay>:

 void delay(volatile uint32_t microseconds)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b084      	sub	sp, #16
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000dc8:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <delay+0x40>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	60fb      	str	r3, [r7, #12]
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000dce:	f006 fb8f 	bl	80074f0 <HAL_RCC_GetHCLKFreq>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	4a0b      	ldr	r2, [pc, #44]	; (8000e04 <delay+0x44>)
 8000dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dda:	0c9b      	lsrs	r3, r3, #18
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	fb02 f303 	mul.w	r3, r2, r3
 8000de2:	607b      	str	r3, [r7, #4]
	 while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000de4:	bf00      	nop
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <delay+0x40>)
 8000de8:	685a      	ldr	r2, [r3, #4]
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	1ad2      	subs	r2, r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d3f8      	bcc.n	8000de6 <delay+0x26>
}
 8000df4:	bf00      	nop
 8000df6:	bf00      	nop
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e0001000 	.word	0xe0001000
 8000e04:	431bde83 	.word	0x431bde83

08000e08 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	460b      	mov	r3, r1
 8000e12:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e14:	f107 030c 	add.w	r3, r7, #12
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
 8000e1c:	605a      	str	r2, [r3, #4]
 8000e1e:	609a      	str	r2, [r3, #8]
 8000e20:	60da      	str	r2, [r3, #12]
 8000e22:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e24:	887b      	ldrh	r3, [r7, #2]
 8000e26:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	4619      	mov	r1, r3
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f005 f91a 	bl	8006070 <HAL_GPIO_Init>
}
 8000e3c:	bf00      	nop
 8000e3e:	3720      	adds	r7, #32
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b088      	sub	sp, #32
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 030c 	add.w	r3, r7, #12
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8000e60:	887b      	ldrh	r3, [r7, #2]
 8000e62:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000e6c:	f107 030c 	add.w	r3, r7, #12
 8000e70:	4619      	mov	r1, r3
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f005 f8fc 	bl	8006070 <HAL_GPIO_Init>
}
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}

08000e80 <DHT_Start>:


void DHT_Start (void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
	DWT_Delay_Init();
 8000e84:	f7ff ff6c 	bl	8000d60 <DWT_Delay_Init>
	Set_Pin_Output (DHT_PORT, DHT_PIN);  // set the pin as output
 8000e88:	2102      	movs	r1, #2
 8000e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8e:	f7ff ffbb 	bl	8000e08 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_RESET);   // pull the pin low
 8000e92:	2200      	movs	r2, #0
 8000e94:	2102      	movs	r1, #2
 8000e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e9a:	f005 fa6b 	bl	8006374 <HAL_GPIO_WritePin>

#if defined(TYPE_DHT11)
	delay (18000);   // wait for 18ms
 8000e9e:	f244 6050 	movw	r0, #18000	; 0x4650
 8000ea2:	f7ff ff8d 	bl	8000dc0 <delay>

#if defined(TYPE_DHT22)
	delay (1200);  // >1ms delay
#endif

    HAL_GPIO_WritePin (DHT_PORT, DHT_PIN, GPIO_PIN_SET);   // pull the pin high
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	2102      	movs	r1, #2
 8000eaa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eae:	f005 fa61 	bl	8006374 <HAL_GPIO_WritePin>
    delay(30);   // wait for 30us
 8000eb2:	201e      	movs	r0, #30
 8000eb4:	f7ff ff84 	bl	8000dc0 <delay>
	Set_Pin_Input(DHT_PORT, DHT_PIN);    // set as input
 8000eb8:	2102      	movs	r1, #2
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebe:	f7ff ffc1 	bl	8000e44 <Set_Pin_Input>
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}

08000ec6 <DHT_Check_Response>:

uint8_t DHT_Check_Response (void)
{
 8000ec6:	b580      	push	{r7, lr}
 8000ec8:	b082      	sub	sp, #8
 8000eca:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	71fb      	strb	r3, [r7, #7]
	delay (50);
 8000ed0:	2032      	movs	r0, #50	; 0x32
 8000ed2:	f7ff ff75 	bl	8000dc0 <delay>
	if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000edc:	f005 fa32 	bl	8006344 <HAL_GPIO_ReadPin>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d10f      	bne.n	8000f06 <DHT_Check_Response+0x40>
	{
		delay (100);
 8000ee6:	2064      	movs	r0, #100	; 0x64
 8000ee8:	f7ff ff6a 	bl	8000dc0 <delay>
		if ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))
 8000eec:	2102      	movs	r1, #2
 8000eee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef2:	f005 fa27 	bl	8006344 <HAL_GPIO_ReadPin>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <DHT_Check_Response+0x3c>
		{
			Response = 1;
 8000efc:	2301      	movs	r3, #1
 8000efe:	71fb      	strb	r3, [r7, #7]
 8000f00:	e001      	b.n	8000f06 <DHT_Check_Response+0x40>
		}
		else
		{
			Response = -1;
 8000f02:	23ff      	movs	r3, #255	; 0xff
 8000f04:	71fb      	strb	r3, [r7, #7]
		}
	}
	while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go low
 8000f06:	bf00      	nop
 8000f08:	2102      	movs	r1, #2
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0e:	f005 fa19 	bl	8006344 <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1f7      	bne.n	8000f08 <DHT_Check_Response+0x42>

	return Response;
 8000f18:	79fb      	ldrb	r3, [r7, #7]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <DHT_Read>:

uint8_t DHT_Read (void)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000f28:	2300      	movs	r3, #0
 8000f2a:	71bb      	strb	r3, [r7, #6]
 8000f2c:	e03a      	b.n	8000fa4 <DHT_Read+0x82>
	{
		while (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));   // wait for the pin to go high
 8000f2e:	bf00      	nop
 8000f30:	2102      	movs	r1, #2
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f36:	f005 fa05 	bl	8006344 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d0f7      	beq.n	8000f30 <DHT_Read+0xe>
		delay (50);   // wait for 40 us
 8000f40:	2032      	movs	r0, #50	; 0x32
 8000f42:	f7ff ff3d 	bl	8000dc0 <delay>
		if (!(HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)))   // if the pin is low
 8000f46:	2102      	movs	r1, #2
 8000f48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f4c:	f005 f9fa 	bl	8006344 <HAL_GPIO_ReadPin>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10e      	bne.n	8000f74 <DHT_Read+0x52>
		{
			i&= ~(1<<(7-j));   // write 0
 8000f56:	79bb      	ldrb	r3, [r7, #6]
 8000f58:	f1c3 0307 	rsb	r3, r3, #7
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	b25b      	sxtb	r3, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	b25a      	sxtb	r2, r3
 8000f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	b25b      	sxtb	r3, r3
 8000f70:	71fb      	strb	r3, [r7, #7]
 8000f72:	e00b      	b.n	8000f8c <DHT_Read+0x6a>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000f74:	79bb      	ldrb	r3, [r7, #6]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	b25a      	sxtb	r2, r3
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT_PORT, DHT_PIN)));  // wait for the pin to go low
 8000f8c:	bf00      	nop
 8000f8e:	2102      	movs	r1, #2
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f005 f9d6 	bl	8006344 <HAL_GPIO_ReadPin>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f7      	bne.n	8000f8e <DHT_Read+0x6c>
	for (j=0;j<8;j++)
 8000f9e:	79bb      	ldrb	r3, [r7, #6]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	71bb      	strb	r3, [r7, #6]
 8000fa4:	79bb      	ldrb	r3, [r7, #6]
 8000fa6:	2b07      	cmp	r3, #7
 8000fa8:	d9c1      	bls.n	8000f2e <DHT_Read+0xc>
	}
	return i;
 8000faa:	79fb      	ldrb	r3, [r7, #7]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <DHT_GetData>:



void DHT_GetData (DHT_DataTypedef *DHT_Data)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
    DHT_Start();
 8000fbc:	f7ff ff60 	bl	8000e80 <DHT_Start>
	Presence = DHT_Check_Response ();
 8000fc0:	f7ff ff81 	bl	8000ec6 <DHT_Check_Response>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	4b23      	ldr	r3, [pc, #140]	; (8001058 <DHT_GetData+0xa4>)
 8000fca:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT_Read ();
 8000fcc:	f7ff ffa9 	bl	8000f22 <DHT_Read>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	4b21      	ldr	r3, [pc, #132]	; (800105c <DHT_GetData+0xa8>)
 8000fd6:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT_Read ();
 8000fd8:	f7ff ffa3 	bl	8000f22 <DHT_Read>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <DHT_GetData+0xac>)
 8000fe2:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT_Read ();
 8000fe4:	f7ff ff9d 	bl	8000f22 <DHT_Read>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <DHT_GetData+0xb0>)
 8000fee:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT_Read ();
 8000ff0:	f7ff ff97 	bl	8000f22 <DHT_Read>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b1b      	ldr	r3, [pc, #108]	; (8001068 <DHT_GetData+0xb4>)
 8000ffa:	701a      	strb	r2, [r3, #0]


	SUM = DHT_Read();
 8000ffc:	f7ff ff91 	bl	8000f22 <DHT_Read>
 8001000:	4603      	mov	r3, r0
 8001002:	b29a      	uxth	r2, r3
 8001004:	4b19      	ldr	r3, [pc, #100]	; (800106c <DHT_GetData+0xb8>)
 8001006:	801a      	strh	r2, [r3, #0]
	if (SUM == (Rh_byte1+Rh_byte2+Temp_byte1+Temp_byte2))
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <DHT_GetData+0xb8>)
 800100a:	881b      	ldrh	r3, [r3, #0]
 800100c:	4619      	mov	r1, r3
 800100e:	4b13      	ldr	r3, [pc, #76]	; (800105c <DHT_GetData+0xa8>)
 8001010:	781b      	ldrb	r3, [r3, #0]
 8001012:	461a      	mov	r2, r3
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <DHT_GetData+0xac>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4413      	add	r3, r2
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <DHT_GetData+0xb0>)
 800101c:	7812      	ldrb	r2, [r2, #0]
 800101e:	4413      	add	r3, r2
 8001020:	4a11      	ldr	r2, [pc, #68]	; (8001068 <DHT_GetData+0xb4>)
 8001022:	7812      	ldrb	r2, [r2, #0]
 8001024:	4413      	add	r3, r2
 8001026:	4299      	cmp	r1, r3
 8001028:	d111      	bne.n	800104e <DHT_GetData+0x9a>
	{
		#if defined(TYPE_DHT11)
			DHT_Data->Temperature = Temp_byte1;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <DHT_GetData+0xb0>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	ee07 3a90 	vmov	s15, r3
 8001032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	edc3 7a00 	vstr	s15, [r3]
			DHT_Data->Humidity = Rh_byte1;
 800103c:	4b07      	ldr	r3, [pc, #28]	; (800105c <DHT_GetData+0xa8>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	ee07 3a90 	vmov	s15, r3
 8001044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	edc3 7a01 	vstr	s15, [r3, #4]
		#if defined(TYPE_DHT22)
			DHT_Data->Temperature = ((Temp_byte1<<8)|Temp_byte2);
			DHT_Data->Humidity = ((Rh_byte1<<8)|Rh_byte2);
		#endif
	}
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	200000b6 	.word	0x200000b6
 800105c:	200000b0 	.word	0x200000b0
 8001060:	200000b1 	.word	0x200000b1
 8001064:	200000b2 	.word	0x200000b2
 8001068:	200000b3 	.word	0x200000b3
 800106c:	200000b4 	.word	0x200000b4

08001070 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001070:	b480      	push	{r7}
 8001072:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001074:	f3bf 8f4f 	dsb	sy
}
 8001078:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <__NVIC_SystemReset+0x24>)
 800107c:	68db      	ldr	r3, [r3, #12]
 800107e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001082:	4904      	ldr	r1, [pc, #16]	; (8001094 <__NVIC_SystemReset+0x24>)
 8001084:	4b04      	ldr	r3, [pc, #16]	; (8001098 <__NVIC_SystemReset+0x28>)
 8001086:	4313      	orrs	r3, r2
 8001088:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800108a:	f3bf 8f4f 	dsb	sy
}
 800108e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <__NVIC_SystemReset+0x20>
 8001094:	e000ed00 	.word	0xe000ed00
 8001098:	05fa0004 	.word	0x05fa0004

0800109c <getStatusTypeString>:
	STATUS_NOT_ALLOWED,
	STATUS_IMPROPER_DATA,
	STATUS_UNKNOWN
} StatusType;

static char* getStatusTypeString(StatusType status) {
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
	switch (status) {
 80010a6:	79fb      	ldrb	r3, [r7, #7]
 80010a8:	2b10      	cmp	r3, #16
 80010aa:	d847      	bhi.n	800113c <getStatusTypeString+0xa0>
 80010ac:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <getStatusTypeString+0x18>)
 80010ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b2:	bf00      	nop
 80010b4:	080010f9 	.word	0x080010f9
 80010b8:	080010fd 	.word	0x080010fd
 80010bc:	08001101 	.word	0x08001101
 80010c0:	08001105 	.word	0x08001105
 80010c4:	08001109 	.word	0x08001109
 80010c8:	0800110d 	.word	0x0800110d
 80010cc:	08001111 	.word	0x08001111
 80010d0:	08001115 	.word	0x08001115
 80010d4:	08001119 	.word	0x08001119
 80010d8:	0800111d 	.word	0x0800111d
 80010dc:	08001121 	.word	0x08001121
 80010e0:	08001125 	.word	0x08001125
 80010e4:	08001129 	.word	0x08001129
 80010e8:	0800112d 	.word	0x0800112d
 80010ec:	08001131 	.word	0x08001131
 80010f0:	08001135 	.word	0x08001135
 80010f4:	08001139 	.word	0x08001139
	case STATUS_SUCCESS:
		return "SUCCESS";
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <getStatusTypeString+0xb0>)
 80010fa:	e020      	b.n	800113e <getStatusTypeString+0xa2>
	case STATUS_ERROR:
		return "ERROR";
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <getStatusTypeString+0xb4>)
 80010fe:	e01e      	b.n	800113e <getStatusTypeString+0xa2>
	case STATUS_INVALID_HANDLE:
		return "INVALID HANDLE";
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <getStatusTypeString+0xb8>)
 8001102:	e01c      	b.n	800113e <getStatusTypeString+0xa2>
	case STATUS_MODEM_NOT_READY:
		return "MODEM NOT READY";
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <getStatusTypeString+0xbc>)
 8001106:	e01a      	b.n	800113e <getStatusTypeString+0xa2>
	case STATUS_LIBRARY_NOT_OPEN:
		return "LIBRARY NOT OPEN";
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <getStatusTypeString+0xc0>)
 800110a:	e018      	b.n	800113e <getStatusTypeString+0xa2>
	case STATUS_LIBRARY_ALREADY_OPEN:
		return "LIBRARY ALREADY OPEN";
 800110c:	4b14      	ldr	r3, [pc, #80]	; (8001160 <getStatusTypeString+0xc4>)
 800110e:	e016      	b.n	800113e <getStatusTypeString+0xa2>
	case STATUS_BAD_PARAMETER:
		return "BAD PARAMETER";
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <getStatusTypeString+0xc8>)
 8001112:	e014      	b.n	800113e <getStatusTypeString+0xa2>
	case STATUS_NO_MEMORY:
		return "NO MEMORY";
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <getStatusTypeString+0xcc>)
 8001116:	e012      	b.n	800113e <getStatusTypeString+0xa2>
	case STATUS_TIMEOUT:
		return "TIMEOUT";
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <getStatusTypeString+0xd0>)
 800111a:	e010      	b.n	800113e <getStatusTypeString+0xa2>
	case STATUS_SOCKET_CLOSED:
		return "SOCKET CLOSED";
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <getStatusTypeString+0xd4>)
 800111e:	e00e      	b.n	800113e <getStatusTypeString+0xa2>
	case STATUS_SOCKET_NOT_CONNECTED:
		return "SOCKET NOT CONNECTED";
 8001120:	4b14      	ldr	r3, [pc, #80]	; (8001174 <getStatusTypeString+0xd8>)
 8001122:	e00c      	b.n	800113e <getStatusTypeString+0xa2>
	case STATUS_INTERNAL_FAILURE:
		return "INTERNAL FAILURE";
 8001124:	4b14      	ldr	r3, [pc, #80]	; (8001178 <getStatusTypeString+0xdc>)
 8001126:	e00a      	b.n	800113e <getStatusTypeString+0xa2>
	case STATUS_RESOURCE_CREATION_FAIL:
		return "RESOURCE CREATION FAIL";
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <getStatusTypeString+0xe0>)
 800112a:	e008      	b.n	800113e <getStatusTypeString+0xa2>
	case STATUS_UNSUPPORTED:
		return "UNSUPPORTED";
 800112c:	4b14      	ldr	r3, [pc, #80]	; (8001180 <getStatusTypeString+0xe4>)
 800112e:	e006      	b.n	800113e <getStatusTypeString+0xa2>
	case STATUS_NOT_ALLOWED:
		return "NOT ALLOWED";
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <getStatusTypeString+0xe8>)
 8001132:	e004      	b.n	800113e <getStatusTypeString+0xa2>
	case STATUS_IMPROPER_DATA:
		return "IMPROPER DATA";
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <getStatusTypeString+0xec>)
 8001136:	e002      	b.n	800113e <getStatusTypeString+0xa2>
	case STATUS_UNKNOWN:
		return "UNKNOWN";
 8001138:	4b14      	ldr	r3, [pc, #80]	; (800118c <getStatusTypeString+0xf0>)
 800113a:	e000      	b.n	800113e <getStatusTypeString+0xa2>
	default:
		return "INVALID STATUS";
 800113c:	4b14      	ldr	r3, [pc, #80]	; (8001190 <getStatusTypeString+0xf4>)
	}
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	0800bff8 	.word	0x0800bff8
 8001150:	0800bfac 	.word	0x0800bfac
 8001154:	0800c000 	.word	0x0800c000
 8001158:	0800c010 	.word	0x0800c010
 800115c:	0800c020 	.word	0x0800c020
 8001160:	0800c034 	.word	0x0800c034
 8001164:	0800c04c 	.word	0x0800c04c
 8001168:	0800c05c 	.word	0x0800c05c
 800116c:	0800c068 	.word	0x0800c068
 8001170:	0800c070 	.word	0x0800c070
 8001174:	0800c080 	.word	0x0800c080
 8001178:	0800c098 	.word	0x0800c098
 800117c:	0800c0ac 	.word	0x0800c0ac
 8001180:	0800c0c4 	.word	0x0800c0c4
 8001184:	0800c0d0 	.word	0x0800c0d0
 8001188:	0800c0dc 	.word	0x0800c0dc
 800118c:	0800c0ec 	.word	0x0800c0ec
 8001190:	0800c0f4 	.word	0x0800c0f4

08001194 <sleepMCU>:
#include "ViettelSDK.h"
#include <string.h>

void sleepMCU(struct ViettelSDK *self, uint16_t period_in_seconds) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af02      	add	r7, sp, #8
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	807b      	strh	r3, [r7, #2]
	/* Set the RTC time to 0 seconds */
	self->sTime.Hours = 0x00;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	self->sTime.Minutes = 0x00;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
	self->sTime.Seconds = 0x00;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	self->sTime.TimeFormat = RTC_HOURFORMAT_24;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	self->sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	639a      	str	r2, [r3, #56]	; 0x38
	self->sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c

	if (HAL_RTC_SetTime(self->rtc_timer, &self->sTime, RTC_FORMAT_BCD)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	332c      	adds	r3, #44	; 0x2c
 80011d4:	2201      	movs	r2, #1
 80011d6:	4619      	mov	r1, r3
 80011d8:	f006 fdb7 	bl	8007d4a <HAL_RTC_SetTime>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d010      	beq.n	8001204 <sleepMCU+0x70>
			!= HAL_OK) {
		sprintf(self->log_content, "ERROR IN SLEEPING...\n");
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80011e8:	4967      	ldr	r1, [pc, #412]	; (8001388 <sleepMCU+0x1f4>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f009 fce6 	bl	800abbc <siprintf>
		writeLog(self, LOG_INFO, self->log_content, true);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80011f6:	2301      	movs	r3, #1
 80011f8:	2100      	movs	r1, #0
 80011fa:	6878      	ldr	r0, [r7, #4]
 80011fc:	f000 fa10 	bl	8001620 <writeLog>
		Error_Handler();
 8001200:	f003 ff6a 	bl	80050d8 <Error_Handler>
	}

	/* Parse seconds to hours, minutes and seconds */
	uint8_t hours = (period_in_seconds / 3600);
 8001204:	887b      	ldrh	r3, [r7, #2]
 8001206:	4a61      	ldr	r2, [pc, #388]	; (800138c <sleepMCU+0x1f8>)
 8001208:	fba2 2303 	umull	r2, r3, r2, r3
 800120c:	0adb      	lsrs	r3, r3, #11
 800120e:	b29b      	uxth	r3, r3
 8001210:	73fb      	strb	r3, [r7, #15]
	uint8_t minutes = (period_in_seconds - (3600 * hours)) / 60;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	495e      	ldr	r1, [pc, #376]	; (8001390 <sleepMCU+0x1fc>)
 8001218:	fb01 f303 	mul.w	r3, r1, r3
 800121c:	4413      	add	r3, r2
 800121e:	4a5d      	ldr	r2, [pc, #372]	; (8001394 <sleepMCU+0x200>)
 8001220:	fb82 1203 	smull	r1, r2, r2, r3
 8001224:	441a      	add	r2, r3
 8001226:	1152      	asrs	r2, r2, #5
 8001228:	17db      	asrs	r3, r3, #31
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	73bb      	strb	r3, [r7, #14]
	uint8_t seconds = (period_in_seconds - (3600 * hours) - (minutes * 60));
 800122e:	887b      	ldrh	r3, [r7, #2]
 8001230:	b2da      	uxtb	r2, r3
 8001232:	7bbb      	ldrb	r3, [r7, #14]
 8001234:	4619      	mov	r1, r3
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	1acb      	subs	r3, r1, r3
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	b2d9      	uxtb	r1, r3
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	4618      	mov	r0, r3
 8001242:	0100      	lsls	r0, r0, #4
 8001244:	1ac3      	subs	r3, r0, r3
 8001246:	011b      	lsls	r3, r3, #4
 8001248:	b2db      	uxtb	r3, r3
 800124a:	440b      	add	r3, r1
 800124c:	b2db      	uxtb	r3, r3
 800124e:	4413      	add	r3, r2
 8001250:	737b      	strb	r3, [r7, #13]

	/* Set the RTC alarm to trigger after 100 seconds */
	self->sAlarm.AlarmTime.Hours = hours;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	self->sAlarm.AlarmTime.Minutes = minutes;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	7bba      	ldrb	r2, [r7, #14]
 800125e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	self->sAlarm.AlarmTime.Seconds = seconds;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7b7a      	ldrb	r2, [r7, #13]
 8001266:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	self->sAlarm.Alarm = RTC_ALARM_A;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001270:	669a      	str	r2, [r3, #104]	; 0x68
	self->sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_MONDAY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
	self->sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001280:	661a      	str	r2, [r3, #96]	; 0x60
	self->sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001288:	655a      	str	r2, [r3, #84]	; 0x54
	self->sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 8001290:	65da      	str	r2, [r3, #92]	; 0x5c
	self->sAlarm.AlarmTime.TimeFormat = RTC_HOURFORMAT_24;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2200      	movs	r2, #0
 8001296:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	sprintf(self->log_content,
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	f603 7049 	addw	r0, r3, #3913	; 0xf49
 80012a0:	7bfa      	ldrb	r2, [r7, #15]
 80012a2:	7bb9      	ldrb	r1, [r7, #14]
 80012a4:	7b7b      	ldrb	r3, [r7, #13]
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	460b      	mov	r3, r1
 80012aa:	493b      	ldr	r1, [pc, #236]	; (8001398 <sleepMCU+0x204>)
 80012ac:	f009 fc86 	bl	800abbc <siprintf>
			"Triggered timer with period %u hours %u minutes %u seconds.\n",
			hours, minutes, seconds);
	writeLog(self, LOG_INFO, self->log_content, true);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80012b6:	2301      	movs	r3, #1
 80012b8:	2100      	movs	r1, #0
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f9b0 	bl	8001620 <writeLog>

	self->passively_listen = true;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

	/* Sleep */
	sprintf(self->log_content, "MCU IS SLEEPING...\n");
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80012ce:	4933      	ldr	r1, [pc, #204]	; (800139c <sleepMCU+0x208>)
 80012d0:	4618      	mov	r0, r3
 80012d2:	f009 fc73 	bl	800abbc <siprintf>
	writeLog(self, LOG_INFO, self->log_content, true);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80012dc:	2301      	movs	r3, #1
 80012de:	2100      	movs	r1, #0
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 f99d 	bl	8001620 <writeLog>

	HAL_IWDG_Refresh(&hiwdg);
 80012e6:	482e      	ldr	r0, [pc, #184]	; (80013a0 <sleepMCU+0x20c>)
 80012e8:	f005 f8ce 	bl	8006488 <HAL_IWDG_Refresh>
	//HAL_TIM_Base_Start_IT(&htim2);

	if (HAL_RTC_SetAlarm_IT(self->rtc_timer, &self->sAlarm, RTC_FORMAT_BIN)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	3340      	adds	r3, #64	; 0x40
 80012f4:	2200      	movs	r2, #0
 80012f6:	4619      	mov	r1, r3
 80012f8:	f006 fe4c 	bl	8007f94 <HAL_RTC_SetAlarm_IT>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <sleepMCU+0x172>
			!= HAL_OK) {
		Error_Handler();
 8001302:	f003 fee9 	bl	80050d8 <Error_Handler>
	}

	sprintf(self->log_content, "DEBUG BEFORE SLEEPING....\n\n\n\n\n\n...");
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 800130c:	4925      	ldr	r1, [pc, #148]	; (80013a4 <sleepMCU+0x210>)
 800130e:	4618      	mov	r0, r3
 8001310:	f009 fc54 	bl	800abbc <siprintf>
	writeLog(self, LOG_INFO, self->log_content, true);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 800131a:	2301      	movs	r3, #1
 800131c:	2100      	movs	r1, #0
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f000 f97e 	bl	8001620 <writeLog>


	// Go to sleep
	HAL_SuspendTick();
 8001324:	f004 f952 	bl	80055cc <HAL_SuspendTick>
	HAL_PWR_EnableSleepOnExit();		//Ngu lai moi khi bi interrupt
 8001328:	f005 fa76 	bl	8006818 <HAL_PWR_EnableSleepOnExit>

	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800132c:	2101      	movs	r1, #1
 800132e:	2000      	movs	r0, #0
 8001330:	f005 fa3e 	bl	80067b0 <HAL_PWR_EnterSLEEPMode>
	//HAL_PWR_EnterSTANDBYMode();



	sprintf(self->log_content, "DEBUG AFTER SLEEPING.....\n");
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 800133a:	491b      	ldr	r1, [pc, #108]	; (80013a8 <sleepMCU+0x214>)
 800133c:	4618      	mov	r0, r3
 800133e:	f009 fc3d 	bl	800abbc <siprintf>
	writeLog(self, LOG_INFO, self->log_content, true);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8001348:	2301      	movs	r3, #1
 800134a:	2100      	movs	r1, #0
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f967 	bl	8001620 <writeLog>


	// Wake up
	HAL_ResumeTick();
 8001352:	f004 f94d 	bl	80055f0 <HAL_ResumeTick>
	HAL_TIM_Base_Stop_IT(&htim2);
 8001356:	4815      	ldr	r0, [pc, #84]	; (80013ac <sleepMCU+0x218>)
 8001358:	f007 f916 	bl	8008588 <HAL_TIM_Base_Stop_IT>
	HAL_PWR_DisableSleepOnExit();
 800135c:	f005 fa6c 	bl	8006838 <HAL_PWR_DisableSleepOnExit>

	sprintf(self->log_content, "MCU IS WAKING...\n");
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8001366:	4912      	ldr	r1, [pc, #72]	; (80013b0 <sleepMCU+0x21c>)
 8001368:	4618      	mov	r0, r3
 800136a:	f009 fc27 	bl	800abbc <siprintf>
	writeLog(self, LOG_INFO, self->log_content, true);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8001374:	2301      	movs	r3, #1
 8001376:	2100      	movs	r1, #0
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	f000 f951 	bl	8001620 <writeLog>
}
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	0800c104 	.word	0x0800c104
 800138c:	91a2b3c5 	.word	0x91a2b3c5
 8001390:	fffff1f0 	.word	0xfffff1f0
 8001394:	88888889 	.word	0x88888889
 8001398:	0800c11c 	.word	0x0800c11c
 800139c:	0800c15c 	.word	0x0800c15c
 80013a0:	200000b8 	.word	0x200000b8
 80013a4:	0800c170 	.word	0x0800c170
 80013a8:	0800c194 	.word	0x0800c194
 80013ac:	20000124 	.word	0x20000124
 80013b0:	0800c1b0 	.word	0x0800c1b0

080013b4 <resetMCU>:

void resetMCU(struct ViettelSDK *self) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	getSensorData(self);
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f002 fb7d 	bl	8003abc <getSensorData>
	sprintf(self->log_content, "MCU will be reset now.\n\n\n");
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80013c8:	4906      	ldr	r1, [pc, #24]	; (80013e4 <resetMCU+0x30>)
 80013ca:	4618      	mov	r0, r3
 80013cc:	f009 fbf6 	bl	800abbc <siprintf>
	writeLog(self, LOG_INFO, self->log_content, true);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80013d6:	2301      	movs	r3, #1
 80013d8:	2100      	movs	r1, #0
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f920 	bl	8001620 <writeLog>
	NVIC_SystemReset();
 80013e0:	f7ff fe46 	bl	8001070 <__NVIC_SystemReset>
 80013e4:	0800c1c4 	.word	0x0800c1c4

080013e8 <wakeUpModule>:
}

void wakeUpModule(struct ViettelSDK *self) {
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	uint8_t count = WAKE_UP_MODULE_PUSH_COUNT;
 80013f0:	2302      	movs	r3, #2
 80013f2:	73fb      	strb	r3, [r7, #15]
	while (count--) {
 80013f4:	e00d      	b.n	8001412 <wakeUpModule+0x2a>
		pullDownPWRpin(self);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f000 f862 	bl	80014c0 <pullDownPWRpin>
		HAL_Delay(MODULE_PWR_PIN_PULL_DOWN_DELAY_MS);
 80013fc:	f240 404c 	movw	r0, #1100	; 0x44c
 8001400:	f004 faae 	bl	8005960 <HAL_Delay>
		noPullPWRpin(self);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f000 f876 	bl	80014f6 <noPullPWRpin>
//		HAL_GPIO_WritePin(self->pwr_pin_GPIOx, self->pwr_pin_GPIO_Pin,
//				GPIO_PIN_SET);
		HAL_Delay(MODULE_PWR_PIN_NO_PULL_DELAY_MS);
 800140a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800140e:	f004 faa7 	bl	8005960 <HAL_Delay>
	while (count--) {
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	1e5a      	subs	r2, r3, #1
 8001416:	73fa      	strb	r2, [r7, #15]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1ec      	bne.n	80013f6 <wakeUpModule+0xe>
	}
	noPullPWRpin(self);
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f000 f86a 	bl	80014f6 <noPullPWRpin>

	sprintf(self->log_content, "Woke up module...");
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8001428:	4909      	ldr	r1, [pc, #36]	; (8001450 <wakeUpModule+0x68>)
 800142a:	4618      	mov	r0, r3
 800142c:	f009 fbc6 	bl	800abbc <siprintf>
	writeLog(self, LOG_INFO, self->log_content, true);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8001436:	2301      	movs	r3, #1
 8001438:	2100      	movs	r1, #0
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 f8f0 	bl	8001620 <writeLog>

	HAL_Delay(WAIT_FOR_MODULE_TO_WAKE_MS);
 8001440:	f242 3028 	movw	r0, #9000	; 0x2328
 8001444:	f004 fa8c 	bl	8005960 <HAL_Delay>
}
 8001448:	bf00      	nop
 800144a:	3710      	adds	r7, #16
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	0800c1e0 	.word	0x0800c1e0

08001454 <GetUpModule>:



void GetUpModule(struct ViettelSDK *self) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
	uint8_t count = 1;
 800145c:	2301      	movs	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
	while (count--) {
 8001460:	e00d      	b.n	800147e <GetUpModule+0x2a>
		pullDownPWRpin(self);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 f82c 	bl	80014c0 <pullDownPWRpin>
		HAL_Delay(MODULE_PWR_PIN_PULL_DOWN_DELAY_MS);
 8001468:	f240 404c 	movw	r0, #1100	; 0x44c
 800146c:	f004 fa78 	bl	8005960 <HAL_Delay>
		noPullPWRpin(self);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f000 f840 	bl	80014f6 <noPullPWRpin>
		HAL_Delay(MODULE_PWR_PIN_NO_PULL_DELAY_MS);
 8001476:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800147a:	f004 fa71 	bl	8005960 <HAL_Delay>
	while (count--) {
 800147e:	7bfb      	ldrb	r3, [r7, #15]
 8001480:	1e5a      	subs	r2, r3, #1
 8001482:	73fa      	strb	r2, [r7, #15]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1ec      	bne.n	8001462 <GetUpModule+0xe>
	}
	noPullPWRpin(self);
 8001488:	6878      	ldr	r0, [r7, #4]
 800148a:	f000 f834 	bl	80014f6 <noPullPWRpin>

	sprintf(self->log_content, "GET UP module...");
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8001494:	4909      	ldr	r1, [pc, #36]	; (80014bc <GetUpModule+0x68>)
 8001496:	4618      	mov	r0, r3
 8001498:	f009 fb90 	bl	800abbc <siprintf>
	writeLog(self, LOG_INFO, self->log_content, true);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80014a2:	2301      	movs	r3, #1
 80014a4:	2100      	movs	r1, #0
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f000 f8ba 	bl	8001620 <writeLog>

	HAL_Delay(WAIT_FOR_MODULE_TO_WAKE_MS);
 80014ac:	f242 3028 	movw	r0, #9000	; 0x2328
 80014b0:	f004 fa56 	bl	8005960 <HAL_Delay>
}
 80014b4:	bf00      	nop
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	0800c1f4 	.word	0x0800c1f4

080014c0 <pullDownPWRpin>:


void pullDownPWRpin(struct ViettelSDK *self) {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
	self->GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2202      	movs	r2, #2
 80014cc:	615a      	str	r2, [r3, #20]
	HAL_GPIO_Init(self->pwr_pin_GPIOx, &self->GPIO_InitStruct);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a1a      	ldr	r2, [r3, #32]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	330c      	adds	r3, #12
 80014d6:	4619      	mov	r1, r3
 80014d8:	4610      	mov	r0, r2
 80014da:	f004 fdc9 	bl	8006070 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(self->pwr_pin_GPIOx, self->pwr_pin_GPIO_Pin,
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a18      	ldr	r0, [r3, #32]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014e6:	2200      	movs	r2, #0
 80014e8:	4619      	mov	r1, r3
 80014ea:	f004 ff43 	bl	8006374 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
}
 80014ee:	bf00      	nop
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <noPullPWRpin>:

void noPullPWRpin(struct ViettelSDK *self) {
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
	self->GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	615a      	str	r2, [r3, #20]
	HAL_GPIO_Init(self->pwr_pin_GPIOx, &self->GPIO_InitStruct);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6a1a      	ldr	r2, [r3, #32]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	330c      	adds	r3, #12
 800150c:	4619      	mov	r1, r3
 800150e:	4610      	mov	r0, r2
 8001510:	f004 fdae 	bl	8006070 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(self->pwr_pin_GPIOx, self->pwr_pin_GPIO_Pin,
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a18      	ldr	r0, [r3, #32]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800151c:	2201      	movs	r2, #1
 800151e:	4619      	mov	r1, r3
 8001520:	f004 ff28 	bl	8006374 <HAL_GPIO_WritePin>
					GPIO_PIN_SET);
}
 8001524:	bf00      	nop
 8001526:	3708      	adds	r7, #8
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}

0800152c <updateFLASHData>:
//	sprintf(self->log_content, "Setup sleep timer successfully.");
//	writeLog(self, LOG_INFO, self->log_content, true);
//}

/* Data */
void updateFLASHData(struct ViettelSDK *self) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
	*self->data_list->pair.value.uint32_value = self->previous_pulse;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f8d3 3e68 	ldr.w	r3, [r3, #3688]	; 0xe68
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	f8d2 2e64 	ldr.w	r2, [r2, #3684]	; 0xe64
 8001542:	601a      	str	r2, [r3, #0]
	sprintf(self->log_content, "Update current flow data: %lu",
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	f603 7049 	addw	r0, r3, #3913	; 0xf49
			*self->data_list->pair.value.uint32_value);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f8d3 3e68 	ldr.w	r3, [r3, #3688]	; 0xe68
 8001550:	6a1b      	ldr	r3, [r3, #32]
	sprintf(self->log_content, "Update current flow data: %lu",
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	461a      	mov	r2, r3
 8001556:	4907      	ldr	r1, [pc, #28]	; (8001574 <updateFLASHData+0x48>)
 8001558:	f009 fb30 	bl	800abbc <siprintf>
	writeLog(self, LOG_INFO, self->log_content, true);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8001562:	2301      	movs	r3, #1
 8001564:	2100      	movs	r1, #0
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f85a 	bl	8001620 <writeLog>
}
 800156c:	bf00      	nop
 800156e:	3708      	adds	r7, #8
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	0800c208 	.word	0x0800c208

08001578 <readFLASHPreviousFlowData>:

void readFLASHPreviousFlowData(struct ViettelSDK *self, uint32_t address) {
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
 8001580:	6039      	str	r1, [r7, #0]
	self->previous_pulse = *(__IO uint32_t*) (address);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f8c3 2e64 	str.w	r2, [r3, #3684]	; 0xe64
	sprintf(self->log_content, "Read flow data from FLASH memory: %lu",
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f603 7049 	addw	r0, r3, #3913	; 0xf49
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f8d3 3e64 	ldr.w	r3, [r3, #3684]	; 0xe64
 8001598:	461a      	mov	r2, r3
 800159a:	4907      	ldr	r1, [pc, #28]	; (80015b8 <readFLASHPreviousFlowData+0x40>)
 800159c:	f009 fb0e 	bl	800abbc <siprintf>
			self->previous_pulse);
	writeLog(self, LOG_INFO, self->log_content, true);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80015a6:	2301      	movs	r3, #1
 80015a8:	2100      	movs	r1, #0
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f838 	bl	8001620 <writeLog>
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	0800c228 	.word	0x0800c228

080015bc <validateUARTPorts>:
//	writeLog(self, LOG_INFO, self->log_content, true);
//	HAL_FLASH_Lock();
//}

/* Debugger */
bool validateUARTPorts(struct ViettelSDK *self) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	bool validated = true;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
	if (self->debugger_uart == self->module_uart) {
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ce:	f8d3 21a4 	ldr.w	r2, [r3, #420]	; 0x1a4
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80015dc:	429a      	cmp	r2, r3
 80015de:	d10f      	bne.n	8001600 <validateUARTPorts+0x44>
		self->module_uart = 0x00;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e6:	461a      	mov	r2, r3
 80015e8:	2300      	movs	r3, #0
 80015ea:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
		validated = false;
 80015ee:	2300      	movs	r3, #0
 80015f0:	73fb      	strb	r3, [r7, #15]
		writeLog(self, LOG_WARNING,
 80015f2:	2301      	movs	r3, #1
 80015f4:	4a08      	ldr	r2, [pc, #32]	; (8001618 <validateUARTPorts+0x5c>)
 80015f6:	2101      	movs	r1, #1
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f000 f811 	bl	8001620 <writeLog>
 80015fe:	e005      	b.n	800160c <validateUARTPorts+0x50>
				"Debugger has the same UART port as the Connector. UART port will be used for Debugger.",
				true);
	} else {
		writeLog(self, LOG_INFO, "Module UART port is initialized.", true);
 8001600:	2301      	movs	r3, #1
 8001602:	4a06      	ldr	r2, [pc, #24]	; (800161c <validateUARTPorts+0x60>)
 8001604:	2100      	movs	r1, #0
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 f80a 	bl	8001620 <writeLog>
	}
	return validated;
 800160c:	7bfb      	ldrb	r3, [r7, #15]
}
 800160e:	4618      	mov	r0, r3
 8001610:	3710      	adds	r7, #16
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	0800c250 	.word	0x0800c250
 800161c:	0800c2a8 	.word	0x0800c2a8

08001620 <writeLog>:

void writeLog(struct ViettelSDK *self, enum LogType log_type,
		char log_content[], bool default_log) {
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	607a      	str	r2, [r7, #4]
 800162a:	461a      	mov	r2, r3
 800162c:	460b      	mov	r3, r1
 800162e:	72fb      	strb	r3, [r7, #11]
 8001630:	4613      	mov	r3, r2
 8001632:	72bb      	strb	r3, [r7, #10]

	if ((!default_log) && (!self->detail_log)) {
 8001634:	7abb      	ldrb	r3, [r7, #10]
 8001636:	f083 0301 	eor.w	r3, r3, #1
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b00      	cmp	r3, #0
 800163e:	d008      	beq.n	8001652 <writeLog+0x32>
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f893 3f48 	ldrb.w	r3, [r3, #3912]	; 0xf48
 8001646:	f083 0301 	eor.w	r3, r3, #1
 800164a:	b2db      	uxtb	r3, r3
 800164c:	2b00      	cmp	r3, #0
 800164e:	f040 80ce 	bne.w	80017ee <writeLog+0x1ce>
		return;
	}

	if (strlen(log_content) >= LOG_SIZE) {
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7fe fdbc 	bl	80001d0 <strlen>
 8001658:	4603      	mov	r3, r0
 800165a:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 800165e:	d33c      	bcc.n	80016da <writeLog+0xba>
		strcpy(self->log_content, (const char*) "Log content is too long!");
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8001666:	4a64      	ldr	r2, [pc, #400]	; (80017f8 <writeLog+0x1d8>)
 8001668:	461d      	mov	r5, r3
 800166a:	4614      	mov	r4, r2
 800166c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800166e:	6028      	str	r0, [r5, #0]
 8001670:	6069      	str	r1, [r5, #4]
 8001672:	60aa      	str	r2, [r5, #8]
 8001674:	60eb      	str	r3, [r5, #12]
 8001676:	cc03      	ldmia	r4!, {r0, r1}
 8001678:	6128      	str	r0, [r5, #16]
 800167a:	6169      	str	r1, [r5, #20]
 800167c:	7823      	ldrb	r3, [r4, #0]
 800167e:	762b      	strb	r3, [r5, #24]
		HAL_UART_Transmit(self->debugger_uart, (uint8_t*) "LOG ERROR: ",
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001686:	f8d3 01a4 	ldr.w	r0, [r3, #420]	; 0x1a4
 800168a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800168e:	220b      	movs	r2, #11
 8001690:	495a      	ldr	r1, [pc, #360]	; (80017fc <writeLog+0x1dc>)
 8001692:	f007 fd91 	bl	80091b8 <HAL_UART_Transmit>
				(uint16_t) strlen("LOG ERROR: "), LOG_TIMEOUT_MS);
		HAL_UART_Transmit(self->debugger_uart, (uint8_t*) self->log_content,
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800169c:	f8d3 41a4 	ldr.w	r4, [r3, #420]	; 0x1a4
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f603 7549 	addw	r5, r3, #3913	; 0xf49
				(uint16_t) strlen(self->log_content),
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe fd8f 	bl	80001d0 <strlen>
 80016b2:	4603      	mov	r3, r0
		HAL_UART_Transmit(self->debugger_uart, (uint8_t*) self->log_content,
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	f44f 7316 	mov.w	r3, #600	; 0x258
 80016ba:	4629      	mov	r1, r5
 80016bc:	4620      	mov	r0, r4
 80016be:	f007 fd7b 	bl	80091b8 <HAL_UART_Transmit>
				LOG_TIMEOUT_MS);
		HAL_UART_Transmit(self->debugger_uart, (uint8_t*) "\n",
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016c8:	f8d3 01a4 	ldr.w	r0, [r3, #420]	; 0x1a4
 80016cc:	f44f 7316 	mov.w	r3, #600	; 0x258
 80016d0:	2201      	movs	r2, #1
 80016d2:	494b      	ldr	r1, [pc, #300]	; (8001800 <writeLog+0x1e0>)
 80016d4:	f007 fd70 	bl	80091b8 <HAL_UART_Transmit>
				(uint16_t) strlen("\n"), LOG_TIMEOUT_MS);
		return;
 80016d8:	e08a      	b.n	80017f0 <writeLog+0x1d0>
	}

	strcpy(self->log_content, log_content);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f009 fa97 	bl	800ac16 <strcpy>
	if (log_type == LOG_INFO) {
 80016e8:	7afb      	ldrb	r3, [r7, #11]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10b      	bne.n	8001706 <writeLog+0xe6>
		HAL_UART_Transmit(self->debugger_uart, (uint8_t*) "LOG INFO: ",
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016f4:	f8d3 01a4 	ldr.w	r0, [r3, #420]	; 0x1a4
 80016f8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80016fc:	220a      	movs	r2, #10
 80016fe:	4941      	ldr	r1, [pc, #260]	; (8001804 <writeLog+0x1e4>)
 8001700:	f007 fd5a 	bl	80091b8 <HAL_UART_Transmit>
 8001704:	e051      	b.n	80017aa <writeLog+0x18a>
				(uint16_t) strlen("LOG INFO: "), LOG_TIMEOUT_MS);
	} else if (log_type == LOG_WARNING) {
 8001706:	7afb      	ldrb	r3, [r7, #11]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d10b      	bne.n	8001724 <writeLog+0x104>
		HAL_UART_Transmit(self->debugger_uart, (uint8_t*) "LOG WARNING: ",
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001712:	f8d3 01a4 	ldr.w	r0, [r3, #420]	; 0x1a4
 8001716:	f44f 7316 	mov.w	r3, #600	; 0x258
 800171a:	220d      	movs	r2, #13
 800171c:	493a      	ldr	r1, [pc, #232]	; (8001808 <writeLog+0x1e8>)
 800171e:	f007 fd4b 	bl	80091b8 <HAL_UART_Transmit>
 8001722:	e042      	b.n	80017aa <writeLog+0x18a>
				(uint16_t) strlen("LOG WARNING: "),
				LOG_TIMEOUT_MS);
	} else if (log_type == LOG_ERROR) {
 8001724:	7afb      	ldrb	r3, [r7, #11]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d10b      	bne.n	8001742 <writeLog+0x122>
		HAL_UART_Transmit(self->debugger_uart, (uint8_t*) "LOG ERROR: ",
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001730:	f8d3 01a4 	ldr.w	r0, [r3, #420]	; 0x1a4
 8001734:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001738:	220b      	movs	r2, #11
 800173a:	4930      	ldr	r1, [pc, #192]	; (80017fc <writeLog+0x1dc>)
 800173c:	f007 fd3c 	bl	80091b8 <HAL_UART_Transmit>
 8001740:	e033      	b.n	80017aa <writeLog+0x18a>
				(uint16_t) strlen("LOG ERROR: "), LOG_TIMEOUT_MS);
	} else if (log_type == LOG_DEBUG) {
 8001742:	7afb      	ldrb	r3, [r7, #11]
 8001744:	2b03      	cmp	r3, #3
 8001746:	d10b      	bne.n	8001760 <writeLog+0x140>
		HAL_UART_Transmit(self->debugger_uart, (uint8_t*) "LOG DEBUG: ",
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800174e:	f8d3 01a4 	ldr.w	r0, [r3, #420]	; 0x1a4
 8001752:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001756:	220b      	movs	r2, #11
 8001758:	492c      	ldr	r1, [pc, #176]	; (800180c <writeLog+0x1ec>)
 800175a:	f007 fd2d 	bl	80091b8 <HAL_UART_Transmit>
 800175e:	e024      	b.n	80017aa <writeLog+0x18a>
				(uint16_t) strlen("LOG DEBUG: "), LOG_TIMEOUT_MS);
	} else if (log_type == LOG_EMPTY) {
 8001760:	7afb      	ldrb	r3, [r7, #11]
 8001762:	2b04      	cmp	r3, #4
 8001764:	d021      	beq.n	80017aa <writeLog+0x18a>
		/* Log nothing */
	} else {
		HAL_UART_Transmit(self->debugger_uart, (uint8_t*) "LOG ERROR: ",
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176c:	f8d3 01a4 	ldr.w	r0, [r3, #420]	; 0x1a4
 8001770:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001774:	220b      	movs	r2, #11
 8001776:	4921      	ldr	r1, [pc, #132]	; (80017fc <writeLog+0x1dc>)
 8001778:	f007 fd1e 	bl	80091b8 <HAL_UART_Transmit>
				(uint16_t) strlen("LOG ERROR: "), LOG_TIMEOUT_MS);
		HAL_UART_Transmit(self->debugger_uart, (uint8_t*) "Invalid LOG TYPE!",
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001782:	f8d3 01a4 	ldr.w	r0, [r3, #420]	; 0x1a4
 8001786:	f44f 7316 	mov.w	r3, #600	; 0x258
 800178a:	2211      	movs	r2, #17
 800178c:	4920      	ldr	r1, [pc, #128]	; (8001810 <writeLog+0x1f0>)
 800178e:	f007 fd13 	bl	80091b8 <HAL_UART_Transmit>
				(uint16_t) strlen("Invalid LOG TYPE!"),
				LOG_TIMEOUT_MS);
		HAL_UART_Transmit(self->debugger_uart, (uint8_t*) "\n",
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001798:	f8d3 01a4 	ldr.w	r0, [r3, #420]	; 0x1a4
 800179c:	f44f 7316 	mov.w	r3, #600	; 0x258
 80017a0:	2201      	movs	r2, #1
 80017a2:	4917      	ldr	r1, [pc, #92]	; (8001800 <writeLog+0x1e0>)
 80017a4:	f007 fd08 	bl	80091b8 <HAL_UART_Transmit>
				(uint16_t) strlen("\n"),
				LOG_TIMEOUT_MS);
		return;
 80017a8:	e022      	b.n	80017f0 <writeLog+0x1d0>
	}
	HAL_UART_Transmit(self->debugger_uart, (uint8_t*) self->log_content,
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017b0:	f8d3 41a4 	ldr.w	r4, [r3, #420]	; 0x1a4
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f603 7549 	addw	r5, r3, #3913	; 0xf49
			(uint16_t) strlen(self->log_content), LOG_TIMEOUT_MS);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fd05 	bl	80001d0 <strlen>
 80017c6:	4603      	mov	r3, r0
	HAL_UART_Transmit(self->debugger_uart, (uint8_t*) self->log_content,
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	f44f 7316 	mov.w	r3, #600	; 0x258
 80017ce:	4629      	mov	r1, r5
 80017d0:	4620      	mov	r0, r4
 80017d2:	f007 fcf1 	bl	80091b8 <HAL_UART_Transmit>
	HAL_UART_Transmit(self->debugger_uart, (uint8_t*) "\r\n",
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017dc:	f8d3 01a4 	ldr.w	r0, [r3, #420]	; 0x1a4
 80017e0:	f44f 7316 	mov.w	r3, #600	; 0x258
 80017e4:	2202      	movs	r2, #2
 80017e6:	490b      	ldr	r1, [pc, #44]	; (8001814 <writeLog+0x1f4>)
 80017e8:	f007 fce6 	bl	80091b8 <HAL_UART_Transmit>
 80017ec:	e000      	b.n	80017f0 <writeLog+0x1d0>
		return;
 80017ee:	bf00      	nop
			(uint16_t) strlen("\r\n"),
			LOG_TIMEOUT_MS);
}
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bdb0      	pop	{r4, r5, r7, pc}
 80017f6:	bf00      	nop
 80017f8:	0800c2cc 	.word	0x0800c2cc
 80017fc:	0800c2e8 	.word	0x0800c2e8
 8001800:	0800c2f4 	.word	0x0800c2f4
 8001804:	0800c2f8 	.word	0x0800c2f8
 8001808:	0800c304 	.word	0x0800c304
 800180c:	0800c314 	.word	0x0800c314
 8001810:	0800c320 	.word	0x0800c320
 8001814:	0800c334 	.word	0x0800c334

08001818 <logStartBanner>:

/* SDK */
void logStartBanner(struct ViettelSDK *self) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
	sprintf(self->log_content,
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8001826:	4908      	ldr	r1, [pc, #32]	; (8001848 <logStartBanner+0x30>)
 8001828:	4618      	mov	r0, r3
 800182a:	f009 f9c7 	bl	800abbc <siprintf>
			"\n\n\n==================== STARTING ====================");
	writeLog(self, LOG_EMPTY, self->log_content, true);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8001834:	2301      	movs	r3, #1
 8001836:	2104      	movs	r1, #4
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7ff fef1 	bl	8001620 <writeLog>
}
 800183e:	bf00      	nop
 8001840:	3708      	adds	r7, #8
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	0800c338 	.word	0x0800c338

0800184c <initializeSDK>:

void initializeSDK(struct ViettelSDK *self, UART_HandleTypeDef *debugger_uart,
		UART_HandleTypeDef *module_uart, DMA_HandleTypeDef *module_uart_hdma,
		GPIO_TypeDef *pwr_pin_GPIOx, uint16_t pwr_pin_GPIO_Pin, RTC_HandleTypeDef* hrtc) {
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	60f8      	str	r0, [r7, #12]
 8001854:	60b9      	str	r1, [r7, #8]
 8001856:	607a      	str	r2, [r7, #4]
 8001858:	603b      	str	r3, [r7, #0]

	HAL_Delay(INITIALIZE_DELAY_MS);
 800185a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800185e:	f004 f87f 	bl	8005960 <HAL_Delay>

	self->detail_log = DETAIL_LOG_SETUP;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2201      	movs	r2, #1
 8001866:	f883 2f48 	strb.w	r2, [r3, #3912]	; 0xf48
	self->data_list = NULL;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	2200      	movs	r2, #0
 800186e:	f8c3 2e68 	str.w	r2, [r3, #3688]	; 0xe68
	self->addDataSuccessfully = true;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2201      	movs	r2, #1
 8001876:	f883 2e60 	strb.w	r2, [r3, #3680]	; 0xe60
	self->sleep = false;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
	self->mqtt_params.receiveSubcribeTimeout = RECEIVE_SUBSCRIBE_TIMEOUT;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f242 7210 	movw	r2, #10000	; 0x2710
 8001886:	f8c3 2b40 	str.w	r2, [r3, #2880]	; 0xb40
	self->warming_up_counter = WARMING_UP_COUNT;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2204      	movs	r2, #4
 800188e:	721a      	strb	r2, [r3, #8]
	self->fail_increment = 0;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
	self->passively_listen = false;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	self->successfully_initialized = false;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	self->attempt_count = 1;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	2201      	movs	r2, #1
 80018ac:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	strcpy(self->delimiter, ",\r\n");
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80018b6:	4a44      	ldr	r2, [pc, #272]	; (80019c8 <initializeSDK+0x17c>)
 80018b8:	6810      	ldr	r0, [r2, #0]
 80018ba:	6018      	str	r0, [r3, #0]

	self->debugger_uart = debugger_uart;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018c2:	461a      	mov	r2, r3
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	f8c2 31a4 	str.w	r3, [r2, #420]	; 0x1a4
	self->module_uart = module_uart;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018d0:	461a      	mov	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f8c2 31a8 	str.w	r3, [r2, #424]	; 0x1a8
	self->module_uart_hdma = module_uart_hdma;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018de:	461a      	mov	r2, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	f8c2 31ac 	str.w	r3, [r2, #428]	; 0x1ac

	/* Initialize Power Pin Wake Up */
	self->pwr_pin_GPIOx = pwr_pin_GPIOx;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	621a      	str	r2, [r3, #32]
	self->pwr_pin_GPIO_Pin = pwr_pin_GPIO_Pin;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8bba      	ldrh	r2, [r7, #28]
 80018f0:	849a      	strh	r2, [r3, #36]	; 0x24
	self->GPIO_InitStruct.Pin = self->pwr_pin_GPIO_Pin;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018f6:	461a      	mov	r2, r3
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	60da      	str	r2, [r3, #12]
	self->GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2201      	movs	r2, #1
 8001900:	611a      	str	r2, [r3, #16]
	self->GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	615a      	str	r2, [r3, #20]
	self->GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2200      	movs	r2, #0
 800190c:	619a      	str	r2, [r3, #24]

	/* Print start banner */
	logStartBanner(self);
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f7ff ff82 	bl	8001818 <logStartBanner>
	readFLASHPreviousFlowData(self, FLASH_USER_START_ADDR);
 8001914:	492d      	ldr	r1, [pc, #180]	; (80019cc <initializeSDK+0x180>)
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f7ff fe2e 	bl	8001578 <readFLASHPreviousFlowData>
	HAL_IWDG_Init(&hiwdg);
 800191c:	482c      	ldr	r0, [pc, #176]	; (80019d0 <initializeSDK+0x184>)
 800191e:	f004 fd64 	bl	80063ea <HAL_IWDG_Init>

	if (!validateUARTPorts(self)) {
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f7ff fe4a 	bl	80015bc <validateUARTPorts>
 8001928:	4603      	mov	r3, r0
 800192a:	f083 0301 	eor.w	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b00      	cmp	r3, #0
 8001932:	d006      	beq.n	8001942 <initializeSDK+0xf6>
		writeLog(self, LOG_ERROR, "SDK is NOT initialized.", true);
 8001934:	2301      	movs	r3, #1
 8001936:	4a27      	ldr	r2, [pc, #156]	; (80019d4 <initializeSDK+0x188>)
 8001938:	2102      	movs	r1, #2
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f7ff fe70 	bl	8001620 <writeLog>
 8001940:	e009      	b.n	8001956 <initializeSDK+0x10a>
	} else {
		writeLog(self, LOG_INFO, "SDK is initialized.", true);
 8001942:	2301      	movs	r3, #1
 8001944:	4a24      	ldr	r2, [pc, #144]	; (80019d8 <initializeSDK+0x18c>)
 8001946:	2100      	movs	r1, #0
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f7ff fe69 	bl	8001620 <writeLog>
		self->successfully_initialized = true;
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	2201      	movs	r2, #1
 8001952:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	}

	HAL_GPIO_Init(self->pwr_pin_GPIOx, &self->GPIO_InitStruct);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	6a1a      	ldr	r2, [r3, #32]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	330c      	adds	r3, #12
 800195e:	4619      	mov	r1, r3
 8001960:	4610      	mov	r0, r2
 8001962:	f004 fb85 	bl	8006070 <HAL_GPIO_Init>
	self->period_timer = HAL_GetTick();
 8001966:	f003 ffef 	bl	8005948 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	679a      	str	r2, [r3, #120]	; 0x78
	self->successfully_initialized = true;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
	self->rtc_timer = hrtc;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a3a      	ldr	r2, [r7, #32]
 800197c:	629a      	str	r2, [r3, #40]	; 0x28
	self->run_first_time = true;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
	self->stage = 1;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2201      	movs	r2, #1
 800198a:	705a      	strb	r2, [r3, #1]

	self->data7022[0] = 0;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	2200      	movs	r2, #0
 8001990:	f8c3 2e6c 	str.w	r2, [r3, #3692]	; 0xe6c
	self->data7022[1] = 0;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	f8c3 2e70 	str.w	r2, [r3, #3696]	; 0xe70
	self->data7022[2] = 0;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	f8c3 2e74 	str.w	r2, [r3, #3700]	; 0xe74
	self->data7022[3] = 0;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2200      	movs	r2, #0
 80019a8:	f8c3 2e78 	str.w	r2, [r3, #3704]	; 0xe78
	self->data7022[4] = 0;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2200      	movs	r2, #0
 80019b0:	f8c3 2e7c 	str.w	r2, [r3, #3708]	; 0xe7c

	strcpy(self->message7022,"");
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
}
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	0800c370 	.word	0x0800c370
 80019cc:	0801f800 	.word	0x0801f800
 80019d0:	200000b8 	.word	0x200000b8
 80019d4:	0800c374 	.word	0x0800c374
 80019d8:	0800c38c 	.word	0x0800c38c

080019dc <connectToPlatform>:

void connectToPlatform(struct ViettelSDK *self) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

	uint32_t interval_time = HAL_GetTick() - self->period_timer;
 80019e4:	f003 ffb0 	bl	8005948 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	60fb      	str	r3, [r7, #12]
	sprintf(self->log_content, "Interval: %lu \n",
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	495a      	ldr	r1, [pc, #360]	; (8001b64 <connectToPlatform+0x188>)
 80019fc:	4618      	mov	r0, r3
 80019fe:	f009 f8dd 	bl	800abbc <siprintf>
			interval_time);
	writeLog(self, LOG_INFO, self->log_content, true);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8001a08:	2301      	movs	r3, #1
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	6878      	ldr	r0, [r7, #4]
 8001a0e:	f7ff fe07 	bl	8001620 <writeLog>



	if (self->run_first_time
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f893 3075 	ldrb.w	r3, [r3, #117]	; 0x75
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d109      	bne.n	8001a30 <connectToPlatform+0x54>
			|| (HAL_GetTick() - self->period_timer >= CONNECTING_PERIOD_MS )) {
 8001a1c:	f003 ff94 	bl	8005948 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3287 	movw	r2, #4999	; 0x1387
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d961      	bls.n	8001af4 <connectToPlatform+0x118>

		/* Header */
		writeLog(self, LOG_EMPTY, "\n", true);
 8001a30:	2301      	movs	r3, #1
 8001a32:	4a4d      	ldr	r2, [pc, #308]	; (8001b68 <connectToPlatform+0x18c>)
 8001a34:	2104      	movs	r1, #4
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff fdf2 	bl	8001620 <writeLog>
		sprintf(self->log_content, "Start connecting to Platform. Attempt: %u.",
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f603 7049 	addw	r0, r3, #3913	; 0xf49
				self->attempt_count);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
		sprintf(self->log_content, "Start connecting to Platform. Attempt: %u.",
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4948      	ldr	r1, [pc, #288]	; (8001b6c <connectToPlatform+0x190>)
 8001a4c:	f009 f8b6 	bl	800abbc <siprintf>
		writeLog(self, LOG_INFO, self->log_content, true);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8001a56:	2301      	movs	r3, #1
 8001a58:	2100      	movs	r1, #0
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f7ff fde0 	bl	8001620 <writeLog>
		self->period_timer = HAL_GetTick();
 8001a60:	f003 ff72 	bl	8005948 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	679a      	str	r2, [r3, #120]	; 0x78

		/* Check whether data are properly added */
		if (!self->addDataSuccessfully) {
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3e60 	ldrb.w	r3, [r3, #3680]	; 0xe60
 8001a70:	f083 0301 	eor.w	r3, r3, #1
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <connectToPlatform+0xa4>
			resetMCU(self);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff fc9a 	bl	80013b4 <resetMCU>
		}

		/* Main Flow */
		if (!self->successfully_initialized) {
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001a86:	f083 0301 	eor.w	r3, r3, #1
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00d      	beq.n	8001aac <connectToPlatform+0xd0>
			writeLog(self, LOG_ERROR,
 8001a90:	2301      	movs	r3, #1
 8001a92:	4a37      	ldr	r2, [pc, #220]	; (8001b70 <connectToPlatform+0x194>)
 8001a94:	2102      	movs	r1, #2
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f7ff fdc2 	bl	8001620 <writeLog>
					"SDK is NOT initialized. MCU will be reset...", true);
			HAL_Delay(3000);
 8001a9c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001aa0:	f003 ff5e 	bl	8005960 <HAL_Delay>
			resetMCU(self);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fc85 	bl	80013b4 <resetMCU>
 8001aaa:	e005      	b.n	8001ab8 <connectToPlatform+0xdc>
		} else {
			wakeUpModule(self);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff fc9b 	bl	80013e8 <wakeUpModule>


			//*********** Main flow here *****************//

			mainFlow(self);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f002 fa30 	bl	8003f18 <mainFlow>
			//*******************************************//

		}

		/* Footer */
		writeLog(self, LOG_DEBUG, "End Period\n", true);
 8001ab8:	2301      	movs	r3, #1
 8001aba:	4a2e      	ldr	r2, [pc, #184]	; (8001b74 <connectToPlatform+0x198>)
 8001abc:	2103      	movs	r1, #3
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff fdae 	bl	8001620 <writeLog>
		self->attempt_count++;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001aca:	3301      	adds	r3, #1
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
		writeLog(self, LOG_EMPTY, "\n\n", true);
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	4a28      	ldr	r2, [pc, #160]	; (8001b78 <connectToPlatform+0x19c>)
 8001ad8:	2104      	movs	r1, #4
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff fda0 	bl	8001620 <writeLog>
		self->period_timer = HAL_GetTick();
 8001ae0:	f003 ff32 	bl	8005948 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	679a      	str	r2, [r3, #120]	; 0x78
		self->run_first_time = false;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 8001af2:	e032      	b.n	8001b5a <connectToPlatform+0x17e>
	}



	else {
		sprintf(self->log_content, "Start connecting again to Platform. Attempt: %u.",
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f603 7049 	addw	r0, r3, #3913	; 0xf49
						self->attempt_count);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
		sprintf(self->log_content, "Start connecting again to Platform. Attempt: %u.",
 8001b00:	461a      	mov	r2, r3
 8001b02:	491e      	ldr	r1, [pc, #120]	; (8001b7c <connectToPlatform+0x1a0>)
 8001b04:	f009 f85a 	bl	800abbc <siprintf>
		writeLog(self, LOG_INFO, self->log_content, true);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8001b0e:	2301      	movs	r3, #1
 8001b10:	2100      	movs	r1, #0
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fd84 	bl	8001620 <writeLog>

		/*************** MAIN FLOW *****************/
		mainFlow(self);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f002 f9fd 	bl	8003f18 <mainFlow>

		/*******************************************/


		/* Footer */
		writeLog(self, LOG_DEBUG, "End Period\n", true);
 8001b1e:	2301      	movs	r3, #1
 8001b20:	4a14      	ldr	r2, [pc, #80]	; (8001b74 <connectToPlatform+0x198>)
 8001b22:	2103      	movs	r1, #3
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f7ff fd7b 	bl	8001620 <writeLog>
		self->attempt_count++;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	; 0x76
 8001b30:	3301      	adds	r3, #1
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
		writeLog(self, LOG_EMPTY, "\n\n", true);
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <connectToPlatform+0x19c>)
 8001b3e:	2104      	movs	r1, #4
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f7ff fd6d 	bl	8001620 <writeLog>
		self->period_timer = HAL_GetTick();
 8001b46:	f003 feff 	bl	8005948 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	679a      	str	r2, [r3, #120]	; 0x78
		self->run_first_time = false;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75

	}



}
 8001b58:	bf00      	nop
 8001b5a:	bf00      	nop
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	0800c3a0 	.word	0x0800c3a0
 8001b68:	0800c2f4 	.word	0x0800c2f4
 8001b6c:	0800c3b0 	.word	0x0800c3b0
 8001b70:	0800c3dc 	.word	0x0800c3dc
 8001b74:	0800c40c 	.word	0x0800c40c
 8001b78:	0800c418 	.word	0x0800c418
 8001b7c:	0800c41c 	.word	0x0800c41c

08001b80 <getData>:

void getData (struct ViettelSDK *self){
 8001b80:	b5b0      	push	{r4, r5, r7, lr}
 8001b82:	b086      	sub	sp, #24
 8001b84:	af04      	add	r7, sp, #16
 8001b86:	6078      	str	r0, [r7, #4]
    snprintf(self->message7022, sizeof(self->message7022),
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f503 6468 	add.w	r4, r3, #3712	; 0xe80
             "{\"imei\": \"%s\", \"RSRP\": %d, \"rice_amount\": %d, \"humidity\": %d, \"temperature\": %d}",
             self->imei,
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f603 25c9 	addw	r5, r3, #2761	; 0xac9
    snprintf(self->message7022, sizeof(self->message7022),
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f8d3 3e70 	ldr.w	r3, [r3, #3696]	; 0xe70
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	f8d2 2e74 	ldr.w	r2, [r2, #3700]	; 0xe74
 8001ba0:	6879      	ldr	r1, [r7, #4]
 8001ba2:	f8d1 1e7c 	ldr.w	r1, [r1, #3708]	; 0xe7c
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f8d0 0e78 	ldr.w	r0, [r0, #3704]	; 0xe78
 8001bac:	9003      	str	r0, [sp, #12]
 8001bae:	9102      	str	r1, [sp, #8]
 8001bb0:	9201      	str	r2, [sp, #4]
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	462b      	mov	r3, r5
 8001bb6:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <getData+0x48>)
 8001bb8:	21c8      	movs	r1, #200	; 0xc8
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f008 ffca 	bl	800ab54 <sniprintf>
             self->data7022[1],
             self->data7022[2],
             self->data7022[4],
             self->data7022[3]);
}
 8001bc0:	bf00      	nop
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc8:	0800c450 	.word	0x0800c450

08001bcc <sendCommand>:

struct CommandResponse sendCommand(struct ViettelSDK *self, char *command,
		uint8_t count, uint32_t timeout) {
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b089      	sub	sp, #36	; 0x24
 8001bd0:	af02      	add	r7, sp, #8
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
 8001bd8:	70fb      	strb	r3, [r7, #3]

	uint8_t max_count = count;
 8001bda:	78fb      	ldrb	r3, [r7, #3]
 8001bdc:	75fb      	strb	r3, [r7, #23]
	count = 0;
 8001bde:	2300      	movs	r3, #0
 8001be0:	70fb      	strb	r3, [r7, #3]
	HAL_IWDG_Refresh(&hiwdg);
 8001be2:	4845      	ldr	r0, [pc, #276]	; (8001cf8 <sendCommand+0x12c>)
 8001be4:	f004 fc50 	bl	8006488 <HAL_IWDG_Refresh>



	while (count++ < max_count) {
 8001be8:	e06e      	b.n	8001cc8 <sendCommand+0xfc>
		self->command_response.status = STATUS_UNKNOWN;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2210      	movs	r2, #16
 8001bee:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		clearMainBuffer(self);
 8001bf2:	68b8      	ldr	r0, [r7, #8]
 8001bf4:	f000 f8a2 	bl	8001d3c <clearMainBuffer>
		self->passively_listen = false;
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
		self->psm_timer = HAL_GetTick();
 8001c00:	f003 fea2 	bl	8005948 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	671a      	str	r2, [r3, #112]	; 0x70

		/* Start the DMA again */
		resetDMAInterrupt_2(self);
 8001c0a:	68b8      	ldr	r0, [r7, #8]
 8001c0c:	f000 f8b9 	bl	8001d82 <resetDMAInterrupt_2>

		sprintf(self->log_content,
 8001c10:	68bb      	ldr	r3, [r7, #8]
 8001c12:	f603 7049 	addw	r0, r3, #3913	; 0xf49
 8001c16:	78fa      	ldrb	r2, [r7, #3]
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	4936      	ldr	r1, [pc, #216]	; (8001cfc <sendCommand+0x130>)
 8001c22:	f008 ffcb 	bl	800abbc <siprintf>
				"\n\n========= SEND COMMAND: %s | Attempt: %u/%u =========",
				command, count, max_count);
		writeLog(self, LOG_EMPTY, self->log_content, true);
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	2104      	movs	r1, #4
 8001c30:	68b8      	ldr	r0, [r7, #8]
 8001c32:	f7ff fcf5 	bl	8001620 <writeLog>


		strcpy(self->command_response.response, "");
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	3380      	adds	r3, #128	; 0x80
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Transmit(self->module_uart, (uint8_t*) command,
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c44:	f8d3 41a8 	ldr.w	r4, [r3, #424]	; 0x1a8
				(uint16_t) strlen(command), timeout);
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7fe fac1 	bl	80001d0 <strlen>
 8001c4e:	4603      	mov	r3, r0
		HAL_UART_Transmit(self->module_uart, (uint8_t*) command,
 8001c50:	b29a      	uxth	r2, r3
 8001c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	4620      	mov	r0, r4
 8001c58:	f007 faae 	bl	80091b8 <HAL_UART_Transmit>
		HAL_UART_Transmit(self->module_uart, (uint8_t*) "\r\n",
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c62:	f8d3 01a8 	ldr.w	r0, [r3, #424]	; 0x1a8
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	2202      	movs	r2, #2
 8001c6a:	4925      	ldr	r1, [pc, #148]	; (8001d00 <sendCommand+0x134>)
 8001c6c:	f007 faa4 	bl	80091b8 <HAL_UART_Transmit>
				(uint16_t) strlen("\r\n"), timeout);


		self->command_response.status = STATUS_TIMEOUT;
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	2208      	movs	r2, #8
 8001c74:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
		self->response_received = false;
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
		self->command_timer = HAL_GetTick();
 8001c80:	f003 fe62 	bl	8005948 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	f8c3 27f0 	str.w	r2, [r3, #2032]	; 0x7f0

		while (HAL_GetTick() - self->command_timer <= timeout) {
 8001c8c:	e004      	b.n	8001c98 <sendCommand+0xcc>
			if (self->response_received == true) {
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	f893 37f4 	ldrb.w	r3, [r3, #2036]	; 0x7f4
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10a      	bne.n	8001cae <sendCommand+0xe2>
		while (HAL_GetTick() - self->command_timer <= timeout) {
 8001c98:	f003 fe56 	bl	8005948 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	f8d3 37f0 	ldr.w	r3, [r3, #2032]	; 0x7f0
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	d2f0      	bcs.n	8001c8e <sendCommand+0xc2>
 8001cac:	e000      	b.n	8001cb0 <sendCommand+0xe4>
				break;
 8001cae:	bf00      	nop
			}
		}

		if (self->command_response.status == STATUS_SUCCESS) {
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00d      	beq.n	8001cd6 <sendCommand+0x10a>
			break;
		}
		clearMainBuffer(self);
 8001cba:	68b8      	ldr	r0, [r7, #8]
 8001cbc:	f000 f83e 	bl	8001d3c <clearMainBuffer>
		HAL_Delay(COMMAND_DELAY_MS);
 8001cc0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cc4:	f003 fe4c 	bl	8005960 <HAL_Delay>
	while (count++ < max_count) {
 8001cc8:	78fb      	ldrb	r3, [r7, #3]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	70fa      	strb	r2, [r7, #3]
 8001cce:	7dfa      	ldrb	r2, [r7, #23]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d88a      	bhi.n	8001bea <sendCommand+0x1e>
 8001cd4:	e000      	b.n	8001cd8 <sendCommand+0x10c>
			break;
 8001cd6:	bf00      	nop

	}
	HAL_Delay(200);
 8001cd8:	20c8      	movs	r0, #200	; 0xc8
 8001cda:	f003 fe41 	bl	8005960 <HAL_Delay>
	return self->command_response;
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	337f      	adds	r3, #127	; 0x7f
 8001ce6:	f240 3221 	movw	r2, #801	; 0x321
 8001cea:	4619      	mov	r1, r3
 8001cec:	f008 fd84 	bl	800a7f8 <memcpy>
}
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	371c      	adds	r7, #28
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd90      	pop	{r4, r7, pc}
 8001cf8:	200000b8 	.word	0x200000b8
 8001cfc:	0800c4a4 	.word	0x0800c4a4
 8001d00:	0800c334 	.word	0x0800c334

08001d04 <clearCommand>:

void clearCommand(struct ViettelSDK *self) {
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < COMMAND_SIZE; i++) {
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	e009      	b.n	8001d26 <clearCommand+0x22>
		self->command[i] = 0;
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	4413      	add	r3, r2
 8001d18:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < COMMAND_SIZE; i++) {
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	3301      	adds	r3, #1
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8001d2c:	d3f1      	bcc.n	8001d12 <clearCommand+0xe>
	}
}
 8001d2e:	bf00      	nop
 8001d30:	bf00      	nop
 8001d32:	3714      	adds	r7, #20
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr

08001d3c <clearMainBuffer>:

void clearMainBuffer(struct ViettelSDK *self) {
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < RESPONSE_MAIN_BUFFER_SIZE; i++) {
 8001d44:	2300      	movs	r3, #0
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	e009      	b.n	8001d5e <clearMainBuffer+0x22>
		self->response_main_buffer[i] = '\0';
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4413      	add	r3, r2
 8001d50:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 8001d54:	2200      	movs	r2, #0
 8001d56:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < RESPONSE_MAIN_BUFFER_SIZE; i++) {
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001d64:	d3f1      	bcc.n	8001d4a <clearMainBuffer+0xe>
	}
	self->old_position = 0;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f8a3 27ec 	strh.w	r2, [r3, #2028]	; 0x7ec
	self->new_position = 0;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f8a3 27ee 	strh.w	r2, [r3, #2030]	; 0x7ee
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <resetDMAInterrupt_2>:

void resetDMAInterrupt_2(struct ViettelSDK *self) {
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]

	HAL_UART_AbortReceive(self->module_uart);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d90:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8001d94:	4618      	mov	r0, r3
 8001d96:	f007 faa3 	bl	80092e0 <HAL_UART_AbortReceive>

	HAL_UARTEx_ReceiveToIdle_DMA(self->module_uart,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001da0:	f8d3 01a8 	ldr.w	r0, [r3, #424]	; 0x1a8
				self->response_receive_buffer,
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
	HAL_UARTEx_ReceiveToIdle_DMA(self->module_uart,
 8001daa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001dae:	4619      	mov	r1, r3
 8001db0:	f008 fc91 	bl	800a6d6 <HAL_UARTEx_ReceiveToIdle_DMA>
				RESPONSE_RECEIVE_BUFFER_SIZE);

	__HAL_DMA_DISABLE_IT(self->module_uart_hdma, DMA_IT_HT);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dba:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dc8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0204 	bic.w	r2, r2, #4
 8001dd2:	601a      	str	r2, [r3, #0]

//	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, self->response_receive_buffer, RESPONSE_RECEIVE_BUFFER_SIZE);
//	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <saveResponse>:
////	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, self->response_receive_buffer, RESPONSE_RECEIVE_BUFFER_SIZE);
////	__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
}

void saveResponse(struct ViettelSDK *self, UART_HandleTypeDef *huart,
		uint16_t size) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	4613      	mov	r3, r2
 8001de8:	80fb      	strh	r3, [r7, #6]
	/* Check whether MCU is sleep */



	if (self->module_uart->Instance == USART1) {
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001df0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4aa4      	ldr	r2, [pc, #656]	; (8002088 <saveResponse+0x2ac>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	f040 8142 	bne.w	8002082 <saveResponse+0x2a6>
		char *ptr;

		// Update the last position before copying new data
		self->old_position = self->new_position;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f8b3 27ee 	ldrh.w	r2, [r3, #2030]	; 0x7ee
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f8a3 27ec 	strh.w	r2, [r3, #2028]	; 0x7ec

		/* If the data in large and it is about to exceed the buffer size, Debugger indicates error */
		if (self->old_position + size > RESPONSE_MAIN_BUFFER_SIZE) {
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f8b3 37ec 	ldrh.w	r3, [r3, #2028]	; 0x7ec
 8001e10:	461a      	mov	r2, r3
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	4413      	add	r3, r2
 8001e16:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001e1a:	d912      	bls.n	8001e42 <saveResponse+0x66>
			sprintf(self->log_content,
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8001e22:	499a      	ldr	r1, [pc, #616]	; (800208c <saveResponse+0x2b0>)
 8001e24:	4618      	mov	r0, r3
 8001e26:	f008 fec9 	bl	800abbc <siprintf>
					"Response too large! Response Receive Buffer and Response Main Buffer will be cleared!");
			writeLog(self, LOG_ERROR, self->log_content, false);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8001e30:	2300      	movs	r3, #0
 8001e32:	2102      	movs	r1, #2
 8001e34:	68f8      	ldr	r0, [r7, #12]
 8001e36:	f7ff fbf3 	bl	8001620 <writeLog>
			clearMainBuffer(self);
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f7ff ff7e 	bl	8001d3c <clearMainBuffer>
 8001e40:	e016      	b.n	8001e70 <saveResponse+0x94>
		 */
		else {
			//writeLog(self, LOG_WARNING, self->response_receive_buffer, true);


			memcpy( (uint8_t*)self->response_main_buffer + self->old_position,
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
 8001e48:	68fa      	ldr	r2, [r7, #12]
 8001e4a:	f8b2 27ec 	ldrh.w	r2, [r2, #2028]	; 0x7ec
 8001e4e:	1898      	adds	r0, r3, r2
					self->response_receive_buffer, size);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f503 7368 	add.w	r3, r3, #928	; 0x3a0
			memcpy( (uint8_t*)self->response_main_buffer + self->old_position,
 8001e56:	88fa      	ldrh	r2, [r7, #6]
 8001e58:	4619      	mov	r1, r3
 8001e5a:	f008 fccd 	bl	800a7f8 <memcpy>

			self->new_position = self->old_position + size;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f8b3 27ec 	ldrh.w	r2, [r3, #2028]	; 0x7ec
 8001e64:	88fb      	ldrh	r3, [r7, #6]
 8001e66:	4413      	add	r3, r2
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f8a3 27ee 	strh.w	r2, [r3, #2030]	; 0x7ee
		//writeLog(self, LOG_DEBUG, self->response_main_buffer, true);



		/* Checking passively listen */
		if (self->passively_listen) {
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 8082 	beq.w	8001f80 <saveResponse+0x1a4>
			HAL_PWR_DisableSleepOnExit();
 8001e7c:	f004 fcdc 	bl	8006838 <HAL_PWR_DisableSleepOnExit>
			for (int i = 0; i < PASSIVE_RESPONSE_LENGTH; i++) {
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	e075      	b.n	8001f72 <saveResponse+0x196>
				ptr = strstr(self->response_main_buffer,
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f203 42cc 	addw	r2, r3, #1228	; 0x4cc
 8001e8c:	4980      	ldr	r1, [pc, #512]	; (8002090 <saveResponse+0x2b4>)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e94:	4619      	mov	r1, r3
 8001e96:	4610      	mov	r0, r2
 8001e98:	f008 fed8 	bl	800ac4c <strstr>
 8001e9c:	6138      	str	r0, [r7, #16]
						PASSIVE_RESPONSE_SIGN[i]);
				if (ptr != NULL) {
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d063      	beq.n	8001f6c <saveResponse+0x190>
					writeLog(self, LOG_EMPTY, self->response_main_buffer,
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f203 42cc 	addw	r2, r3, #1228	; 0x4cc
 8001eaa:	2301      	movs	r3, #1
 8001eac:	2104      	movs	r1, #4
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f7ff fbb6 	bl	8001620 <writeLog>
					true);
					sprintf(self->log_content, "Received an PASSIVE command!");
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8001eba:	4976      	ldr	r1, [pc, #472]	; (8002094 <saveResponse+0x2b8>)
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f008 fe7d 	bl	800abbc <siprintf>
					writeLog(self, LOG_INFO, self->log_content, true);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8001ec8:	2301      	movs	r3, #1
 8001eca:	2100      	movs	r1, #0
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f7ff fba7 	bl	8001620 <writeLog>
					self->command_response.status = STATUS_SUCCESS;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
					clearMainBuffer(self);
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f7ff ff2e 	bl	8001d3c <clearMainBuffer>
					self->response_received = true;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4

					if (i == 0) {
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d107      	bne.n	8001efe <saveResponse+0x122>
						sprintf(self->log_content, "Power off module!");
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8001ef4:	4968      	ldr	r1, [pc, #416]	; (8002098 <saveResponse+0x2bc>)
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f008 fe60 	bl	800abbc <siprintf>
 8001efc:	e029      	b.n	8001f52 <saveResponse+0x176>
					} else if (i == 1) {
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d10a      	bne.n	8001f1a <saveResponse+0x13e>
						sprintf(self->log_content, "Entered PSM mode!");
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8001f0a:	4964      	ldr	r1, [pc, #400]	; (800209c <saveResponse+0x2c0>)
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f008 fe55 	bl	800abbc <siprintf>
						self->sleep = true;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2201      	movs	r2, #1
 8001f16:	701a      	strb	r2, [r3, #0]
 8001f18:	e01b      	b.n	8001f52 <saveResponse+0x176>
					} else if (i == 2) {
 8001f1a:	69fb      	ldr	r3, [r7, #28]
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d10a      	bne.n	8001f36 <saveResponse+0x15a>
						sprintf(self->log_content, "Exited PSM mode!");
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8001f26:	495e      	ldr	r1, [pc, #376]	; (80020a0 <saveResponse+0x2c4>)
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f008 fe47 	bl	800abbc <siprintf>
						self->sleep = false;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
 8001f34:	e00d      	b.n	8001f52 <saveResponse+0x176>
					} else if (i == 3) {
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d10a      	bne.n	8001f52 <saveResponse+0x176>
						sprintf(self->log_content,
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8001f42:	4958      	ldr	r1, [pc, #352]	; (80020a4 <saveResponse+0x2c8>)
 8001f44:	4618      	mov	r0, r3
 8001f46:	f008 fe39 	bl	800abbc <siprintf>
								"Received subcribe messages from platform!");
						self->mqtt_params.receiveSubcribe = true;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	f883 2b3c 	strb.w	r2, [r3, #2876]	; 0xb3c
					}
					writeLog(self, LOG_INFO, self->log_content, true);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8001f58:	2301      	movs	r3, #1
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f7ff fb5f 	bl	8001620 <writeLog>
					self->passively_listen = false;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

					return;
 8001f6a:	e08a      	b.n	8002082 <saveResponse+0x2a6>
			for (int i = 0; i < PASSIVE_RESPONSE_LENGTH; i++) {
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	3301      	adds	r3, #1
 8001f70:	61fb      	str	r3, [r7, #28]
 8001f72:	69fb      	ldr	r3, [r7, #28]
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	d986      	bls.n	8001e86 <saveResponse+0xaa>
				}
			}
			clearMainBuffer(self);
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f7ff fedf 	bl	8001d3c <clearMainBuffer>
			return;
 8001f7e:	e080      	b.n	8002082 <saveResponse+0x2a6>
		}

		for (int i = 0; i < SUCCESS_RESPONSE_LENGTH; i++) {
 8001f80:	2300      	movs	r3, #0
 8001f82:	61bb      	str	r3, [r7, #24]
 8001f84:	e03e      	b.n	8002004 <saveResponse+0x228>
			ptr = strstr(self->response_main_buffer, SUCCESS_COMMAND_SIGN[i]);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f203 42cc 	addw	r2, r3, #1228	; 0x4cc
 8001f8c:	4946      	ldr	r1, [pc, #280]	; (80020a8 <saveResponse+0x2cc>)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f94:	4619      	mov	r1, r3
 8001f96:	4610      	mov	r0, r2
 8001f98:	f008 fe58 	bl	800ac4c <strstr>
 8001f9c:	6138      	str	r0, [r7, #16]
			if (ptr != NULL) {
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d02c      	beq.n	8001ffe <saveResponse+0x222>
				self->command_response.status = STATUS_SUCCESS;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
				strcpy(self->command_response.response,
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f103 0280 	add.w	r2, r3, #128	; 0x80
						self->response_main_buffer);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f203 43cc 	addw	r3, r3, #1228	; 0x4cc
				strcpy(self->command_response.response,
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4610      	mov	r0, r2
 8001fbc:	f008 fe2b 	bl	800ac16 <strcpy>
				writeLog(self, LOG_EMPTY, self->response_main_buffer,
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	f203 42cc 	addw	r2, r3, #1228	; 0x4cc
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	2104      	movs	r1, #4
 8001fca:	68f8      	ldr	r0, [r7, #12]
 8001fcc:	f7ff fb28 	bl	8001620 <writeLog>
				true);
				sprintf(self->log_content, "Received an OK command!");
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8001fd6:	4935      	ldr	r1, [pc, #212]	; (80020ac <saveResponse+0x2d0>)
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f008 fdef 	bl	800abbc <siprintf>
				writeLog(self, LOG_INFO, self->log_content, false);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	68f8      	ldr	r0, [r7, #12]
 8001fea:	f7ff fb19 	bl	8001620 <writeLog>
				clearMainBuffer(self);
 8001fee:	68f8      	ldr	r0, [r7, #12]
 8001ff0:	f7ff fea4 	bl	8001d3c <clearMainBuffer>
				self->response_received = true;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
				return;
 8001ffc:	e041      	b.n	8002082 <saveResponse+0x2a6>
		for (int i = 0; i < SUCCESS_RESPONSE_LENGTH; i++) {
 8001ffe:	69bb      	ldr	r3, [r7, #24]
 8002000:	3301      	adds	r3, #1
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b02      	cmp	r3, #2
 8002008:	d9bd      	bls.n	8001f86 <saveResponse+0x1aa>
			}
		}

		/* Checking completion of command */
		for (int i = 0; i < ERROR_RESPONSE_LENGTH; i++) {
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e034      	b.n	800207a <saveResponse+0x29e>
			ptr = strstr(self->response_main_buffer, ERROR_COMMAND_SIGN[i]);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f203 42cc 	addw	r2, r3, #1228	; 0x4cc
 8002016:	4926      	ldr	r1, [pc, #152]	; (80020b0 <saveResponse+0x2d4>)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800201e:	4619      	mov	r1, r3
 8002020:	4610      	mov	r0, r2
 8002022:	f008 fe13 	bl	800ac4c <strstr>
 8002026:	6138      	str	r0, [r7, #16]
			if (ptr != NULL) {
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d022      	beq.n	8002074 <saveResponse+0x298>
				self->command_response.status = STATUS_ERROR;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 207f 	strb.w	r2, [r3, #127]	; 0x7f
				writeLog(self, LOG_EMPTY, self->response_main_buffer,
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	f203 42cc 	addw	r2, r3, #1228	; 0x4cc
 800203c:	2301      	movs	r3, #1
 800203e:	2104      	movs	r1, #4
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	f7ff faed 	bl	8001620 <writeLog>
				true);
				sprintf(self->log_content, "Received an ERROR command!");
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 800204c:	4919      	ldr	r1, [pc, #100]	; (80020b4 <saveResponse+0x2d8>)
 800204e:	4618      	mov	r0, r3
 8002050:	f008 fdb4 	bl	800abbc <siprintf>
				writeLog(self, LOG_ERROR, self->log_content, false);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 800205a:	2300      	movs	r3, #0
 800205c:	2102      	movs	r1, #2
 800205e:	68f8      	ldr	r0, [r7, #12]
 8002060:	f7ff fade 	bl	8001620 <writeLog>
				clearMainBuffer(self);
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f7ff fe69 	bl	8001d3c <clearMainBuffer>
				self->response_received = true;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2201      	movs	r2, #1
 800206e:	f883 27f4 	strb.w	r2, [r3, #2036]	; 0x7f4
//				HAL_Delay(ERROR_COMMAND_DELAY_MS);
				return;
 8002072:	e006      	b.n	8002082 <saveResponse+0x2a6>
		for (int i = 0; i < ERROR_RESPONSE_LENGTH; i++) {
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	3301      	adds	r3, #1
 8002078:	617b      	str	r3, [r7, #20]
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d9c7      	bls.n	8002010 <saveResponse+0x234>
			}
		}

		return;
 8002080:	bf00      	nop
	}
}
 8002082:	3720      	adds	r7, #32
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40013800 	.word	0x40013800
 800208c:	0800c4dc 	.word	0x0800c4dc
 8002090:	20000014 	.word	0x20000014
 8002094:	0800c534 	.word	0x0800c534
 8002098:	0800c554 	.word	0x0800c554
 800209c:	0800c568 	.word	0x0800c568
 80020a0:	0800c57c 	.word	0x0800c57c
 80020a4:	0800c590 	.word	0x0800c590
 80020a8:	20000000 	.word	0x20000000
 80020ac:	0800c5bc 	.word	0x0800c5bc
 80020b0:	2000000c 	.word	0x2000000c
 80020b4:	0800c5d4 	.word	0x0800c5d4

080020b8 <checkModule>:


StatusType checkModule(struct ViettelSDK *self) {
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 80020be:	af02      	add	r7, sp, #8
 80020c0:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
	/* AT */
	/* Initialize STATUS_UNKNOWN */
	StatusType output_status = STATUS_UNKNOWN;
 80020c4:	2310      	movs	r3, #16
 80020c6:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337

	/* Send command */
	self->command_response = sendCommand(self, "AT",
 80020ca:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 80020ce:	4638      	mov	r0, r7
 80020d0:	f44f 7316 	mov.w	r3, #600	; 0x258
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	230a      	movs	r3, #10
 80020d8:	4a42      	ldr	r2, [pc, #264]	; (80021e4 <checkModule+0x12c>)
 80020da:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 80020de:	f7ff fd75 	bl	8001bcc <sendCommand>
 80020e2:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80020e6:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 80020ea:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 80020ee:	4611      	mov	r1, r2
 80020f0:	f240 3221 	movw	r2, #801	; 0x321
 80020f4:	4618      	mov	r0, r3
 80020f6:	f008 fb7f 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT + 6,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT - 400); /* Configured for PSM mode, DO NOT CHANGE */

	/* Get output status */
	output_status = self->command_response.status;
 80020fa:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80020fe:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002102:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337

	/* Log status of command */
	sprintf(self->log_content, "Checking Module Status is %s.",
 8002106:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800210a:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 800210e:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8002112:	4618      	mov	r0, r3
 8002114:	f7fe ffc2 	bl	800109c <getStatusTypeString>
 8002118:	4603      	mov	r3, r0
 800211a:	461a      	mov	r2, r3
 800211c:	4932      	ldr	r1, [pc, #200]	; (80021e8 <checkModule+0x130>)
 800211e:	4620      	mov	r0, r4
 8002120:	f008 fd4c 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));

	/* Logical processing */
	if (output_status != STATUS_SUCCESS) {
 8002124:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00e      	beq.n	800214a <checkModule+0x92>
		writeLog(self, LOG_WARNING, self->log_content, false);
 800212c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002130:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002134:	2300      	movs	r3, #0
 8002136:	2101      	movs	r1, #1
 8002138:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800213c:	f7ff fa70 	bl	8001620 <writeLog>
		/* What to do if status is NOT SUCCESS */
		GetUpModule(self);
 8002140:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002144:	f7ff f986 	bl	8001454 <GetUpModule>
 8002148:	e045      	b.n	80021d6 <checkModule+0x11e>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 800214a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800214e:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002152:	2300      	movs	r3, #0
 8002154:	2100      	movs	r1, #0
 8002156:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800215a:	f7ff fa61 	bl	8001620 <writeLog>
		/* What to do if status is SUCCESS */

		/* Warm up module */
		sprintf(self->log_content, "Warming up module %u times.",
 800215e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002162:	f603 7049 	addw	r0, r3, #3913	; 0xf49
				self->warming_up_counter);
 8002166:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800216a:	7a1b      	ldrb	r3, [r3, #8]
		sprintf(self->log_content, "Warming up module %u times.",
 800216c:	461a      	mov	r2, r3
 800216e:	491f      	ldr	r1, [pc, #124]	; (80021ec <checkModule+0x134>)
 8002170:	f008 fd24 	bl	800abbc <siprintf>
		writeLog(self, LOG_INFO, self->log_content, true);
 8002174:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002178:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 800217c:	2301      	movs	r3, #1
 800217e:	2100      	movs	r1, #0
 8002180:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002184:	f7ff fa4c 	bl	8001620 <writeLog>
		while (self->warming_up_counter--) {
 8002188:	e017      	b.n	80021ba <checkModule+0x102>
			self->command_response = sendCommand(self, "AT", 1,
 800218a:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 800218e:	4638      	mov	r0, r7
 8002190:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	2301      	movs	r3, #1
 8002198:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <checkModule+0x12c>)
 800219a:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 800219e:	f7ff fd15 	bl	8001bcc <sendCommand>
 80021a2:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80021a6:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 80021aa:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 80021ae:	4611      	mov	r1, r2
 80021b0:	f240 3221 	movw	r2, #801	; 0x321
 80021b4:	4618      	mov	r0, r3
 80021b6:	f008 fb1f 	bl	800a7f8 <memcpy>
		while (self->warming_up_counter--) {
 80021ba:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80021be:	7a1b      	ldrb	r3, [r3, #8]
 80021c0:	1e5a      	subs	r2, r3, #1
 80021c2:	b2d1      	uxtb	r1, r2
 80021c4:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 80021c8:	7211      	strb	r1, [r2, #8]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1dd      	bne.n	800218a <checkModule+0xd2>
			RUN_COMMAND_TIMEOUT_MS_DEFAULT);
		}

		self->warming_up_counter = WARMING_UP_COUNT;
 80021ce:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80021d2:	2204      	movs	r2, #4
 80021d4:	721a      	strb	r2, [r3, #8]
	}

	return output_status;
 80021d6:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 80021da:	4618      	mov	r0, r3
 80021dc:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd90      	pop	{r4, r7, pc}
 80021e4:	0800c5f0 	.word	0x0800c5f0
 80021e8:	0800c5f4 	.word	0x0800c5f4
 80021ec:	0800c614 	.word	0x0800c614

080021f0 <setCommandEchoMode>:

StatusType setCommandEchoMode(struct ViettelSDK *self, bool echo_mode) {
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 80021f6:	af02      	add	r7, sp, #8
 80021f8:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
 80021fc:	460b      	mov	r3, r1
 80021fe:	f887 332b 	strb.w	r3, [r7, #811]	; 0x32b
	/* ATEx */
	StatusType output_status = STATUS_UNKNOWN;
 8002202:	2310      	movs	r3, #16
 8002204:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
	uint8_t echo_mode_code;
	if (echo_mode) {
 8002208:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 800220c:	2b00      	cmp	r3, #0
 800220e:	d003      	beq.n	8002218 <setCommandEchoMode+0x28>
		echo_mode_code = 1;
 8002210:	2301      	movs	r3, #1
 8002212:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
 8002216:	e002      	b.n	800221e <setCommandEchoMode+0x2e>
	} else {
		echo_mode_code = 0;
 8002218:	2300      	movs	r3, #0
 800221a:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	}

	sprintf(self->command, "%s%u", COMMAND_ECHO_MODE, echo_mode_code);
 800221e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002222:	f203 70f5 	addw	r0, r3, #2037	; 0x7f5
 8002226:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 800222a:	4a38      	ldr	r2, [pc, #224]	; (800230c <setCommandEchoMode+0x11c>)
 800222c:	4938      	ldr	r1, [pc, #224]	; (8002310 <setCommandEchoMode+0x120>)
 800222e:	f008 fcc5 	bl	800abbc <siprintf>
	self->command_response = sendCommand(self, self->command,
 8002232:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002236:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 800223a:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 800223e:	4638      	mov	r0, r7
 8002240:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	2304      	movs	r3, #4
 8002248:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 800224c:	f7ff fcbe 	bl	8001bcc <sendCommand>
 8002250:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8002254:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8002258:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 800225c:	4611      	mov	r1, r2
 800225e:	f240 3221 	movw	r2, #801	; 0x321
 8002262:	4618      	mov	r0, r3
 8002264:	f008 fac8 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT);

	output_status = self->command_response.status;
 8002268:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800226c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002270:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
	self->echo_mode = echo_mode;
 8002274:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002278:	f897 232b 	ldrb.w	r2, [r7, #811]	; 0x32b
 800227c:	f883 2aef 	strb.w	r2, [r3, #2799]	; 0xaef
	if (self->echo_mode) {
 8002280:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002284:	f893 3aef 	ldrb.w	r3, [r3, #2799]	; 0xaef
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <setCommandEchoMode+0xae>
		sprintf(self->log_content, "Echo mode is ON");
 800228c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002290:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8002294:	491f      	ldr	r1, [pc, #124]	; (8002314 <setCommandEchoMode+0x124>)
 8002296:	4618      	mov	r0, r3
 8002298:	f008 fc90 	bl	800abbc <siprintf>
 800229c:	e007      	b.n	80022ae <setCommandEchoMode+0xbe>
	} else {
		sprintf(self->log_content, "Echo mode is OFF");
 800229e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80022a2:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80022a6:	491c      	ldr	r1, [pc, #112]	; (8002318 <setCommandEchoMode+0x128>)
 80022a8:	4618      	mov	r0, r3
 80022aa:	f008 fc87 	bl	800abbc <siprintf>
	}

	sprintf(self->log_content, "Set Command Echo Mode Status is %s.",
 80022ae:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80022b2:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 80022b6:	f897 3336 	ldrb.w	r3, [r7, #822]	; 0x336
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe feee 	bl	800109c <getStatusTypeString>
 80022c0:	4603      	mov	r3, r0
 80022c2:	461a      	mov	r2, r3
 80022c4:	4915      	ldr	r1, [pc, #84]	; (800231c <setCommandEchoMode+0x12c>)
 80022c6:	4620      	mov	r0, r4
 80022c8:	f008 fc78 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));

	if (output_status != STATUS_SUCCESS) {
 80022cc:	f897 3336 	ldrb.w	r3, [r7, #822]	; 0x336
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d00a      	beq.n	80022ea <setCommandEchoMode+0xfa>
		writeLog(self, LOG_WARNING, self->log_content, false);
 80022d4:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80022d8:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80022dc:	2300      	movs	r3, #0
 80022de:	2101      	movs	r1, #1
 80022e0:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80022e4:	f7ff f99c 	bl	8001620 <writeLog>
 80022e8:	e009      	b.n	80022fe <setCommandEchoMode+0x10e>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 80022ea:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80022ee:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80022f2:	2300      	movs	r3, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80022fa:	f7ff f991 	bl	8001620 <writeLog>
	}
	return output_status;
 80022fe:	f897 3336 	ldrb.w	r3, [r7, #822]	; 0x336
}
 8002302:	4618      	mov	r0, r3
 8002304:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8002308:	46bd      	mov	sp, r7
 800230a:	bd90      	pop	{r4, r7, pc}
 800230c:	0800c630 	.word	0x0800c630
 8002310:	0800c634 	.word	0x0800c634
 8002314:	0800c63c 	.word	0x0800c63c
 8002318:	0800c64c 	.word	0x0800c64c
 800231c:	0800c660 	.word	0x0800c660

08002320 <setLedMode>:


StatusType setLedMode(struct ViettelSDK *self, bool led_mode) {
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8002326:	af02      	add	r7, sp, #8
 8002328:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
 800232c:	460b      	mov	r3, r1
 800232e:	f887 332b 	strb.w	r3, [r7, #811]	; 0x32b
	/* AT+QCLEDMODE= */
	StatusType output_status = STATUS_UNKNOWN;
 8002332:	2310      	movs	r3, #16
 8002334:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
	uint8_t led_mode_code;
	if (led_mode) {
 8002338:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <setLedMode+0x28>
		led_mode_code = 1;
 8002340:	2301      	movs	r3, #1
 8002342:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
 8002346:	e002      	b.n	800234e <setLedMode+0x2e>
	} else {
		led_mode_code = 0;
 8002348:	2300      	movs	r3, #0
 800234a:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	}

	sprintf(self->command, "%s=%u", COMMAND_LED_MODE, led_mode_code);
 800234e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002352:	f203 70f5 	addw	r0, r3, #2037	; 0x7f5
 8002356:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 800235a:	4a38      	ldr	r2, [pc, #224]	; (800243c <setLedMode+0x11c>)
 800235c:	4938      	ldr	r1, [pc, #224]	; (8002440 <setLedMode+0x120>)
 800235e:	f008 fc2d 	bl	800abbc <siprintf>
	self->command_response = sendCommand(self, self->command,
 8002362:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002366:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 800236a:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 800236e:	4638      	mov	r0, r7
 8002370:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2304      	movs	r3, #4
 8002378:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 800237c:	f7ff fc26 	bl	8001bcc <sendCommand>
 8002380:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8002384:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8002388:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 800238c:	4611      	mov	r1, r2
 800238e:	f240 3221 	movw	r2, #801	; 0x321
 8002392:	4618      	mov	r0, r3
 8002394:	f008 fa30 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT);

	output_status = self->command_response.status;
 8002398:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800239c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80023a0:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
	self->led_mode = led_mode;
 80023a4:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80023a8:	f897 232b 	ldrb.w	r2, [r7, #811]	; 0x32b
 80023ac:	f883 2af0 	strb.w	r2, [r3, #2800]	; 0xaf0
	if (self->led_mode) {
 80023b0:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80023b4:	f893 3af0 	ldrb.w	r3, [r3, #2800]	; 0xaf0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <setLedMode+0xae>
		sprintf(self->log_content, "Led mode is ON");
 80023bc:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80023c0:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80023c4:	491f      	ldr	r1, [pc, #124]	; (8002444 <setLedMode+0x124>)
 80023c6:	4618      	mov	r0, r3
 80023c8:	f008 fbf8 	bl	800abbc <siprintf>
 80023cc:	e007      	b.n	80023de <setLedMode+0xbe>
	} else {
		sprintf(self->log_content, "Led mode is OFF");
 80023ce:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80023d2:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80023d6:	491c      	ldr	r1, [pc, #112]	; (8002448 <setLedMode+0x128>)
 80023d8:	4618      	mov	r0, r3
 80023da:	f008 fbef 	bl	800abbc <siprintf>
	}

	sprintf(self->log_content, "Set Command Led Mode Status is %s.",
 80023de:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80023e2:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 80023e6:	f897 3336 	ldrb.w	r3, [r7, #822]	; 0x336
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fe fe56 	bl	800109c <getStatusTypeString>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461a      	mov	r2, r3
 80023f4:	4915      	ldr	r1, [pc, #84]	; (800244c <setLedMode+0x12c>)
 80023f6:	4620      	mov	r0, r4
 80023f8:	f008 fbe0 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));

	if (output_status != STATUS_SUCCESS) {
 80023fc:	f897 3336 	ldrb.w	r3, [r7, #822]	; 0x336
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00a      	beq.n	800241a <setLedMode+0xfa>
		writeLog(self, LOG_WARNING, self->log_content, false);
 8002404:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002408:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 800240c:	2300      	movs	r3, #0
 800240e:	2101      	movs	r1, #1
 8002410:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002414:	f7ff f904 	bl	8001620 <writeLog>
 8002418:	e009      	b.n	800242e <setLedMode+0x10e>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 800241a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800241e:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002422:	2300      	movs	r3, #0
 8002424:	2100      	movs	r1, #0
 8002426:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800242a:	f7ff f8f9 	bl	8001620 <writeLog>
	}
	return output_status;
 800242e:	f897 3336 	ldrb.w	r3, [r7, #822]	; 0x336
}
 8002432:	4618      	mov	r0, r3
 8002434:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8002438:	46bd      	mov	sp, r7
 800243a:	bd90      	pop	{r4, r7, pc}
 800243c:	0800c684 	.word	0x0800c684
 8002440:	0800c694 	.word	0x0800c694
 8002444:	0800c69c 	.word	0x0800c69c
 8002448:	0800c6ac 	.word	0x0800c6ac
 800244c:	0800c6bc 	.word	0x0800c6bc

08002450 <requestIMEI>:


StatusType requestIMEI(struct ViettelSDK *self) {
 8002450:	b590      	push	{r4, r7, lr}
 8002452:	f5ad 7d53 	sub.w	sp, sp, #844	; 0x34c
 8002456:	af02      	add	r7, sp, #8
 8002458:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
    /* AT+CGSN */
    StatusType output_status = STATUS_UNKNOWN;
 800245c:	2310      	movs	r3, #16
 800245e:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
    sprintf(self->command, "%s=1", REQUEST_IMEI);
 8002462:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002466:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 800246a:	4a71      	ldr	r2, [pc, #452]	; (8002630 <requestIMEI+0x1e0>)
 800246c:	4971      	ldr	r1, [pc, #452]	; (8002634 <requestIMEI+0x1e4>)
 800246e:	4618      	mov	r0, r3
 8002470:	f008 fba4 	bl	800abbc <siprintf>

    self->command_response = sendCommand(self, self->command,
 8002474:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002478:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 800247c:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8002480:	4638      	mov	r0, r7
 8002482:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2304      	movs	r3, #4
 800248a:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 800248e:	f7ff fb9d 	bl	8001bcc <sendCommand>
 8002492:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8002496:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 800249a:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 800249e:	4611      	mov	r1, r2
 80024a0:	f240 3221 	movw	r2, #801	; 0x321
 80024a4:	4618      	mov	r0, r3
 80024a6:	f008 f9a7 	bl	800a7f8 <memcpy>
        RUN_COMMAND_COUNTER_DEFAULT,
        RUN_COMMAND_TIMEOUT_MS_DEFAULT);

    output_status = self->command_response.status;
 80024aa:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80024ae:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80024b2:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
    sprintf(self->log_content, "Requesting IMEI status is %s.",
 80024b6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80024ba:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 80024be:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7fe fdea 	bl	800109c <getStatusTypeString>
 80024c8:	4603      	mov	r3, r0
 80024ca:	461a      	mov	r2, r3
 80024cc:	495a      	ldr	r1, [pc, #360]	; (8002638 <requestIMEI+0x1e8>)
 80024ce:	4620      	mov	r0, r4
 80024d0:	f008 fb74 	bl	800abbc <siprintf>
            getStatusTypeString(output_status));

    if (output_status != STATUS_SUCCESS) {
 80024d4:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00a      	beq.n	80024f2 <requestIMEI+0xa2>
        writeLog(self, LOG_WARNING, self->log_content, false);
 80024dc:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80024e0:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80024e4:	2300      	movs	r3, #0
 80024e6:	2101      	movs	r1, #1
 80024e8:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80024ec:	f7ff f898 	bl	8001620 <writeLog>
 80024f0:	e097      	b.n	8002622 <requestIMEI+0x1d2>
    } else {
        writeLog(self, LOG_INFO, self->log_content, false);
 80024f2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80024f6:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80024fa:	2300      	movs	r3, #0
 80024fc:	2100      	movs	r1, #0
 80024fe:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002502:	f7ff f88d 	bl	8001620 <writeLog>

        // Find the start of the IMEI in the response
        self->token = strstr(self->command_response.response, ": ");
 8002506:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800250a:	3380      	adds	r3, #128	; 0x80
 800250c:	494b      	ldr	r1, [pc, #300]	; (800263c <requestIMEI+0x1ec>)
 800250e:	4618      	mov	r0, r3
 8002510:	f008 fb9c 	bl	800ac4c <strstr>
 8002514:	4602      	mov	r2, r0
 8002516:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800251a:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
        if (self->token != NULL) {
 800251e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002522:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 8002526:	2b00      	cmp	r3, #0
 8002528:	d066      	beq.n	80025f8 <requestIMEI+0x1a8>
            self->token += 2; // Move pointer to the start of the IMEI
 800252a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800252e:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 8002532:	1c9a      	adds	r2, r3, #2
 8002534:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002538:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50

            // Find the start and end of the IMEI, excluding quotes
            char *start = strchr(self->token, '\"');
 800253c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002540:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 8002544:	2122      	movs	r1, #34	; 0x22
 8002546:	4618      	mov	r0, r3
 8002548:	f008 fb58 	bl	800abfc <strchr>
 800254c:	f8c7 0338 	str.w	r0, [r7, #824]	; 0x338
            if (start != NULL) {
 8002550:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002554:	2b00      	cmp	r3, #0
 8002556:	d039      	beq.n	80025cc <requestIMEI+0x17c>
                start += 1; // Move past the opening quote
 8002558:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800255c:	3301      	adds	r3, #1
 800255e:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
                char *end = strchr(start, '\"');
 8002562:	2122      	movs	r1, #34	; 0x22
 8002564:	f8d7 0338 	ldr.w	r0, [r7, #824]	; 0x338
 8002568:	f008 fb48 	bl	800abfc <strchr>
 800256c:	f8c7 0334 	str.w	r0, [r7, #820]	; 0x334
                if (end != NULL) {
 8002570:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <requestIMEI+0x130>
                    *end = '\0'; // Null-terminate at the closing quote
 8002578:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
                }

                // Copy the IMEI
                strncpy(self->imei, start, IMEI_MAX_LENGTH - 1);
 8002580:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002584:	f603 23c9 	addw	r3, r3, #2761	; 0xac9
 8002588:	220f      	movs	r2, #15
 800258a:	f8d7 1338 	ldr.w	r1, [r7, #824]	; 0x338
 800258e:	4618      	mov	r0, r3
 8002590:	f008 fb49 	bl	800ac26 <strncpy>
                self->imei[IMEI_MAX_LENGTH - 1] = '\0'; // Ensure null termination
 8002594:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2ad8 	strb.w	r2, [r3, #2776]	; 0xad8

                sprintf(self->log_content, "IMEI: %s.", self->imei);
 800259e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80025a2:	f603 7049 	addw	r0, r3, #3913	; 0xf49
 80025a6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80025aa:	f603 23c9 	addw	r3, r3, #2761	; 0xac9
 80025ae:	461a      	mov	r2, r3
 80025b0:	4923      	ldr	r1, [pc, #140]	; (8002640 <requestIMEI+0x1f0>)
 80025b2:	f008 fb03 	bl	800abbc <siprintf>
                writeLog(self, LOG_INFO, self->log_content, false);
 80025b6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80025ba:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80025be:	2300      	movs	r3, #0
 80025c0:	2100      	movs	r1, #0
 80025c2:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80025c6:	f7ff f82b 	bl	8001620 <writeLog>
 80025ca:	e02a      	b.n	8002622 <requestIMEI+0x1d2>
            } else {
                // Handle error if quotes are not found
                sprintf(self->log_content, "Failed to parse IMEI from response.");
 80025cc:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80025d0:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80025d4:	491b      	ldr	r1, [pc, #108]	; (8002644 <requestIMEI+0x1f4>)
 80025d6:	4618      	mov	r0, r3
 80025d8:	f008 faf0 	bl	800abbc <siprintf>
                writeLog(self, LOG_ERROR, self->log_content, false);
 80025dc:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80025e0:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80025e4:	2300      	movs	r3, #0
 80025e6:	2102      	movs	r1, #2
 80025e8:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80025ec:	f7ff f818 	bl	8001620 <writeLog>
                output_status = STATUS_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
 80025f6:	e014      	b.n	8002622 <requestIMEI+0x1d2>
            }
        } else {
            // Handle error if IMEI not found in response
            sprintf(self->log_content, "Failed to parse IMEI from response.");
 80025f8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80025fc:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8002600:	4910      	ldr	r1, [pc, #64]	; (8002644 <requestIMEI+0x1f4>)
 8002602:	4618      	mov	r0, r3
 8002604:	f008 fada 	bl	800abbc <siprintf>
            writeLog(self, LOG_ERROR, self->log_content, false);
 8002608:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800260c:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002610:	2300      	movs	r3, #0
 8002612:	2102      	movs	r1, #2
 8002614:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002618:	f7ff f802 	bl	8001620 <writeLog>
            output_status = STATUS_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
        }
    }
    return output_status;
 8002622:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
}
 8002626:	4618      	mov	r0, r3
 8002628:	f507 7751 	add.w	r7, r7, #836	; 0x344
 800262c:	46bd      	mov	sp, r7
 800262e:	bd90      	pop	{r4, r7, pc}
 8002630:	0800c6e0 	.word	0x0800c6e0
 8002634:	0800c6e8 	.word	0x0800c6e8
 8002638:	0800c6f0 	.word	0x0800c6f0
 800263c:	0800c710 	.word	0x0800c710
 8002640:	0800c714 	.word	0x0800c714
 8002644:	0800c720 	.word	0x0800c720

08002648 <requestTARevisionIdentification>:



StatusType requestTARevisionIdentification(struct ViettelSDK *self) {
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 800264e:	af02      	add	r7, sp, #8
 8002650:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
	/* AT+CGMR */
	StatusType output_status = STATUS_UNKNOWN;
 8002654:	2310      	movs	r3, #16
 8002656:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->command, "%s", REQUEST_TA_REVISION_ID);
 800265a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800265e:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 8002662:	4a4e      	ldr	r2, [pc, #312]	; (800279c <requestTARevisionIdentification+0x154>)
 8002664:	494e      	ldr	r1, [pc, #312]	; (80027a0 <requestTARevisionIdentification+0x158>)
 8002666:	4618      	mov	r0, r3
 8002668:	f008 faa8 	bl	800abbc <siprintf>
	self->command_response = sendCommand(self, self->command,
 800266c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002670:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8002674:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8002678:	4638      	mov	r0, r7
 800267a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2307      	movs	r3, #7
 8002682:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8002686:	f7ff faa1 	bl	8001bcc <sendCommand>
 800268a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800268e:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8002692:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8002696:	4611      	mov	r1, r2
 8002698:	f240 3221 	movw	r2, #801	; 0x321
 800269c:	4618      	mov	r0, r3
 800269e:	f008 f8ab 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT + 3,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT + 2000);
	output_status = self->command_response.status;
 80026a2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80026a6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80026aa:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->log_content, "Requesting TA Revision ID is %s.",
 80026ae:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80026b2:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 80026b6:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fcee 	bl	800109c <getStatusTypeString>
 80026c0:	4603      	mov	r3, r0
 80026c2:	461a      	mov	r2, r3
 80026c4:	4937      	ldr	r1, [pc, #220]	; (80027a4 <requestTARevisionIdentification+0x15c>)
 80026c6:	4620      	mov	r0, r4
 80026c8:	f008 fa78 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));
	if (output_status != STATUS_SUCCESS) {
 80026cc:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <requestTARevisionIdentification+0xa2>
		writeLog(self, LOG_WARNING, self->log_content, false);
 80026d4:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80026d8:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80026dc:	2300      	movs	r3, #0
 80026de:	2101      	movs	r1, #1
 80026e0:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80026e4:	f7fe ff9c 	bl	8001620 <writeLog>
 80026e8:	e051      	b.n	800278e <requestTARevisionIdentification+0x146>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 80026ea:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80026ee:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80026f2:	2300      	movs	r3, #0
 80026f4:	2100      	movs	r1, #0
 80026f6:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80026fa:	f7fe ff91 	bl	8001620 <writeLog>
		self->token = strstr(self->command_response.response, "\n");
 80026fe:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002702:	3380      	adds	r3, #128	; 0x80
 8002704:	210a      	movs	r1, #10
 8002706:	4618      	mov	r0, r3
 8002708:	f008 fa78 	bl	800abfc <strchr>
 800270c:	4602      	mov	r2, r0
 800270e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002712:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
		self->token = self->token + 1;
 8002716:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800271a:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800271e:	1c5a      	adds	r2, r3, #1
 8002720:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002724:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
		self->token = strtok(self->token, self->delimiter);
 8002728:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800272c:	f8d3 2a50 	ldr.w	r2, [r3, #2640]	; 0xa50
 8002730:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002734:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8002738:	4619      	mov	r1, r3
 800273a:	4610      	mov	r0, r2
 800273c:	f008 fa9c 	bl	800ac78 <strtok>
 8002740:	4602      	mov	r2, r0
 8002742:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002746:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
		strcpy(self->ta_revision_id, self->token);
 800274a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800274e:	f603 22da 	addw	r2, r3, #2778	; 0xada
 8002752:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002756:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 800275a:	4619      	mov	r1, r3
 800275c:	4610      	mov	r0, r2
 800275e:	f008 fa5a 	bl	800ac16 <strcpy>
		sprintf(self->log_content, "Request TA Revision ID: %s.",
 8002762:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002766:	f603 7049 	addw	r0, r3, #3913	; 0xf49
				self->ta_revision_id);
 800276a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800276e:	f603 23da 	addw	r3, r3, #2778	; 0xada
		sprintf(self->log_content, "Request TA Revision ID: %s.",
 8002772:	461a      	mov	r2, r3
 8002774:	490c      	ldr	r1, [pc, #48]	; (80027a8 <requestTARevisionIdentification+0x160>)
 8002776:	f008 fa21 	bl	800abbc <siprintf>
		writeLog(self, LOG_INFO, self->log_content, false);
 800277a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800277e:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002782:	2300      	movs	r3, #0
 8002784:	2100      	movs	r1, #0
 8002786:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800278a:	f7fe ff49 	bl	8001620 <writeLog>

	}
	return output_status;
 800278e:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 8002792:	4618      	mov	r0, r3
 8002794:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8002798:	46bd      	mov	sp, r7
 800279a:	bd90      	pop	{r4, r7, pc}
 800279c:	0800c744 	.word	0x0800c744
 80027a0:	0800c74c 	.word	0x0800c74c
 80027a4:	0800c750 	.word	0x0800c750
 80027a8:	0800c774 	.word	0x0800c774

080027ac <readSignalQualityReport>:

StatusType readSignalQualityReport(struct ViettelSDK *self) {
 80027ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027b0:	f5ad 7d55 	sub.w	sp, sp, #852	; 0x354
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
	/* AT+CSQ */
	StatusType output_status = STATUS_UNKNOWN;
 80027ba:	2310      	movs	r3, #16
 80027bc:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
	sprintf(self->command, "%s", SIGNAL_QUALITY_REPORT);
 80027c0:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80027c4:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 80027c8:	4a92      	ldr	r2, [pc, #584]	; (8002a14 <readSignalQualityReport+0x268>)
 80027ca:	4993      	ldr	r1, [pc, #588]	; (8002a18 <readSignalQualityReport+0x26c>)
 80027cc:	4618      	mov	r0, r3
 80027ce:	f008 f9f5 	bl	800abbc <siprintf>
	self->command_response = sendCommand(self, self->command,
 80027d2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80027d6:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 80027da:	f8d7 632c 	ldr.w	r6, [r7, #812]	; 0x32c
 80027de:	4638      	mov	r0, r7
 80027e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2304      	movs	r3, #4
 80027e8:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 80027ec:	f7ff f9ee 	bl	8001bcc <sendCommand>
 80027f0:	f507 7352 	add.w	r3, r7, #840	; 0x348
 80027f4:	f5a3 7252 	sub.w	r2, r3, #840	; 0x348
 80027f8:	f106 037f 	add.w	r3, r6, #127	; 0x7f
 80027fc:	4611      	mov	r1, r2
 80027fe:	f240 3221 	movw	r2, #801	; 0x321
 8002802:	4618      	mov	r0, r3
 8002804:	f007 fff8 	bl	800a7f8 <memcpy>


	//sendCommand(self, "AT+CMNB=2", RUN_COMMAND_COUNTER_DEFAULT, RUN_COMMAND_TIMEOUT_MS_DEFAULT);


	output_status = self->command_response.status;
 8002808:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800280c:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002810:	f887 3347 	strb.w	r3, [r7, #839]	; 0x347
	sprintf(self->log_content, "Reading Signal Quality Report is %s.",
 8002814:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002818:	f603 7649 	addw	r6, r3, #3913	; 0xf49
 800281c:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8002820:	4618      	mov	r0, r3
 8002822:	f7fe fc3b 	bl	800109c <getStatusTypeString>
 8002826:	4603      	mov	r3, r0
 8002828:	461a      	mov	r2, r3
 800282a:	497c      	ldr	r1, [pc, #496]	; (8002a1c <readSignalQualityReport+0x270>)
 800282c:	4630      	mov	r0, r6
 800282e:	f008 f9c5 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));
	if (output_status != STATUS_SUCCESS) {
 8002832:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <readSignalQualityReport+0xa4>
		writeLog(self, LOG_WARNING, self->log_content, false);
 800283a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800283e:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002842:	2300      	movs	r3, #0
 8002844:	2101      	movs	r1, #1
 8002846:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800284a:	f7fe fee9 	bl	8001620 <writeLog>
 800284e:	e0d9      	b.n	8002a04 <readSignalQualityReport+0x258>
	} else {
 8002850:	466b      	mov	r3, sp
 8002852:	461e      	mov	r6, r3
		writeLog(self, LOG_INFO, self->log_content, false);
 8002854:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002858:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 800285c:	2300      	movs	r3, #0
 800285e:	2100      	movs	r1, #0
 8002860:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002864:	f7fe fedc 	bl	8001620 <writeLog>
		int number_of_elements = 2;
 8002868:	2302      	movs	r3, #2
 800286a:	f8c7 3340 	str.w	r3, [r7, #832]	; 0x340
		char *data_pointer;
		char *token_array[number_of_elements];
 800286e:	f8d7 1340 	ldr.w	r1, [r7, #832]	; 0x340
 8002872:	1e4b      	subs	r3, r1, #1
 8002874:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8002878:	460a      	mov	r2, r1
 800287a:	2300      	movs	r3, #0
 800287c:	4690      	mov	r8, r2
 800287e:	4699      	mov	r9, r3
 8002880:	f04f 0200 	mov.w	r2, #0
 8002884:	f04f 0300 	mov.w	r3, #0
 8002888:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800288c:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8002890:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8002894:	460a      	mov	r2, r1
 8002896:	2300      	movs	r3, #0
 8002898:	4614      	mov	r4, r2
 800289a:	461d      	mov	r5, r3
 800289c:	f04f 0200 	mov.w	r2, #0
 80028a0:	f04f 0300 	mov.w	r3, #0
 80028a4:	016b      	lsls	r3, r5, #5
 80028a6:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80028aa:	0162      	lsls	r2, r4, #5
 80028ac:	460b      	mov	r3, r1
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	3307      	adds	r3, #7
 80028b2:	08db      	lsrs	r3, r3, #3
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	ebad 0d03 	sub.w	sp, sp, r3
 80028ba:	ab02      	add	r3, sp, #8
 80028bc:	3303      	adds	r3, #3
 80028be:	089b      	lsrs	r3, r3, #2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
		uint8_t i = 0;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346

		data_pointer = strstr(self->command_response.response, ":");
 80028cc:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80028d0:	3380      	adds	r3, #128	; 0x80
 80028d2:	213a      	movs	r1, #58	; 0x3a
 80028d4:	4618      	mov	r0, r3
 80028d6:	f008 f991 	bl	800abfc <strchr>
 80028da:	f8c7 0334 	str.w	r0, [r7, #820]	; 0x334
		data_pointer = data_pointer + 2;
 80028de:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80028e2:	3302      	adds	r3, #2
 80028e4:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334

		uint8_t rssi_code;
		uint8_t ber;

		self->token = strtok(data_pointer, self->delimiter);
 80028e8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80028ec:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 80028f0:	4619      	mov	r1, r3
 80028f2:	f8d7 0334 	ldr.w	r0, [r7, #820]	; 0x334
 80028f6:	f008 f9bf 	bl	800ac78 <strtok>
 80028fa:	4602      	mov	r2, r0
 80028fc:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002900:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
		while (self->token != NULL && i < number_of_elements) {
 8002904:	e01b      	b.n	800293e <readSignalQualityReport+0x192>
			token_array[i] = self->token;
 8002906:	f897 2346 	ldrb.w	r2, [r7, #838]	; 0x346
 800290a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800290e:	f8d3 1a50 	ldr.w	r1, [r3, #2640]	; 0xa50
 8002912:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002916:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			self->token = strtok(NULL, self->delimiter);
 800291a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800291e:	f603 2354 	addw	r3, r3, #2644	; 0xa54
 8002922:	4619      	mov	r1, r3
 8002924:	2000      	movs	r0, #0
 8002926:	f008 f9a7 	bl	800ac78 <strtok>
 800292a:	4602      	mov	r2, r0
 800292c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002930:	f8c3 2a50 	str.w	r2, [r3, #2640]	; 0xa50
			i++;
 8002934:	f897 3346 	ldrb.w	r3, [r7, #838]	; 0x346
 8002938:	3301      	adds	r3, #1
 800293a:	f887 3346 	strb.w	r3, [r7, #838]	; 0x346
		while (self->token != NULL && i < number_of_elements) {
 800293e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002942:	f8d3 3a50 	ldr.w	r3, [r3, #2640]	; 0xa50
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <readSignalQualityReport+0x1aa>
 800294a:	f897 3346 	ldrb.w	r3, [r7, #838]	; 0x346
 800294e:	f8d7 2340 	ldr.w	r2, [r7, #832]	; 0x340
 8002952:	429a      	cmp	r2, r3
 8002954:	dcd7      	bgt.n	8002906 <readSignalQualityReport+0x15a>
		}

		rssi_code = atoi(token_array[0]);
 8002956:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4618      	mov	r0, r3
 800295e:	f007 ff15 	bl	800a78c <atoi>
 8002962:	4603      	mov	r3, r0
 8002964:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
		ber = atoi(token_array[1]);
 8002968:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4618      	mov	r0, r3
 8002970:	f007 ff0c 	bl	800a78c <atoi>
 8002974:	4603      	mov	r3, r0
 8002976:	f887 3332 	strb.w	r3, [r7, #818]	; 0x332

		sprintf(self->log_content, "RSSI code: %u", rssi_code);
 800297a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800297e:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8002982:	f897 2333 	ldrb.w	r2, [r7, #819]	; 0x333
 8002986:	4926      	ldr	r1, [pc, #152]	; (8002a20 <readSignalQualityReport+0x274>)
 8002988:	4618      	mov	r0, r3
 800298a:	f008 f917 	bl	800abbc <siprintf>
		writeLog(self, LOG_INFO, self->log_content, false);
 800298e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002992:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002996:	2300      	movs	r3, #0
 8002998:	2100      	movs	r1, #0
 800299a:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800299e:	f7fe fe3f 	bl	8001620 <writeLog>

		if (ber >= 0 && ber <= 7) {
 80029a2:	f897 3332 	ldrb.w	r3, [r7, #818]	; 0x332
 80029a6:	2b07      	cmp	r3, #7
 80029a8:	d80a      	bhi.n	80029c0 <readSignalQualityReport+0x214>
			sprintf(self->log_content, "Bit error rate (ber): %u%%", ber);
 80029aa:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80029ae:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80029b2:	f897 2332 	ldrb.w	r2, [r7, #818]	; 0x332
 80029b6:	491b      	ldr	r1, [pc, #108]	; (8002a24 <readSignalQualityReport+0x278>)
 80029b8:	4618      	mov	r0, r3
 80029ba:	f008 f8ff 	bl	800abbc <siprintf>
 80029be:	e016      	b.n	80029ee <readSignalQualityReport+0x242>
		} else if (ber == 99) {
 80029c0:	f897 3332 	ldrb.w	r3, [r7, #818]	; 0x332
 80029c4:	2b63      	cmp	r3, #99	; 0x63
 80029c6:	d108      	bne.n	80029da <readSignalQualityReport+0x22e>
			sprintf(self->log_content,
 80029c8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80029cc:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80029d0:	4915      	ldr	r1, [pc, #84]	; (8002a28 <readSignalQualityReport+0x27c>)
 80029d2:	4618      	mov	r0, r3
 80029d4:	f008 f8f2 	bl	800abbc <siprintf>
 80029d8:	e009      	b.n	80029ee <readSignalQualityReport+0x242>
					"Bit error rate (ber) is Not known or not detectable.");
		} else {
			sprintf(self->log_content, "Invalid Bit error rate (ber): %u",
 80029da:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80029de:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80029e2:	f897 2333 	ldrb.w	r2, [r7, #819]	; 0x333
 80029e6:	4911      	ldr	r1, [pc, #68]	; (8002a2c <readSignalQualityReport+0x280>)
 80029e8:	4618      	mov	r0, r3
 80029ea:	f008 f8e7 	bl	800abbc <siprintf>
					rssi_code);
		}
		writeLog(self, LOG_INFO, self->log_content, false);
 80029ee:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80029f2:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80029f6:	2300      	movs	r3, #0
 80029f8:	2100      	movs	r1, #0
 80029fa:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80029fe:	f7fe fe0f 	bl	8001620 <writeLog>
 8002a02:	46b5      	mov	sp, r6

	}
	return output_status;
 8002a04:	f897 3347 	ldrb.w	r3, [r7, #839]	; 0x347
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f507 7753 	add.w	r7, r7, #844	; 0x34c
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002a14:	0800c790 	.word	0x0800c790
 8002a18:	0800c74c 	.word	0x0800c74c
 8002a1c:	0800c798 	.word	0x0800c798
 8002a20:	0800c7c0 	.word	0x0800c7c0
 8002a24:	0800c7d0 	.word	0x0800c7d0
 8002a28:	0800c7ec 	.word	0x0800c7ec
 8002a2c:	0800c824 	.word	0x0800c824

08002a30 <readEPSNetworkRegistrationStatus>:
		writeLog(self, LOG_INFO, self->log_content, false);
	}
	return output_status;
}

StatusType readEPSNetworkRegistrationStatus(struct ViettelSDK *self, bool save_data) {
 8002a30:	b590      	push	{r4, r7, lr}
 8002a32:	f5ad 7d53 	sub.w	sp, sp, #844	; 0x34c
 8002a36:	af02      	add	r7, sp, #8
 8002a38:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	f887 332b 	strb.w	r3, [r7, #811]	; 0x32b
	StatusType output_status = STATUS_UNKNOWN;
 8002a42:	2310      	movs	r3, #16
 8002a44:	f887 333e 	strb.w	r3, [r7, #830]	; 0x33e
	sprintf(self->command, "%s?", EPS_NETWORK_REGISTRATION_STATUS);
 8002a48:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002a4c:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 8002a50:	4a61      	ldr	r2, [pc, #388]	; (8002bd8 <readEPSNetworkRegistrationStatus+0x1a8>)
 8002a52:	4962      	ldr	r1, [pc, #392]	; (8002bdc <readEPSNetworkRegistrationStatus+0x1ac>)
 8002a54:	4618      	mov	r0, r3
 8002a56:	f008 f8b1 	bl	800abbc <siprintf>

	self->command_response = sendCommand(self, self->command,
 8002a5a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002a5e:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8002a62:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8002a66:	4638      	mov	r0, r7
 8002a68:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	2305      	movs	r3, #5
 8002a70:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8002a74:	f7ff f8aa 	bl	8001bcc <sendCommand>
 8002a78:	f507 7350 	add.w	r3, r7, #832	; 0x340
 8002a7c:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8002a80:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8002a84:	4611      	mov	r1, r2
 8002a86:	f240 3221 	movw	r2, #801	; 0x321
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f007 feb4 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT + 1,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT + 2000);

	output_status = self->command_response.status;
 8002a90:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002a94:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002a98:	f887 333e 	strb.w	r3, [r7, #830]	; 0x33e
	sprintf(self->log_content, "Reading EPS Network Registration Status is %s.",
 8002a9c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002aa0:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 8002aa4:	f897 333e 	ldrb.w	r3, [r7, #830]	; 0x33e
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fe faf7 	bl	800109c <getStatusTypeString>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	494b      	ldr	r1, [pc, #300]	; (8002be0 <readEPSNetworkRegistrationStatus+0x1b0>)
 8002ab4:	4620      	mov	r0, r4
 8002ab6:	f008 f881 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));
	if (output_status != STATUS_SUCCESS) {
 8002aba:	f897 333e 	ldrb.w	r3, [r7, #830]	; 0x33e
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00a      	beq.n	8002ad8 <readEPSNetworkRegistrationStatus+0xa8>
		writeLog(self, LOG_WARNING, self->log_content, false);
 8002ac2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002ac6:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002aca:	2300      	movs	r3, #0
 8002acc:	2101      	movs	r1, #1
 8002ace:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002ad2:	f7fe fda5 	bl	8001620 <writeLog>
 8002ad6:	e078      	b.n	8002bca <readEPSNetworkRegistrationStatus+0x19a>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8002ad8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002adc:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002ae8:	f7fe fd9a 	bl	8001620 <writeLog>
		//int number_of_elements = 2;
		char *data_pointer = { 0 };
 8002aec:	2300      	movs	r3, #0
 8002aee:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
		//char *token_array[number_of_elements];


		for (uint8_t i = 0; i < RESPONSE_MAIN_BUFFER_SIZE; i++) {
 8002af2:	2300      	movs	r3, #0
 8002af4:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
			if (self->command_response.response[i] == ':') {
 8002af8:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 8002afc:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8002b00:	4413      	add	r3, r2
 8002b02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002b06:	2b3a      	cmp	r3, #58	; 0x3a
 8002b08:	d10f      	bne.n	8002b2a <readEPSNetworkRegistrationStatus+0xfa>
				data_pointer = &self->command_response.response[i] + 2;
 8002b0a:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 8002b0e:	3378      	adds	r3, #120	; 0x78
 8002b10:	f8d7 232c 	ldr.w	r2, [r7, #812]	; 0x32c
 8002b14:	4413      	add	r3, r2
 8002b16:	3308      	adds	r3, #8
 8002b18:	3302      	adds	r3, #2
 8002b1a:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
				break;
 8002b1e:	bf00      	nop
		}



//		data_pointer = strchr(self->command_response.response, ':');
		if (!data_pointer) {
 8002b20:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10c      	bne.n	8002b42 <readEPSNetworkRegistrationStatus+0x112>
 8002b28:	e005      	b.n	8002b36 <readEPSNetworkRegistrationStatus+0x106>
		for (uint8_t i = 0; i < RESPONSE_MAIN_BUFFER_SIZE; i++) {
 8002b2a:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 8002b2e:	3301      	adds	r3, #1
 8002b30:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
			if (self->command_response.response[i] == ':') {
 8002b34:	e7e0      	b.n	8002af8 <readEPSNetworkRegistrationStatus+0xc8>
			output_status = STATUS_INTERNAL_FAILURE;
 8002b36:	230b      	movs	r3, #11
 8002b38:	f887 333e 	strb.w	r3, [r7, #830]	; 0x33e
			return output_status;
 8002b3c:	f897 333e 	ldrb.w	r3, [r7, #830]	; 0x33e
 8002b40:	e045      	b.n	8002bce <readEPSNetworkRegistrationStatus+0x19e>
		}
//		data_pointer = data_pointer + 2;

		uint8_t n = atoi(data_pointer);
 8002b42:	f8d7 0338 	ldr.w	r0, [r7, #824]	; 0x338
 8002b46:	f007 fe21 	bl	800a78c <atoi>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
		uint8_t stat = atoi(data_pointer+2);
 8002b50:	f8d7 3338 	ldr.w	r3, [r7, #824]	; 0x338
 8002b54:	3302      	adds	r3, #2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f007 fe18 	bl	800a78c <atoi>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	f887 3336 	strb.w	r3, [r7, #822]	; 0x336
		//n = atoi(data_pointer);

		self->n = n;
 8002b62:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002b66:	f897 2337 	ldrb.w	r2, [r7, #823]	; 0x337
 8002b6a:	f883 2aed 	strb.w	r2, [r3, #2797]	; 0xaed
		self->stat = stat;
 8002b6e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002b72:	f897 2336 	ldrb.w	r2, [r7, #822]	; 0x336
 8002b76:	f883 2aee 	strb.w	r2, [r3, #2798]	; 0xaee
//
//		default:
//			break;
//		}

		sprintf(self->log_content, "<n> = %u", n);
 8002b7a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002b7e:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8002b82:	f897 2337 	ldrb.w	r2, [r7, #823]	; 0x337
 8002b86:	4917      	ldr	r1, [pc, #92]	; (8002be4 <readEPSNetworkRegistrationStatus+0x1b4>)
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f008 f817 	bl	800abbc <siprintf>
		writeLog(self, LOG_INFO, self->log_content, false);
 8002b8e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002b92:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002b96:	2300      	movs	r3, #0
 8002b98:	2100      	movs	r1, #0
 8002b9a:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002b9e:	f7fe fd3f 	bl	8001620 <writeLog>
//			break;
//		default:
//			;
//		}

		sprintf(self->log_content, "<stat> = %u", stat);
 8002ba2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002ba6:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8002baa:	f897 2336 	ldrb.w	r2, [r7, #822]	; 0x336
 8002bae:	490e      	ldr	r1, [pc, #56]	; (8002be8 <readEPSNetworkRegistrationStatus+0x1b8>)
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f008 f803 	bl	800abbc <siprintf>
		writeLog(self, LOG_INFO, self->log_content, false);
 8002bb6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002bba:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002bc6:	f7fe fd2b 	bl	8001620 <writeLog>

	}
	return output_status;
 8002bca:	f897 333e 	ldrb.w	r3, [r7, #830]	; 0x33e
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f507 7751 	add.w	r7, r7, #836	; 0x344
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd90      	pop	{r4, r7, pc}
 8002bd8:	0800c848 	.word	0x0800c848
 8002bdc:	0800c854 	.word	0x0800c854
 8002be0:	0800c888 	.word	0x0800c888
 8002be4:	0800c8b8 	.word	0x0800c8b8
 8002be8:	0800c8c4 	.word	0x0800c8c4

08002bec <setReportMobileEquipmentError>:
		writeLog(self, LOG_INFO, self->log_content, false);
	}
	return output_status;
}

StatusType setReportMobileEquipmentError(struct ViettelSDK *self, uint8_t mode) {
 8002bec:	b590      	push	{r4, r7, lr}
 8002bee:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8002bf2:	af02      	add	r7, sp, #8
 8002bf4:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	f887 332b 	strb.w	r3, [r7, #811]	; 0x32b
	/* AT+CMEE= */
	StatusType output_status = STATUS_UNKNOWN;
 8002bfe:	2310      	movs	r3, #16
 8002c00:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	if ((mode == 0) || (mode == 1) || (mode == 2)) {
 8002c04:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <setReportMobileEquipmentError+0x30>
 8002c0c:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	d003      	beq.n	8002c1c <setReportMobileEquipmentError+0x30>
 8002c14:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d13f      	bne.n	8002c9c <setReportMobileEquipmentError+0xb0>
		sprintf(self->command, "%s=%u", REPORT_MOBILE_EQUIPMENT_ERROR, mode);
 8002c1c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002c20:	f203 70f5 	addw	r0, r3, #2037	; 0x7f5
 8002c24:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 8002c28:	4a3f      	ldr	r2, [pc, #252]	; (8002d28 <setReportMobileEquipmentError+0x13c>)
 8002c2a:	4940      	ldr	r1, [pc, #256]	; (8002d2c <setReportMobileEquipmentError+0x140>)
 8002c2c:	f007 ffc6 	bl	800abbc <siprintf>
		self->command_response = sendCommand(self, self->command,
 8002c30:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002c34:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8002c38:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8002c3c:	4638      	mov	r0, r7
 8002c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	2304      	movs	r3, #4
 8002c46:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8002c4a:	f7fe ffbf 	bl	8001bcc <sendCommand>
 8002c4e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8002c52:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8002c56:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8002c5a:	4611      	mov	r1, r2
 8002c5c:	f240 3221 	movw	r2, #801	; 0x321
 8002c60:	4618      	mov	r0, r3
 8002c62:	f007 fdc9 	bl	800a7f8 <memcpy>
		RUN_COMMAND_COUNTER_DEFAULT,
		RUN_COMMAND_TIMEOUT_MS_DEFAULT);
		output_status = self->command_response.status;
 8002c66:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002c6a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002c6e:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
		sprintf(self->log_content, "<n> = %u", mode);
 8002c72:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002c76:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8002c7a:	f897 232b 	ldrb.w	r2, [r7, #811]	; 0x32b
 8002c7e:	492c      	ldr	r1, [pc, #176]	; (8002d30 <setReportMobileEquipmentError+0x144>)
 8002c80:	4618      	mov	r0, r3
 8002c82:	f007 ff9b 	bl	800abbc <siprintf>
		writeLog(self, LOG_INFO, self->log_content, false);
 8002c86:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002c8a:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002c8e:	2300      	movs	r3, #0
 8002c90:	2100      	movs	r1, #0
 8002c92:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002c96:	f7fe fcc3 	bl	8001620 <writeLog>
 8002c9a:	e016      	b.n	8002cca <setReportMobileEquipmentError+0xde>
	} else {
		sprintf(self->log_content, "<n> = %u is invalid.", mode);
 8002c9c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002ca0:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8002ca4:	f897 232b 	ldrb.w	r2, [r7, #811]	; 0x32b
 8002ca8:	4922      	ldr	r1, [pc, #136]	; (8002d34 <setReportMobileEquipmentError+0x148>)
 8002caa:	4618      	mov	r0, r3
 8002cac:	f007 ff86 	bl	800abbc <siprintf>
		writeLog(self, LOG_ERROR, self->log_content, false);
 8002cb0:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002cb4:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002cb8:	2300      	movs	r3, #0
 8002cba:	2102      	movs	r1, #2
 8002cbc:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002cc0:	f7fe fcae 	bl	8001620 <writeLog>
		output_status = STATUS_BAD_PARAMETER;
 8002cc4:	2306      	movs	r3, #6
 8002cc6:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	}

	sprintf(self->log_content, "Report Mobile Equipment Error is %s.",
 8002cca:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002cce:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 8002cd2:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe f9e0 	bl	800109c <getStatusTypeString>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4915      	ldr	r1, [pc, #84]	; (8002d38 <setReportMobileEquipmentError+0x14c>)
 8002ce2:	4620      	mov	r0, r4
 8002ce4:	f007 ff6a 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));
	if (output_status != STATUS_SUCCESS) {
 8002ce8:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <setReportMobileEquipmentError+0x11a>
		writeLog(self, LOG_WARNING, self->log_content, false);
 8002cf0:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002cf4:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002d00:	f7fe fc8e 	bl	8001620 <writeLog>
 8002d04:	e009      	b.n	8002d1a <setReportMobileEquipmentError+0x12e>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8002d06:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002d0a:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2100      	movs	r1, #0
 8002d12:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002d16:	f7fe fc83 	bl	8001620 <writeLog>
	}
	return output_status;
 8002d1a:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd90      	pop	{r4, r7, pc}
 8002d28:	0800c934 	.word	0x0800c934
 8002d2c:	0800c694 	.word	0x0800c694
 8002d30:	0800c8b8 	.word	0x0800c8b8
 8002d34:	0800c93c 	.word	0x0800c93c
 8002d38:	0800c954 	.word	0x0800c954

08002d3c <displayProductID>:

StatusType displayProductID(struct ViettelSDK *self) {
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8002d42:	af02      	add	r7, sp, #8
 8002d44:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
	/* ATI */
	StatusType output_status = STATUS_UNKNOWN;
 8002d48:	2310      	movs	r3, #16
 8002d4a:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->command, "%s", DISPLAY_PRODUCT_ID);
 8002d4e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002d52:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 8002d56:	4a2a      	ldr	r2, [pc, #168]	; (8002e00 <displayProductID+0xc4>)
 8002d58:	492a      	ldr	r1, [pc, #168]	; (8002e04 <displayProductID+0xc8>)
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f007 ff2e 	bl	800abbc <siprintf>
	self->command_response = sendCommand(self, self->command,
 8002d60:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002d64:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8002d68:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8002d6c:	4638      	mov	r0, r7
 8002d6e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	2304      	movs	r3, #4
 8002d76:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8002d7a:	f7fe ff27 	bl	8001bcc <sendCommand>
 8002d7e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8002d82:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8002d86:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8002d8a:	4611      	mov	r1, r2
 8002d8c:	f240 3221 	movw	r2, #801	; 0x321
 8002d90:	4618      	mov	r0, r3
 8002d92:	f007 fd31 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT + 4000);
	output_status = self->command_response.status;
 8002d96:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002d9a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002d9e:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->log_content, "Display Product ID is %s.",
 8002da2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002da6:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 8002daa:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe f974 	bl	800109c <getStatusTypeString>
 8002db4:	4603      	mov	r3, r0
 8002db6:	461a      	mov	r2, r3
 8002db8:	4913      	ldr	r1, [pc, #76]	; (8002e08 <displayProductID+0xcc>)
 8002dba:	4620      	mov	r0, r4
 8002dbc:	f007 fefe 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));
	if (output_status != STATUS_SUCCESS) {
 8002dc0:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00a      	beq.n	8002dde <displayProductID+0xa2>
		writeLog(self, LOG_WARNING, self->log_content, false);
 8002dc8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002dcc:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	2101      	movs	r1, #1
 8002dd4:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002dd8:	f7fe fc22 	bl	8001620 <writeLog>
 8002ddc:	e009      	b.n	8002df2 <displayProductID+0xb6>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8002dde:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002de2:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002de6:	2300      	movs	r3, #0
 8002de8:	2100      	movs	r1, #0
 8002dea:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002dee:	f7fe fc17 	bl	8001620 <writeLog>
	}
	return output_status;
 8002df2:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd90      	pop	{r4, r7, pc}
 8002e00:	0800c97c 	.word	0x0800c97c
 8002e04:	0800c74c 	.word	0x0800c74c
 8002e08:	0800c980 	.word	0x0800c980

08002e0c <requestManufacturerID>:

StatusType requestManufacturerID(struct ViettelSDK *self) {
 8002e0c:	b590      	push	{r4, r7, lr}
 8002e0e:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8002e12:	af02      	add	r7, sp, #8
 8002e14:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
	/* AT+CGMI */
	StatusType output_status = STATUS_UNKNOWN;
 8002e18:	2310      	movs	r3, #16
 8002e1a:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->command, "%s", REQUEST_MANUFACTURER_ID);
 8002e1e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002e22:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 8002e26:	4a2a      	ldr	r2, [pc, #168]	; (8002ed0 <requestManufacturerID+0xc4>)
 8002e28:	492a      	ldr	r1, [pc, #168]	; (8002ed4 <requestManufacturerID+0xc8>)
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f007 fec6 	bl	800abbc <siprintf>
	self->command_response = sendCommand(self, self->command,
 8002e30:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002e34:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8002e38:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8002e3c:	4638      	mov	r0, r7
 8002e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	2304      	movs	r3, #4
 8002e46:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8002e4a:	f7fe febf 	bl	8001bcc <sendCommand>
 8002e4e:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8002e52:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8002e56:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8002e5a:	4611      	mov	r1, r2
 8002e5c:	f240 3221 	movw	r2, #801	; 0x321
 8002e60:	4618      	mov	r0, r3
 8002e62:	f007 fcc9 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT);
	output_status = self->command_response.status;
 8002e66:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002e6a:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002e6e:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->log_content, "Request Manufacturer ID is %s.",
 8002e72:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002e76:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 8002e7a:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7fe f90c 	bl	800109c <getStatusTypeString>
 8002e84:	4603      	mov	r3, r0
 8002e86:	461a      	mov	r2, r3
 8002e88:	4913      	ldr	r1, [pc, #76]	; (8002ed8 <requestManufacturerID+0xcc>)
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f007 fe96 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));
	if (output_status != STATUS_SUCCESS) {
 8002e90:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d00a      	beq.n	8002eae <requestManufacturerID+0xa2>
		writeLog(self, LOG_WARNING, self->log_content, false);
 8002e98:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002e9c:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002ea8:	f7fe fbba 	bl	8001620 <writeLog>
 8002eac:	e009      	b.n	8002ec2 <requestManufacturerID+0xb6>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8002eae:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002eb2:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	2100      	movs	r1, #0
 8002eba:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002ebe:	f7fe fbaf 	bl	8001620 <writeLog>
	}
	return output_status;
 8002ec2:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd90      	pop	{r4, r7, pc}
 8002ed0:	0800c99c 	.word	0x0800c99c
 8002ed4:	0800c74c 	.word	0x0800c74c
 8002ed8:	0800c9a4 	.word	0x0800c9a4

08002edc <getAndSetMobileOperationBand>:

StatusType getAndSetMobileOperationBand(struct ViettelSDK *self,
		enum AT_QCBAND mode) {
 8002edc:	b590      	push	{r4, r7, lr}
 8002ede:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8002ee2:	af02      	add	r7, sp, #8
 8002ee4:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
 8002ee8:	460b      	mov	r3, r1
 8002eea:	f887 332b 	strb.w	r3, [r7, #811]	; 0x32b
	/* AT+CBAND= */
	StatusType output_status = STATUS_UNKNOWN;
 8002eee:	2310      	movs	r3, #16
 8002ef0:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337

	switch (mode) {
 8002ef4:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d01a      	beq.n	8002f32 <getAndSetMobileOperationBand+0x56>
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	dc22      	bgt.n	8002f46 <getAndSetMobileOperationBand+0x6a>
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <getAndSetMobileOperationBand+0x2e>
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d00a      	beq.n	8002f1e <getAndSetMobileOperationBand+0x42>
 8002f08:	e01d      	b.n	8002f46 <getAndSetMobileOperationBand+0x6a>
	case EGSM_MODE:
		sprintf(self->command, "%s=0,EGSM_MODE",
 8002f0a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002f0e:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 8002f12:	4a3a      	ldr	r2, [pc, #232]	; (8002ffc <getAndSetMobileOperationBand+0x120>)
 8002f14:	493a      	ldr	r1, [pc, #232]	; (8003000 <getAndSetMobileOperationBand+0x124>)
 8002f16:	4618      	mov	r0, r3
 8002f18:	f007 fe50 	bl	800abbc <siprintf>
		GET_AND_SET_MOBILE_OPERATION_BAND);
		break;
 8002f1c:	e01d      	b.n	8002f5a <getAndSetMobileOperationBand+0x7e>
	case DCS_MODE:
		sprintf(self->command, "%s=0,DCS_MODE",
 8002f1e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002f22:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 8002f26:	4a35      	ldr	r2, [pc, #212]	; (8002ffc <getAndSetMobileOperationBand+0x120>)
 8002f28:	4936      	ldr	r1, [pc, #216]	; (8003004 <getAndSetMobileOperationBand+0x128>)
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f007 fe46 	bl	800abbc <siprintf>
		GET_AND_SET_MOBILE_OPERATION_BAND);
		break;
 8002f30:	e013      	b.n	8002f5a <getAndSetMobileOperationBand+0x7e>
	case ALL_MODE:
		sprintf(self->command, "%s=0,ALL_MODE",
 8002f32:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002f36:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 8002f3a:	4a30      	ldr	r2, [pc, #192]	; (8002ffc <getAndSetMobileOperationBand+0x120>)
 8002f3c:	4932      	ldr	r1, [pc, #200]	; (8003008 <getAndSetMobileOperationBand+0x12c>)
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f007 fe3c 	bl	800abbc <siprintf>
		GET_AND_SET_MOBILE_OPERATION_BAND);
		break;
 8002f44:	e009      	b.n	8002f5a <getAndSetMobileOperationBand+0x7e>
	default:
		sprintf(self->command, "%s=0,3",
 8002f46:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002f4a:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 8002f4e:	4a2b      	ldr	r2, [pc, #172]	; (8002ffc <getAndSetMobileOperationBand+0x120>)
 8002f50:	492e      	ldr	r1, [pc, #184]	; (800300c <getAndSetMobileOperationBand+0x130>)
 8002f52:	4618      	mov	r0, r3
 8002f54:	f007 fe32 	bl	800abbc <siprintf>
		GET_AND_SET_MOBILE_OPERATION_BAND);
		break;
 8002f58:	bf00      	nop
	}

	self->command_response = sendCommand(self, self->command,
 8002f5a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002f5e:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8002f62:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8002f66:	4638      	mov	r0, r7
 8002f68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	2304      	movs	r3, #4
 8002f70:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8002f74:	f7fe fe2a 	bl	8001bcc <sendCommand>
 8002f78:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8002f7c:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8002f80:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8002f84:	4611      	mov	r1, r2
 8002f86:	f240 3221 	movw	r2, #801	; 0x321
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f007 fc34 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT);
	output_status = self->command_response.status;
 8002f90:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002f94:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8002f98:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->log_content, "Get And Set Mobile Operation Band is %s.",
 8002f9c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002fa0:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 8002fa4:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe f877 	bl	800109c <getStatusTypeString>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4917      	ldr	r1, [pc, #92]	; (8003010 <getAndSetMobileOperationBand+0x134>)
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f007 fe01 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));
	if (output_status != STATUS_SUCCESS) {
 8002fba:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <getAndSetMobileOperationBand+0xfc>
		writeLog(self, LOG_WARNING, self->log_content, false);
 8002fc2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002fc6:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002fca:	2300      	movs	r3, #0
 8002fcc:	2101      	movs	r1, #1
 8002fce:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002fd2:	f7fe fb25 	bl	8001620 <writeLog>
 8002fd6:	e009      	b.n	8002fec <getAndSetMobileOperationBand+0x110>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8002fd8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8002fdc:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8002fe8:	f7fe fb1a 	bl	8001620 <writeLog>
	}
	return output_status;
 8002fec:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd90      	pop	{r4, r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	0800c9c4 	.word	0x0800c9c4
 8003000:	0800c9d0 	.word	0x0800c9d0
 8003004:	0800c9e0 	.word	0x0800c9e0
 8003008:	0800c9f0 	.word	0x0800c9f0
 800300c:	0800ca00 	.word	0x0800ca00
 8003010:	0800ca08 	.word	0x0800ca08

08003014 <requestModelID>:

StatusType requestModelID(struct ViettelSDK *self) {
 8003014:	b590      	push	{r4, r7, lr}
 8003016:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 800301a:	af02      	add	r7, sp, #8
 800301c:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
	/* AT+CGMM */
	StatusType output_status = STATUS_UNKNOWN;
 8003020:	2310      	movs	r3, #16
 8003022:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->command, "%s", REQUEST_MODEL_ID);
 8003026:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800302a:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 800302e:	4a2a      	ldr	r2, [pc, #168]	; (80030d8 <requestModelID+0xc4>)
 8003030:	492a      	ldr	r1, [pc, #168]	; (80030dc <requestModelID+0xc8>)
 8003032:	4618      	mov	r0, r3
 8003034:	f007 fdc2 	bl	800abbc <siprintf>
	self->command_response = sendCommand(self, self->command,
 8003038:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800303c:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8003040:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8003044:	4638      	mov	r0, r7
 8003046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	2304      	movs	r3, #4
 800304e:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8003052:	f7fe fdbb 	bl	8001bcc <sendCommand>
 8003056:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800305a:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 800305e:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8003062:	4611      	mov	r1, r2
 8003064:	f240 3221 	movw	r2, #801	; 0x321
 8003068:	4618      	mov	r0, r3
 800306a:	f007 fbc5 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT);
	output_status = self->command_response.status;
 800306e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003072:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003076:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->log_content, "Request Model ID is %s.",
 800307a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800307e:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 8003082:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe f808 	bl	800109c <getStatusTypeString>
 800308c:	4603      	mov	r3, r0
 800308e:	461a      	mov	r2, r3
 8003090:	4913      	ldr	r1, [pc, #76]	; (80030e0 <requestModelID+0xcc>)
 8003092:	4620      	mov	r0, r4
 8003094:	f007 fd92 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));
	if (output_status != STATUS_SUCCESS) {
 8003098:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <requestModelID+0xa2>
		writeLog(self, LOG_WARNING, self->log_content, false);
 80030a0:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80030a4:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80030a8:	2300      	movs	r3, #0
 80030aa:	2101      	movs	r1, #1
 80030ac:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80030b0:	f7fe fab6 	bl	8001620 <writeLog>
 80030b4:	e009      	b.n	80030ca <requestModelID+0xb6>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 80030b6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80030ba:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80030be:	2300      	movs	r3, #0
 80030c0:	2100      	movs	r1, #0
 80030c2:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80030c6:	f7fe faab 	bl	8001620 <writeLog>
	}
	return output_status;
 80030ca:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd90      	pop	{r4, r7, pc}
 80030d8:	0800ca34 	.word	0x0800ca34
 80030dc:	0800c74c 	.word	0x0800c74c
 80030e0:	0800ca3c 	.word	0x0800ca3c

080030e4 <requestInternationalMobileSubscriberIdentity>:

StatusType requestInternationalMobileSubscriberIdentity(struct ViettelSDK *self) {
 80030e4:	b590      	push	{r4, r7, lr}
 80030e6:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 80030ea:	af02      	add	r7, sp, #8
 80030ec:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
	/* AT+CIMI */
	StatusType output_status = STATUS_UNKNOWN;
 80030f0:	2310      	movs	r3, #16
 80030f2:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->command, "%s",
 80030f6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80030fa:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 80030fe:	4a2a      	ldr	r2, [pc, #168]	; (80031a8 <requestInternationalMobileSubscriberIdentity+0xc4>)
 8003100:	492a      	ldr	r1, [pc, #168]	; (80031ac <requestInternationalMobileSubscriberIdentity+0xc8>)
 8003102:	4618      	mov	r0, r3
 8003104:	f007 fd5a 	bl	800abbc <siprintf>
	REQUEST_INTERNATIONAL_MOBILE_SUBSCRIBER_IDENTITY);
	self->command_response = sendCommand(self, self->command,
 8003108:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800310c:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8003110:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8003114:	4638      	mov	r0, r7
 8003116:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	2304      	movs	r3, #4
 800311e:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8003122:	f7fe fd53 	bl	8001bcc <sendCommand>
 8003126:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800312a:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 800312e:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8003132:	4611      	mov	r1, r2
 8003134:	f240 3221 	movw	r2, #801	; 0x321
 8003138:	4618      	mov	r0, r3
 800313a:	f007 fb5d 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT);
	output_status = self->command_response.status;
 800313e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003142:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003146:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->log_content,
 800314a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800314e:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 8003152:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003156:	4618      	mov	r0, r3
 8003158:	f7fd ffa0 	bl	800109c <getStatusTypeString>
 800315c:	4603      	mov	r3, r0
 800315e:	461a      	mov	r2, r3
 8003160:	4913      	ldr	r1, [pc, #76]	; (80031b0 <requestInternationalMobileSubscriberIdentity+0xcc>)
 8003162:	4620      	mov	r0, r4
 8003164:	f007 fd2a 	bl	800abbc <siprintf>
			"Request International Mobile Subscriber Identity is %s.",
			getStatusTypeString(output_status));
	if (output_status != STATUS_SUCCESS) {
 8003168:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <requestInternationalMobileSubscriberIdentity+0xa2>
		writeLog(self, LOG_WARNING, self->log_content, false);
 8003170:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003174:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003178:	2300      	movs	r3, #0
 800317a:	2101      	movs	r1, #1
 800317c:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003180:	f7fe fa4e 	bl	8001620 <writeLog>
 8003184:	e009      	b.n	800319a <requestInternationalMobileSubscriberIdentity+0xb6>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8003186:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800318a:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 800318e:	2300      	movs	r3, #0
 8003190:	2100      	movs	r1, #0
 8003192:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003196:	f7fe fa43 	bl	8001620 <writeLog>
	}
	return output_status;
 800319a:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 800319e:	4618      	mov	r0, r3
 80031a0:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd90      	pop	{r4, r7, pc}
 80031a8:	0800ca54 	.word	0x0800ca54
 80031ac:	0800c74c 	.word	0x0800c74c
 80031b0:	0800ca5c 	.word	0x0800ca5c

080031b4 <setDefaultPSDConnection>:
		writeLog(self, LOG_INFO, self->log_content, false);
	}
	return output_status;
}

StatusType setDefaultPSDConnection(struct ViettelSDK *self) {
 80031b4:	b590      	push	{r4, r7, lr}
 80031b6:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 80031ba:	af02      	add	r7, sp, #8
 80031bc:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
	/* AT*MCGDEFCONT         ---->   AT+CGDCONT           */
	StatusType output_status = STATUS_UNKNOWN;
 80031c0:	2310      	movs	r3, #16
 80031c2:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->command, "%s=1,\"ip\",\"nbiot\"",								//add id =1 , "%s=\"ip\",\"nbiot\"   ---->    "%s=1,\"ip\",\"nbiot\"
 80031c6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80031ca:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 80031ce:	4a2a      	ldr	r2, [pc, #168]	; (8003278 <setDefaultPSDConnection+0xc4>)
 80031d0:	492a      	ldr	r1, [pc, #168]	; (800327c <setDefaultPSDConnection+0xc8>)
 80031d2:	4618      	mov	r0, r3
 80031d4:	f007 fcf2 	bl	800abbc <siprintf>
	SET_DEFAULT_PSD_CONNECTION);
	self->command_response = sendCommand(self, self->command,
 80031d8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80031dc:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 80031e0:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 80031e4:	4638      	mov	r0, r7
 80031e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	2304      	movs	r3, #4
 80031ee:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 80031f2:	f7fe fceb 	bl	8001bcc <sendCommand>
 80031f6:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80031fa:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 80031fe:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8003202:	4611      	mov	r1, r2
 8003204:	f240 3221 	movw	r2, #801	; 0x321
 8003208:	4618      	mov	r0, r3
 800320a:	f007 faf5 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT);

	output_status = self->command_response.status;
 800320e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003212:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003216:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->log_content, "Set Default PSD Connection is %s.",
 800321a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800321e:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 8003222:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003226:	4618      	mov	r0, r3
 8003228:	f7fd ff38 	bl	800109c <getStatusTypeString>
 800322c:	4603      	mov	r3, r0
 800322e:	461a      	mov	r2, r3
 8003230:	4913      	ldr	r1, [pc, #76]	; (8003280 <setDefaultPSDConnection+0xcc>)
 8003232:	4620      	mov	r0, r4
 8003234:	f007 fcc2 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));
	if (output_status != STATUS_SUCCESS) {
 8003238:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <setDefaultPSDConnection+0xa2>
		writeLog(self, LOG_WARNING, self->log_content, false);
 8003240:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003244:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003248:	2300      	movs	r3, #0
 800324a:	2101      	movs	r1, #1
 800324c:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003250:	f7fe f9e6 	bl	8001620 <writeLog>
 8003254:	e009      	b.n	800326a <setDefaultPSDConnection+0xb6>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8003256:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800325a:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 800325e:	2300      	movs	r3, #0
 8003260:	2100      	movs	r1, #0
 8003262:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003266:	f7fe f9db 	bl	8001620 <writeLog>
	}
	return output_status;
 800326a:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 800326e:	4618      	mov	r0, r3
 8003270:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8003274:	46bd      	mov	sp, r7
 8003276:	bd90      	pop	{r4, r7, pc}
 8003278:	0800cadc 	.word	0x0800cadc
 800327c:	0800caec 	.word	0x0800caec
 8003280:	0800cb00 	.word	0x0800cb00

08003284 <UDP_Connect>:


StatusType UDP_Connect(struct ViettelSDK *self) {
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 800328a:	af02      	add	r7, sp, #8
 800328c:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
	/* AT+SMCONF */
	StatusType output_status = STATUS_UNKNOWN;
 8003290:	2310      	movs	r3, #16
 8003292:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337

	sprintf(self->command, "AT+CIPOPEN?");
 8003296:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800329a:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 800329e:	492a      	ldr	r1, [pc, #168]	; (8003348 <UDP_Connect+0xc4>)
 80032a0:	4618      	mov	r0, r3
 80032a2:	f007 fc8b 	bl	800abbc <siprintf>
	self->command_response = sendCommand(self, self->command,
 80032a6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80032aa:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 80032ae:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 80032b2:	4638      	mov	r0, r7
 80032b4:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	2305      	movs	r3, #5
 80032bc:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 80032c0:	f7fe fc84 	bl	8001bcc <sendCommand>
 80032c4:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80032c8:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 80032cc:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 80032d0:	4611      	mov	r1, r2
 80032d2:	f240 3221 	movw	r2, #801	; 0x321
 80032d6:	4618      	mov	r0, r3
 80032d8:	f007 fa8e 	bl	800a7f8 <memcpy>
								RUN_COMMAND_COUNTER_DEFAULT + 1, RUN_COMMAND_TIMEOUT_MS_DEFAULT + 3000);
	output_status = self->command_response.status;
 80032dc:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80032e0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80032e4:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337


	sprintf(self->log_content, "Initialize UDP is %s.", getStatusTypeString(output_status));
 80032e8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80032ec:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 80032f0:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd fed1 	bl	800109c <getStatusTypeString>
 80032fa:	4603      	mov	r3, r0
 80032fc:	461a      	mov	r2, r3
 80032fe:	4913      	ldr	r1, [pc, #76]	; (800334c <UDP_Connect+0xc8>)
 8003300:	4620      	mov	r0, r4
 8003302:	f007 fc5b 	bl	800abbc <siprintf>

	if (output_status != STATUS_SUCCESS) {
 8003306:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <UDP_Connect+0xa0>
		writeLog(self, LOG_WARNING, self->log_content, false);
 800330e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003312:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003316:	2300      	movs	r3, #0
 8003318:	2101      	movs	r1, #1
 800331a:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800331e:	f7fe f97f 	bl	8001620 <writeLog>
 8003322:	e009      	b.n	8003338 <UDP_Connect+0xb4>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8003324:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003328:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 800332c:	2300      	movs	r3, #0
 800332e:	2100      	movs	r1, #0
 8003330:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003334:	f7fe f974 	bl	8001620 <writeLog>
	}
	return output_status;
 8003338:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 800333c:	4618      	mov	r0, r3
 800333e:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8003342:	46bd      	mov	sp, r7
 8003344:	bd90      	pop	{r4, r7, pc}
 8003346:	bf00      	nop
 8003348:	0800cb24 	.word	0x0800cb24
 800334c:	0800cb30 	.word	0x0800cb30

08003350 <send_UDP>:

StatusType send_UDP(struct ViettelSDK *self, char* addr, int port) {
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	f5ad 7d53 	sub.w	sp, sp, #844	; 0x34c
 8003356:	af02      	add	r7, sp, #8
 8003358:	f8c7 0334 	str.w	r0, [r7, #820]	; 0x334
 800335c:	f8c7 1330 	str.w	r1, [r7, #816]	; 0x330
 8003360:	f8c7 232c 	str.w	r2, [r7, #812]	; 0x32c
	/* AT+CASEND */
	StatusType output_status = STATUS_UNKNOWN;
 8003364:	2310      	movs	r3, #16
 8003366:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f


	clearCommand(self);
 800336a:	f8d7 0334 	ldr.w	r0, [r7, #820]	; 0x334
 800336e:	f7fe fcc9 	bl	8001d04 <clearCommand>

	// Send AT+CSOSEND .......
	int message_length = strlen(self->message7022);
 8003372:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8003376:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 800337a:	4618      	mov	r0, r3
 800337c:	f7fc ff28 	bl	80001d0 <strlen>
 8003380:	4603      	mov	r3, r0
 8003382:	f8c7 3338 	str.w	r3, [r7, #824]	; 0x338
	sprintf(self->command,"AT+CIPSEND=0,%d,\"%s\",%d",message_length,addr,port);
 8003386:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800338a:	f203 70f5 	addw	r0, r3, #2037	; 0x7f5
 800338e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8003398:	f8d7 2338 	ldr.w	r2, [r7, #824]	; 0x338
 800339c:	4932      	ldr	r1, [pc, #200]	; (8003468 <send_UDP+0x118>)
 800339e:	f007 fc0d 	bl	800abbc <siprintf>

    sendCommand(self, self->command,1,RUN_COMMAND_TIMEOUT_MS_DEFAULT);
 80033a2:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80033a6:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 80033aa:	4638      	mov	r0, r7
 80033ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	2301      	movs	r3, #1
 80033b4:	f8d7 1334 	ldr.w	r1, [r7, #820]	; 0x334
 80033b8:	f7fe fc08 	bl	8001bcc <sendCommand>

	sprintf(self->command,self->message7022);
 80033bc:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80033c0:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 80033c4:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80033c8:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 80033cc:	4619      	mov	r1, r3
 80033ce:	4610      	mov	r0, r2
 80033d0:	f007 fbf4 	bl	800abbc <siprintf>

	// In ra self->message7022 trước khi gửi
	printf("Message to be sent: %s\n", self->message7022);
 80033d4:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80033d8:	f503 6368 	add.w	r3, r3, #3712	; 0xe80
 80033dc:	4619      	mov	r1, r3
 80033de:	4823      	ldr	r0, [pc, #140]	; (800346c <send_UDP+0x11c>)
 80033e0:	f007 fb1a 	bl	800aa18 <iprintf>

	sendCommand(self, self->command,1,RUN_COMMAND_TIMEOUT_MS_DEFAULT);
 80033e4:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80033e8:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 80033ec:	4638      	mov	r0, r7
 80033ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	2301      	movs	r3, #1
 80033f6:	f8d7 1334 	ldr.w	r1, [r7, #820]	; 0x334
 80033fa:	f7fe fbe7 	bl	8001bcc <sendCommand>

//	self->command_response = sendCommand(self, self->command,
//			RUN_COMMAND_COUNTER_DEFAULT + 1, RUN_COMMAND_TIMEOUT_MS_DEFAULT + 1000);


	output_status = self->command_response.status;
 80033fe:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8003402:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003406:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
	sprintf(self->log_content, "Send UDP is %s.",
 800340a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800340e:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 8003412:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 8003416:	4618      	mov	r0, r3
 8003418:	f7fd fe40 	bl	800109c <getStatusTypeString>
 800341c:	4603      	mov	r3, r0
 800341e:	461a      	mov	r2, r3
 8003420:	4913      	ldr	r1, [pc, #76]	; (8003470 <send_UDP+0x120>)
 8003422:	4620      	mov	r0, r4
 8003424:	f007 fbca 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));
	if (output_status != STATUS_SUCCESS) {
 8003428:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00a      	beq.n	8003446 <send_UDP+0xf6>
		writeLog(self, LOG_WARNING, self->log_content, false);
 8003430:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8003434:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003438:	2300      	movs	r3, #0
 800343a:	2101      	movs	r1, #1
 800343c:	f8d7 0334 	ldr.w	r0, [r7, #820]	; 0x334
 8003440:	f7fe f8ee 	bl	8001620 <writeLog>
 8003444:	e009      	b.n	800345a <send_UDP+0x10a>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8003446:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800344a:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 800344e:	2300      	movs	r3, #0
 8003450:	2100      	movs	r1, #0
 8003452:	f8d7 0334 	ldr.w	r0, [r7, #820]	; 0x334
 8003456:	f7fe f8e3 	bl	8001620 <writeLog>
	}
	return output_status;
 800345a:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
}
 800345e:	4618      	mov	r0, r3
 8003460:	f507 7751 	add.w	r7, r7, #836	; 0x344
 8003464:	46bd      	mov	sp, r7
 8003466:	bd90      	pop	{r4, r7, pc}
 8003468:	0800cb48 	.word	0x0800cb48
 800346c:	0800cb60 	.word	0x0800cb60
 8003470:	0800cb78 	.word	0x0800cb78

08003474 <UDP_Close>:
	return output_status;
}



StatusType UDP_Close(struct ViettelSDK *self) {
 8003474:	b590      	push	{r4, r7, lr}
 8003476:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 800347a:	af02      	add	r7, sp, #8
 800347c:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
	/* AT+CACLOSE */
	StatusType output_status = STATUS_UNKNOWN;
 8003480:	2310      	movs	r3, #16
 8003482:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->command, "AT+NETCLOSE");
 8003486:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800348a:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 800348e:	492a      	ldr	r1, [pc, #168]	; (8003538 <UDP_Close+0xc4>)
 8003490:	4618      	mov	r0, r3
 8003492:	f007 fb93 	bl	800abbc <siprintf>
	self->command_response = sendCommand(self, self->command,
 8003496:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800349a:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 800349e:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 80034a2:	4638      	mov	r0, r7
 80034a4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2304      	movs	r3, #4
 80034ac:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 80034b0:	f7fe fb8c 	bl	8001bcc <sendCommand>
 80034b4:	f507 734e 	add.w	r3, r7, #824	; 0x338
 80034b8:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 80034bc:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 80034c0:	4611      	mov	r1, r2
 80034c2:	f240 3221 	movw	r2, #801	; 0x321
 80034c6:	4618      	mov	r0, r3
 80034c8:	f007 f996 	bl	800a7f8 <memcpy>
			RUN_COMMAND_COUNTER_DEFAULT, RUN_COMMAND_TIMEOUT_MS_DEFAULT + 2000);
	output_status = self->command_response.status;
 80034cc:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80034d0:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80034d4:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->log_content, "UDP disconnect is %s.",
 80034d8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80034dc:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 80034e0:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 80034e4:	4618      	mov	r0, r3
 80034e6:	f7fd fdd9 	bl	800109c <getStatusTypeString>
 80034ea:	4603      	mov	r3, r0
 80034ec:	461a      	mov	r2, r3
 80034ee:	4913      	ldr	r1, [pc, #76]	; (800353c <UDP_Close+0xc8>)
 80034f0:	4620      	mov	r0, r4
 80034f2:	f007 fb63 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));
	if (output_status != STATUS_SUCCESS) {
 80034f6:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00a      	beq.n	8003514 <UDP_Close+0xa0>
		writeLog(self, LOG_WARNING, self->log_content, false);
 80034fe:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003502:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003506:	2300      	movs	r3, #0
 8003508:	2101      	movs	r1, #1
 800350a:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800350e:	f7fe f887 	bl	8001620 <writeLog>
 8003512:	e009      	b.n	8003528 <UDP_Close+0xb4>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8003514:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003518:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 800351c:	2300      	movs	r3, #0
 800351e:	2100      	movs	r1, #0
 8003520:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003524:	f7fe f87c 	bl	8001620 <writeLog>
	}
	return output_status;
 8003528:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 800352c:	4618      	mov	r0, r3
 800352e:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8003532:	46bd      	mov	sp, r7
 8003534:	bd90      	pop	{r4, r7, pc}
 8003536:	bf00      	nop
 8003538:	0800cba8 	.word	0x0800cba8
 800353c:	0800cbb4 	.word	0x0800cbb4

08003540 <configWakeupIndication>:
	return output_status;
}



StatusType configWakeupIndication(struct ViettelSDK *self, bool type) {
 8003540:	b590      	push	{r4, r7, lr}
 8003542:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8003546:	af02      	add	r7, sp, #8
 8003548:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
 800354c:	460b      	mov	r3, r1
 800354e:	f887 332b 	strb.w	r3, [r7, #811]	; 0x32b
	StatusType output_status = STATUS_UNKNOWN;
 8003552:	2310      	movs	r3, #16
 8003554:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->command, "%s=%d",
 8003558:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800355c:	f203 70f5 	addw	r0, r3, #2037	; 0x7f5
 8003560:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 8003564:	4a34      	ldr	r2, [pc, #208]	; (8003638 <configWakeupIndication+0xf8>)
 8003566:	4935      	ldr	r1, [pc, #212]	; (800363c <configWakeupIndication+0xfc>)
 8003568:	f007 fb28 	bl	800abbc <siprintf>
	REPORT_THE_POWER_SAVING_MODE_STATUS, type);
	self->command_response = sendCommand(self, self->command,
 800356c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003570:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8003574:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8003578:	4638      	mov	r0, r7
 800357a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800357e:	9300      	str	r3, [sp, #0]
 8003580:	2304      	movs	r3, #4
 8003582:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8003586:	f7fe fb21 	bl	8001bcc <sendCommand>
 800358a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800358e:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8003592:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8003596:	4611      	mov	r1, r2
 8003598:	f240 3221 	movw	r2, #801	; 0x321
 800359c:	4618      	mov	r0, r3
 800359e:	f007 f92b 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT);

	output_status = self->command_response.status;
 80035a2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80035a6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80035aa:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->log_content, "Config Wakeup Indication is %s.",
 80035ae:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80035b2:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 80035b6:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7fd fd6e 	bl	800109c <getStatusTypeString>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	491e      	ldr	r1, [pc, #120]	; (8003640 <configWakeupIndication+0x100>)
 80035c6:	4620      	mov	r0, r4
 80035c8:	f007 faf8 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));
	if (type) {
 80035cc:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d008      	beq.n	80035e6 <configWakeupIndication+0xa6>
		sprintf(self->log_content, "Turn ON wakeup indication.");
 80035d4:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80035d8:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80035dc:	4919      	ldr	r1, [pc, #100]	; (8003644 <configWakeupIndication+0x104>)
 80035de:	4618      	mov	r0, r3
 80035e0:	f007 faec 	bl	800abbc <siprintf>
 80035e4:	e007      	b.n	80035f6 <configWakeupIndication+0xb6>
	} else {
		sprintf(self->log_content, "Turn OFF wakeup indication.");
 80035e6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80035ea:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80035ee:	4916      	ldr	r1, [pc, #88]	; (8003648 <configWakeupIndication+0x108>)
 80035f0:	4618      	mov	r0, r3
 80035f2:	f007 fae3 	bl	800abbc <siprintf>
	}

	if (output_status != STATUS_SUCCESS) {
 80035f6:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <configWakeupIndication+0xd4>
		writeLog(self, LOG_WARNING, self->log_content, false);
 80035fe:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003602:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003606:	2300      	movs	r3, #0
 8003608:	2101      	movs	r1, #1
 800360a:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800360e:	f7fe f807 	bl	8001620 <writeLog>
 8003612:	e009      	b.n	8003628 <configWakeupIndication+0xe8>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8003614:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003618:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 800361c:	2300      	movs	r3, #0
 800361e:	2100      	movs	r1, #0
 8003620:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003624:	f7fd fffc 	bl	8001620 <writeLog>
	}
	return output_status;
 8003628:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 800362c:	4618      	mov	r0, r3
 800362e:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8003632:	46bd      	mov	sp, r7
 8003634:	bd90      	pop	{r4, r7, pc}
 8003636:	bf00      	nop
 8003638:	0800cbf0 	.word	0x0800cbf0
 800363c:	0800cbfc 	.word	0x0800cbfc
 8003640:	0800cc04 	.word	0x0800cc04
 8003644:	0800cc24 	.word	0x0800cc24
 8003648:	0800cc40 	.word	0x0800cc40

0800364c <configEPSNetworkRegistration>:

StatusType configEPSNetworkRegistration(struct ViettelSDK *self, uint8_t type) {
 800364c:	b590      	push	{r4, r7, lr}
 800364e:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8003652:	af02      	add	r7, sp, #8
 8003654:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
 8003658:	460b      	mov	r3, r1
 800365a:	f887 332b 	strb.w	r3, [r7, #811]	; 0x32b
	StatusType output_status = STATUS_UNKNOWN;
 800365e:	2310      	movs	r3, #16
 8003660:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->command, "%s=%u",
 8003664:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003668:	f203 70f5 	addw	r0, r3, #2037	; 0x7f5
 800366c:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 8003670:	4a50      	ldr	r2, [pc, #320]	; (80037b4 <configEPSNetworkRegistration+0x168>)
 8003672:	4951      	ldr	r1, [pc, #324]	; (80037b8 <configEPSNetworkRegistration+0x16c>)
 8003674:	f007 faa2 	bl	800abbc <siprintf>
	EPS_NETWORK_REGISTRATION_STATUS, type);
	self->command_response = sendCommand(self, self->command,
 8003678:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800367c:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8003680:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8003684:	4638      	mov	r0, r7
 8003686:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2304      	movs	r3, #4
 800368e:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8003692:	f7fe fa9b 	bl	8001bcc <sendCommand>
 8003696:	f507 734e 	add.w	r3, r7, #824	; 0x338
 800369a:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 800369e:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 80036a2:	4611      	mov	r1, r2
 80036a4:	f240 3221 	movw	r2, #801	; 0x321
 80036a8:	4618      	mov	r0, r3
 80036aa:	f007 f8a5 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT);
	output_status = self->command_response.status;
 80036ae:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80036b2:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 80036b6:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->log_content, "Config EPS Network Registration is %s.",
 80036ba:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80036be:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 80036c2:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fd fce8 	bl	800109c <getStatusTypeString>
 80036cc:	4603      	mov	r3, r0
 80036ce:	461a      	mov	r2, r3
 80036d0:	493a      	ldr	r1, [pc, #232]	; (80037bc <configEPSNetworkRegistration+0x170>)
 80036d2:	4620      	mov	r0, r4
 80036d4:	f007 fa72 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));
	if (type == 0) {
 80036d8:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d108      	bne.n	80036f2 <configEPSNetworkRegistration+0xa6>
		sprintf(self->log_content,
 80036e0:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80036e4:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80036e8:	4935      	ldr	r1, [pc, #212]	; (80037c0 <configEPSNetworkRegistration+0x174>)
 80036ea:	4618      	mov	r0, r3
 80036ec:	f007 fa66 	bl	800abbc <siprintf>
 80036f0:	e03f      	b.n	8003772 <configEPSNetworkRegistration+0x126>
				"Disable network registration unsolicited result code.");
	} else if (type == 1) {
 80036f2:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 80036f6:	2b01      	cmp	r3, #1
 80036f8:	d108      	bne.n	800370c <configEPSNetworkRegistration+0xc0>
		sprintf(self->log_content,
 80036fa:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80036fe:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8003702:	4930      	ldr	r1, [pc, #192]	; (80037c4 <configEPSNetworkRegistration+0x178>)
 8003704:	4618      	mov	r0, r3
 8003706:	f007 fa59 	bl	800abbc <siprintf>
 800370a:	e032      	b.n	8003772 <configEPSNetworkRegistration+0x126>
				"Enable network registration unsolicited result code.");
	} else if (type == 2) {
 800370c:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 8003710:	2b02      	cmp	r3, #2
 8003712:	d108      	bne.n	8003726 <configEPSNetworkRegistration+0xda>
		sprintf(self->log_content,
 8003714:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003718:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 800371c:	492a      	ldr	r1, [pc, #168]	; (80037c8 <configEPSNetworkRegistration+0x17c>)
 800371e:	4618      	mov	r0, r3
 8003720:	f007 fa4c 	bl	800abbc <siprintf>
 8003724:	e025      	b.n	8003772 <configEPSNetworkRegistration+0x126>
				"Enable network registration and location information unsolicited result code.");
	} else if (type == 3) {
 8003726:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 800372a:	2b03      	cmp	r3, #3
 800372c:	d108      	bne.n	8003740 <configEPSNetworkRegistration+0xf4>
		sprintf(self->log_content,
 800372e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003732:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8003736:	4925      	ldr	r1, [pc, #148]	; (80037cc <configEPSNetworkRegistration+0x180>)
 8003738:	4618      	mov	r0, r3
 800373a:	f007 fa3f 	bl	800abbc <siprintf>
 800373e:	e018      	b.n	8003772 <configEPSNetworkRegistration+0x126>
				"Enable network registration, location information and EMM cause value information unsolicited result code.");
	} else if (type == 4) {
 8003740:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 8003744:	2b04      	cmp	r3, #4
 8003746:	d108      	bne.n	800375a <configEPSNetworkRegistration+0x10e>
		sprintf(self->log_content,
 8003748:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800374c:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8003750:	491f      	ldr	r1, [pc, #124]	; (80037d0 <configEPSNetworkRegistration+0x184>)
 8003752:	4618      	mov	r0, r3
 8003754:	f007 fa32 	bl	800abbc <siprintf>
 8003758:	e00b      	b.n	8003772 <configEPSNetworkRegistration+0x126>
				"Enable network registration and location information unsolicited result code for UE wants PSM.");
	} else if (type == 5) {
 800375a:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 800375e:	2b05      	cmp	r3, #5
 8003760:	d107      	bne.n	8003772 <configEPSNetworkRegistration+0x126>
		sprintf(self->log_content,
 8003762:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003766:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 800376a:	491a      	ldr	r1, [pc, #104]	; (80037d4 <configEPSNetworkRegistration+0x188>)
 800376c:	4618      	mov	r0, r3
 800376e:	f007 fa25 	bl	800abbc <siprintf>
				"Enable network registration, location information and EMM cause value information unsolicited result code for UE wants PSM.");
	}

	if (output_status != STATUS_SUCCESS) {
 8003772:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003776:	2b00      	cmp	r3, #0
 8003778:	d00a      	beq.n	8003790 <configEPSNetworkRegistration+0x144>
		writeLog(self, LOG_WARNING, self->log_content, false);
 800377a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800377e:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003782:	2300      	movs	r3, #0
 8003784:	2101      	movs	r1, #1
 8003786:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800378a:	f7fd ff49 	bl	8001620 <writeLog>
 800378e:	e009      	b.n	80037a4 <configEPSNetworkRegistration+0x158>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8003790:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003794:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003798:	2300      	movs	r3, #0
 800379a:	2100      	movs	r1, #0
 800379c:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80037a0:	f7fd ff3e 	bl	8001620 <writeLog>
	}
	return output_status;
 80037a4:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd90      	pop	{r4, r7, pc}
 80037b2:	bf00      	nop
 80037b4:	0800c848 	.word	0x0800c848
 80037b8:	0800c694 	.word	0x0800c694
 80037bc:	0800cc5c 	.word	0x0800cc5c
 80037c0:	0800cc84 	.word	0x0800cc84
 80037c4:	0800ccbc 	.word	0x0800ccbc
 80037c8:	0800ccf4 	.word	0x0800ccf4
 80037cc:	0800cd44 	.word	0x0800cd44
 80037d0:	0800cdb0 	.word	0x0800cdb0
 80037d4:	0800ce10 	.word	0x0800ce10

080037d8 <configPSM>:
	}
	return output_status;
}

StatusType configPSM(struct ViettelSDK *self, uint8_t type,
		char requestedPeriodicTAU[], char requestedActiveTime[]) {
 80037d8:	b590      	push	{r4, r7, lr}
 80037da:	f5ad 7d53 	sub.w	sp, sp, #844	; 0x34c
 80037de:	af02      	add	r7, sp, #8
 80037e0:	f8c7 0334 	str.w	r0, [r7, #820]	; 0x334
 80037e4:	f8c7 232c 	str.w	r2, [r7, #812]	; 0x32c
 80037e8:	f8c7 3328 	str.w	r3, [r7, #808]	; 0x328
 80037ec:	460b      	mov	r3, r1
 80037ee:	f887 3333 	strb.w	r3, [r7, #819]	; 0x333
	StatusType output_status = STATUS_UNKNOWN;
 80037f2:	2310      	movs	r3, #16
 80037f4:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
	if (type == 1) {
 80037f8:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d123      	bne.n	8003848 <configPSM+0x70>
		sprintf(self->command, "%s=%u,,,\"%s\",\"%s\"",
 8003800:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8003804:	f203 70f5 	addw	r0, r3, #2037	; 0x7f5
 8003808:	f897 2333 	ldrb.w	r2, [r7, #819]	; 0x333
 800380c:	f8d7 3328 	ldr.w	r3, [r7, #808]	; 0x328
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	4613      	mov	r3, r2
 800381a:	4a55      	ldr	r2, [pc, #340]	; (8003970 <configPSM+0x198>)
 800381c:	4955      	ldr	r1, [pc, #340]	; (8003974 <configPSM+0x19c>)
 800381e:	f007 f9cd 	bl	800abbc <siprintf>
		PSM_AT_CMD, type, requestedPeriodicTAU, requestedActiveTime);
		strcpy(self->requestedPeriodicTAU, requestedPeriodicTAU);
 8003822:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8003826:	f603 23f3 	addw	r3, r3, #2803	; 0xaf3
 800382a:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 800382e:	4618      	mov	r0, r3
 8003830:	f007 f9f1 	bl	800ac16 <strcpy>
		strcpy(self->requestedActiveTime, requestedActiveTime);
 8003834:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8003838:	f603 23fc 	addw	r3, r3, #2812	; 0xafc
 800383c:	f8d7 1328 	ldr.w	r1, [r7, #808]	; 0x328
 8003840:	4618      	mov	r0, r3
 8003842:	f007 f9e8 	bl	800ac16 <strcpy>
 8003846:	e009      	b.n	800385c <configPSM+0x84>
	} else {
		sprintf(self->command, "%s=%u", PSM_AT_CMD, type);
 8003848:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800384c:	f203 70f5 	addw	r0, r3, #2037	; 0x7f5
 8003850:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 8003854:	4a46      	ldr	r2, [pc, #280]	; (8003970 <configPSM+0x198>)
 8003856:	4948      	ldr	r1, [pc, #288]	; (8003978 <configPSM+0x1a0>)
 8003858:	f007 f9b0 	bl	800abbc <siprintf>
	}
	self->command_response = sendCommand(self, self->command,
 800385c:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8003860:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8003864:	f8d7 4334 	ldr.w	r4, [r7, #820]	; 0x334
 8003868:	4638      	mov	r0, r7
 800386a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	2304      	movs	r3, #4
 8003872:	f8d7 1334 	ldr.w	r1, [r7, #820]	; 0x334
 8003876:	f7fe f9a9 	bl	8001bcc <sendCommand>
 800387a:	f507 7350 	add.w	r3, r7, #832	; 0x340
 800387e:	f5a3 7250 	sub.w	r2, r3, #832	; 0x340
 8003882:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8003886:	4611      	mov	r1, r2
 8003888:	f240 3221 	movw	r2, #801	; 0x321
 800388c:	4618      	mov	r0, r3
 800388e:	f006 ffb3 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT);
	output_status = self->command_response.status;
 8003892:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8003896:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 800389a:	f887 333f 	strb.w	r3, [r7, #831]	; 0x33f
	sprintf(self->log_content, "Config PSM is %s.",
 800389e:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80038a2:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 80038a6:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7fd fbf6 	bl	800109c <getStatusTypeString>
 80038b0:	4603      	mov	r3, r0
 80038b2:	461a      	mov	r2, r3
 80038b4:	4931      	ldr	r1, [pc, #196]	; (800397c <configPSM+0x1a4>)
 80038b6:	4620      	mov	r0, r4
 80038b8:	f007 f980 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));
	if (type == 0) {
 80038bc:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d108      	bne.n	80038d6 <configPSM+0xfe>
		sprintf(self->log_content, "Disable PSM.");
 80038c4:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80038c8:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80038cc:	492c      	ldr	r1, [pc, #176]	; (8003980 <configPSM+0x1a8>)
 80038ce:	4618      	mov	r0, r3
 80038d0:	f007 f974 	bl	800abbc <siprintf>
 80038d4:	e018      	b.n	8003908 <configPSM+0x130>
	} else if (type == 1) {
 80038d6:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d108      	bne.n	80038f0 <configPSM+0x118>
		sprintf(self->log_content, "Enable PSM.");
 80038de:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80038e2:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80038e6:	4927      	ldr	r1, [pc, #156]	; (8003984 <configPSM+0x1ac>)
 80038e8:	4618      	mov	r0, r3
 80038ea:	f007 f967 	bl	800abbc <siprintf>
 80038ee:	e00b      	b.n	8003908 <configPSM+0x130>
	} else if (type == 2) {
 80038f0:	f897 3333 	ldrb.w	r3, [r7, #819]	; 0x333
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d107      	bne.n	8003908 <configPSM+0x130>
		sprintf(self->log_content,
 80038f8:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 80038fc:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8003900:	4921      	ldr	r1, [pc, #132]	; (8003988 <configPSM+0x1b0>)
 8003902:	4618      	mov	r0, r3
 8003904:	f007 f95a 	bl	800abbc <siprintf>
				"Disable PSM and discard all parameters for PSM.");
	}
	if (output_status != STATUS_SUCCESS) {
 8003908:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00a      	beq.n	8003926 <configPSM+0x14e>
		writeLog(self, LOG_WARNING, self->log_content, false);
 8003910:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8003914:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003918:	2300      	movs	r3, #0
 800391a:	2101      	movs	r1, #1
 800391c:	f8d7 0334 	ldr.w	r0, [r7, #820]	; 0x334
 8003920:	f7fd fe7e 	bl	8001620 <writeLog>
 8003924:	e01d      	b.n	8003962 <configPSM+0x18a>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8003926:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800392a:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 800392e:	2300      	movs	r3, #0
 8003930:	2100      	movs	r1, #0
 8003932:	f8d7 0334 	ldr.w	r0, [r7, #820]	; 0x334
 8003936:	f7fd fe73 	bl	8001620 <writeLog>
		writeLog(self, LOG_INFO, self->requestedPeriodicTAU, false);
 800393a:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 800393e:	f603 22f3 	addw	r2, r3, #2803	; 0xaf3
 8003942:	2300      	movs	r3, #0
 8003944:	2100      	movs	r1, #0
 8003946:	f8d7 0334 	ldr.w	r0, [r7, #820]	; 0x334
 800394a:	f7fd fe69 	bl	8001620 <writeLog>
		writeLog(self, LOG_INFO, self->requestedActiveTime, false);
 800394e:	f8d7 3334 	ldr.w	r3, [r7, #820]	; 0x334
 8003952:	f603 22fc 	addw	r2, r3, #2812	; 0xafc
 8003956:	2300      	movs	r3, #0
 8003958:	2100      	movs	r1, #0
 800395a:	f8d7 0334 	ldr.w	r0, [r7, #820]	; 0x334
 800395e:	f7fd fe5f 	bl	8001620 <writeLog>
	}
	return output_status;
 8003962:	f897 333f 	ldrb.w	r3, [r7, #831]	; 0x33f
}
 8003966:	4618      	mov	r0, r3
 8003968:	f507 7751 	add.w	r7, r7, #836	; 0x344
 800396c:	46bd      	mov	sp, r7
 800396e:	bd90      	pop	{r4, r7, pc}
 8003970:	0800cf74 	.word	0x0800cf74
 8003974:	0800cf80 	.word	0x0800cf80
 8003978:	0800c694 	.word	0x0800c694
 800397c:	0800cf94 	.word	0x0800cf94
 8003980:	0800cfa8 	.word	0x0800cfa8
 8003984:	0800cfb8 	.word	0x0800cfb8
 8003988:	0800cfc4 	.word	0x0800cfc4

0800398c <setPMUMode>:


/* Module */
StatusType setPMUMode(struct ViettelSDK *self, bool enable, uint8_t mode) {
 800398c:	b590      	push	{r4, r7, lr}
 800398e:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8003992:	af02      	add	r7, sp, #8
 8003994:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
 8003998:	460b      	mov	r3, r1
 800399a:	f887 332b 	strb.w	r3, [r7, #811]	; 0x32b
 800399e:	4613      	mov	r3, r2
 80039a0:	f887 332a 	strb.w	r3, [r7, #810]	; 0x32a
	/* AT+QCPMUCFG= */
	StatusType output_status = STATUS_UNKNOWN;
 80039a4:	2310      	movs	r3, #16
 80039a6:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	if (mode > 4) {
 80039aa:	f897 332a 	ldrb.w	r3, [r7, #810]	; 0x32a
 80039ae:	2b04      	cmp	r3, #4
 80039b0:	d914      	bls.n	80039dc <setPMUMode+0x50>
		output_status = STATUS_BAD_PARAMETER;
 80039b2:	2306      	movs	r3, #6
 80039b4:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
		sprintf(self->log_content, "Set PMU Mode is %s.",
 80039b8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80039bc:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 80039c0:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fd fb69 	bl	800109c <getStatusTypeString>
 80039ca:	4603      	mov	r3, r0
 80039cc:	461a      	mov	r2, r3
 80039ce:	4937      	ldr	r1, [pc, #220]	; (8003aac <setPMUMode+0x120>)
 80039d0:	4620      	mov	r0, r4
 80039d2:	f007 f8f3 	bl	800abbc <siprintf>
				getStatusTypeString(output_status));
		return output_status;
 80039d6:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 80039da:	e062      	b.n	8003aa2 <setPMUMode+0x116>
	}
	if (enable) {
 80039dc:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00a      	beq.n	80039fa <setPMUMode+0x6e>
		sprintf(self->command, "%s=1,%u", SET_PMU_MODE, mode);
 80039e4:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80039e8:	f203 70f5 	addw	r0, r3, #2037	; 0x7f5
 80039ec:	f897 332a 	ldrb.w	r3, [r7, #810]	; 0x32a
 80039f0:	4a2f      	ldr	r2, [pc, #188]	; (8003ab0 <setPMUMode+0x124>)
 80039f2:	4930      	ldr	r1, [pc, #192]	; (8003ab4 <setPMUMode+0x128>)
 80039f4:	f007 f8e2 	bl	800abbc <siprintf>
 80039f8:	e008      	b.n	8003a0c <setPMUMode+0x80>
	} else {
		sprintf(self->command, "%s=0", SET_PMU_MODE);
 80039fa:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80039fe:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 8003a02:	4a2b      	ldr	r2, [pc, #172]	; (8003ab0 <setPMUMode+0x124>)
 8003a04:	492c      	ldr	r1, [pc, #176]	; (8003ab8 <setPMUMode+0x12c>)
 8003a06:	4618      	mov	r0, r3
 8003a08:	f007 f8d8 	bl	800abbc <siprintf>
	}
	self->command_response = sendCommand(self, self->command,
 8003a0c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003a10:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8003a14:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8003a18:	4638      	mov	r0, r7
 8003a1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	2304      	movs	r3, #4
 8003a22:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8003a26:	f7fe f8d1 	bl	8001bcc <sendCommand>
 8003a2a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003a2e:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8003a32:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8003a36:	4611      	mov	r1, r2
 8003a38:	f240 3221 	movw	r2, #801	; 0x321
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f006 fedb 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT, RUN_COMMAND_TIMEOUT_MS_DEFAULT);

	output_status = self->command_response.status;
 8003a42:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003a46:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003a4a:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->log_content, "Set PMU Mode is %s.",
 8003a4e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003a52:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 8003a56:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7fd fb1e 	bl	800109c <getStatusTypeString>
 8003a60:	4603      	mov	r3, r0
 8003a62:	461a      	mov	r2, r3
 8003a64:	4911      	ldr	r1, [pc, #68]	; (8003aac <setPMUMode+0x120>)
 8003a66:	4620      	mov	r0, r4
 8003a68:	f007 f8a8 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));

	if (output_status != STATUS_SUCCESS) {
 8003a6c:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d00a      	beq.n	8003a8a <setPMUMode+0xfe>
		writeLog(self, LOG_WARNING, self->log_content, false);
 8003a74:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003a78:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	2101      	movs	r1, #1
 8003a80:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003a84:	f7fd fdcc 	bl	8001620 <writeLog>
 8003a88:	e009      	b.n	8003a9e <setPMUMode+0x112>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8003a8a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003a8e:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003a92:	2300      	movs	r3, #0
 8003a94:	2100      	movs	r1, #0
 8003a96:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003a9a:	f7fd fdc1 	bl	8001620 <writeLog>
	}
	return output_status;
 8003a9e:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd90      	pop	{r4, r7, pc}
 8003aac:	0800cff4 	.word	0x0800cff4
 8003ab0:	0800d008 	.word	0x0800d008
 8003ab4:	0800d014 	.word	0x0800d014
 8003ab8:	0800d01c 	.word	0x0800d01c

08003abc <getSensorData>:


void getSensorData(struct ViettelSDK *self) {
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	sprintf(self->log_content, "Writing data to FLASH memory.\n");
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8003aca:	4908      	ldr	r1, [pc, #32]	; (8003aec <getSensorData+0x30>)
 8003acc:	4618      	mov	r0, r3
 8003ace:	f007 f875 	bl	800abbc <siprintf>
	writeLog(self, LOG_INFO, self->log_content, true);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003ad8:	2301      	movs	r3, #1
 8003ada:	2100      	movs	r1, #0
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7fd fd9f 	bl	8001620 <writeLog>
	//writeFLASHFlowData(self, FLASH_USER_START_ADDR, FLASH_USER_END_ADDR,*self->data_list->pair.value.uint32_value);
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	0800d024 	.word	0x0800d024

08003af0 <readDynamicParamPDPContext>:

StatusType readDynamicParamPDPContext(struct ViettelSDK *self,
bool save_data) {
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8003af6:	af02      	add	r7, sp, #8
 8003af8:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
 8003afc:	460b      	mov	r3, r1
 8003afe:	f887 332b 	strb.w	r3, [r7, #811]	; 0x32b
	StatusType output_status = STATUS_UNKNOWN;
 8003b02:	2310      	movs	r3, #16
 8003b04:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->command, "%s", READ_DYNAMIC_PARAM_PDP_CONTEXT);							// "%s="    ---------> "%s"
 8003b08:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003b0c:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 8003b10:	4a2a      	ldr	r2, [pc, #168]	; (8003bbc <readDynamicParamPDPContext+0xcc>)
 8003b12:	492b      	ldr	r1, [pc, #172]	; (8003bc0 <readDynamicParamPDPContext+0xd0>)
 8003b14:	4618      	mov	r0, r3
 8003b16:	f007 f851 	bl	800abbc <siprintf>
	self->command_response = sendCommand(self, self->command,
 8003b1a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003b1e:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8003b22:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8003b26:	4638      	mov	r0, r7
 8003b28:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	2306      	movs	r3, #6
 8003b30:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8003b34:	f7fe f84a 	bl	8001bcc <sendCommand>
 8003b38:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003b3c:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8003b40:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8003b44:	4611      	mov	r1, r2
 8003b46:	f240 3221 	movw	r2, #801	; 0x321
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f006 fe54 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT + 2,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT + 2000);

	output_status = self->command_response.status;
 8003b50:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003b54:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003b58:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->log_content, "Read Dynamic Param PDP Context is %s.",
 8003b5c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003b60:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 8003b64:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7fd fa97 	bl	800109c <getStatusTypeString>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	461a      	mov	r2, r3
 8003b72:	4914      	ldr	r1, [pc, #80]	; (8003bc4 <readDynamicParamPDPContext+0xd4>)
 8003b74:	4620      	mov	r0, r4
 8003b76:	f007 f821 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));

	if (output_status != STATUS_SUCCESS) {
 8003b7a:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <readDynamicParamPDPContext+0xa8>
		writeLog(self, LOG_WARNING, self->log_content, false);
 8003b82:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003b86:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003b92:	f7fd fd45 	bl	8001620 <writeLog>
 8003b96:	e009      	b.n	8003bac <readDynamicParamPDPContext+0xbc>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8003b98:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003b9c:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003ba8:	f7fd fd3a 	bl	8001620 <writeLog>
	}
	return output_status;
 8003bac:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd90      	pop	{r4, r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	0800d044 	.word	0x0800d044
 8003bc0:	0800c74c 	.word	0x0800c74c
 8003bc4:	0800d054 	.word	0x0800d054

08003bc8 <autoTimeUpdate>:

StatusType autoTimeUpdate(struct ViettelSDK *self) {
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8003bce:	af02      	add	r7, sp, #8
 8003bd0:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
	StatusType output_status = STATUS_UNKNOWN;
 8003bd4:	2310      	movs	r3, #16
 8003bd6:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->command, "%s=1", AUTO_TIME_UPDATE);
 8003bda:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003bde:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 8003be2:	4a2a      	ldr	r2, [pc, #168]	; (8003c8c <autoTimeUpdate+0xc4>)
 8003be4:	492a      	ldr	r1, [pc, #168]	; (8003c90 <autoTimeUpdate+0xc8>)
 8003be6:	4618      	mov	r0, r3
 8003be8:	f006 ffe8 	bl	800abbc <siprintf>
	self->command_response = sendCommand(self, self->command,
 8003bec:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003bf0:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8003bf4:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8003bf8:	4638      	mov	r0, r7
 8003bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2304      	movs	r3, #4
 8003c02:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8003c06:	f7fd ffe1 	bl	8001bcc <sendCommand>
 8003c0a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003c0e:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8003c12:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8003c16:	4611      	mov	r1, r2
 8003c18:	f240 3221 	movw	r2, #801	; 0x321
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f006 fdeb 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT);

	output_status = self->command_response.status;
 8003c22:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003c26:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003c2a:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->log_content, "Auto Time Update is %s.",
 8003c2e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003c32:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 8003c36:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fd fa2e 	bl	800109c <getStatusTypeString>
 8003c40:	4603      	mov	r3, r0
 8003c42:	461a      	mov	r2, r3
 8003c44:	4913      	ldr	r1, [pc, #76]	; (8003c94 <autoTimeUpdate+0xcc>)
 8003c46:	4620      	mov	r0, r4
 8003c48:	f006 ffb8 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));

	if (output_status != STATUS_SUCCESS) {
 8003c4c:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00a      	beq.n	8003c6a <autoTimeUpdate+0xa2>
		writeLog(self, LOG_WARNING, self->log_content, false);
 8003c54:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003c58:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	2101      	movs	r1, #1
 8003c60:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003c64:	f7fd fcdc 	bl	8001620 <writeLog>
 8003c68:	e009      	b.n	8003c7e <autoTimeUpdate+0xb6>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8003c6a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003c6e:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003c72:	2300      	movs	r3, #0
 8003c74:	2100      	movs	r1, #0
 8003c76:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003c7a:	f7fd fcd1 	bl	8001620 <writeLog>
	}
	return output_status;
 8003c7e:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd90      	pop	{r4, r7, pc}
 8003c8c:	0800d07c 	.word	0x0800d07c
 8003c90:	0800c6e8 	.word	0x0800c6e8
 8003c94:	0800d084 	.word	0x0800d084

08003c98 <getClock>:
		writeLog(self, LOG_INFO, self->log_content, false);
	}
	return output_status;
}

StatusType getClock(struct ViettelSDK *self, bool save_data) {
 8003c98:	b590      	push	{r4, r7, lr}
 8003c9a:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8003c9e:	af02      	add	r7, sp, #8
 8003ca0:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	f887 332b 	strb.w	r3, [r7, #811]	; 0x32b
	StatusType output_status = STATUS_UNKNOWN;
 8003caa:	2310      	movs	r3, #16
 8003cac:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->command, "%s?", GET_CLOCK);
 8003cb0:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003cb4:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 8003cb8:	4a2a      	ldr	r2, [pc, #168]	; (8003d64 <getClock+0xcc>)
 8003cba:	492b      	ldr	r1, [pc, #172]	; (8003d68 <getClock+0xd0>)
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f006 ff7d 	bl	800abbc <siprintf>
	self->command_response = sendCommand(self, self->command,
 8003cc2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003cc6:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8003cca:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8003cce:	4638      	mov	r0, r7
 8003cd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	2304      	movs	r3, #4
 8003cd8:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8003cdc:	f7fd ff76 	bl	8001bcc <sendCommand>
 8003ce0:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003ce4:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8003ce8:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8003cec:	4611      	mov	r1, r2
 8003cee:	f240 3221 	movw	r2, #801	; 0x321
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f006 fd80 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT,
	RUN_COMMAND_TIMEOUT_MS_DEFAULT);

	output_status = self->command_response.status;
 8003cf8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003cfc:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003d00:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	sprintf(self->log_content, "Get Clock is %s.",
 8003d04:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003d08:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 8003d0c:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fd f9c3 	bl	800109c <getStatusTypeString>
 8003d16:	4603      	mov	r3, r0
 8003d18:	461a      	mov	r2, r3
 8003d1a:	4914      	ldr	r1, [pc, #80]	; (8003d6c <getClock+0xd4>)
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f006 ff4d 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));

	if (output_status != STATUS_SUCCESS) {
 8003d22:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d00a      	beq.n	8003d40 <getClock+0xa8>
		writeLog(self, LOG_WARNING, self->log_content, false);
 8003d2a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003d2e:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003d32:	2300      	movs	r3, #0
 8003d34:	2101      	movs	r1, #1
 8003d36:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003d3a:	f7fd fc71 	bl	8001620 <writeLog>
 8003d3e:	e009      	b.n	8003d54 <getClock+0xbc>
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8003d40:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003d44:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003d48:	2300      	movs	r3, #0
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003d50:	f7fd fc66 	bl	8001620 <writeLog>
	}
	return output_status;
 8003d54:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd90      	pop	{r4, r7, pc}
 8003d62:	bf00      	nop
 8003d64:	0800d0c4 	.word	0x0800d0c4
 8003d68:	0800c854 	.word	0x0800c854
 8003d6c:	0800d0cc 	.word	0x0800d0cc

08003d70 <checkSIM>:

StatusType checkSIM(struct ViettelSDK *self) {
 8003d70:	b590      	push	{r4, r7, lr}
 8003d72:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8003d76:	af02      	add	r7, sp, #8
 8003d78:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
	/* AT+CPIN? */
	/* Initialize STATUS_UNKNOWN */
	StatusType output_status = STATUS_UNKNOWN;
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337

	/* Send command */
	sprintf(self->command, "%s?", ENTER_PIN);
 8003d82:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003d86:	f203 73f5 	addw	r3, r3, #2037	; 0x7f5
 8003d8a:	4a2a      	ldr	r2, [pc, #168]	; (8003e34 <checkSIM+0xc4>)
 8003d8c:	492a      	ldr	r1, [pc, #168]	; (8003e38 <checkSIM+0xc8>)
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f006 ff14 	bl	800abbc <siprintf>
	self->command_response = sendCommand(self, self->command,
 8003d94:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003d98:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8003d9c:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8003da0:	4638      	mov	r0, r7
 8003da2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	2305      	movs	r3, #5
 8003daa:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8003dae:	f7fd ff0d 	bl	8001bcc <sendCommand>
 8003db2:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003db6:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8003dba:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8003dbe:	4611      	mov	r1, r2
 8003dc0:	f240 3221 	movw	r2, #801	; 0x321
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f006 fd17 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT + 1, RUN_COMMAND_TIMEOUT_MS_DEFAULT + 2000);

	/* Get output status */
	output_status = self->command_response.status;
 8003dca:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003dce:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003dd2:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337

	/* Log status of command */
	sprintf(self->log_content, "Checking SIM Status is %s.",
 8003dd6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003dda:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 8003dde:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd f95a 	bl	800109c <getStatusTypeString>
 8003de8:	4603      	mov	r3, r0
 8003dea:	461a      	mov	r2, r3
 8003dec:	4913      	ldr	r1, [pc, #76]	; (8003e3c <checkSIM+0xcc>)
 8003dee:	4620      	mov	r0, r4
 8003df0:	f006 fee4 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));

	/* Logical processing */
	if (output_status != STATUS_SUCCESS) {
 8003df4:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00a      	beq.n	8003e12 <checkSIM+0xa2>
		writeLog(self, LOG_WARNING, self->log_content, false);
 8003dfc:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003e00:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003e04:	2300      	movs	r3, #0
 8003e06:	2101      	movs	r1, #1
 8003e08:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003e0c:	f7fd fc08 	bl	8001620 <writeLog>
 8003e10:	e009      	b.n	8003e26 <checkSIM+0xb6>
		/* What to do if status is NOT SUCCESS */
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8003e12:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003e16:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003e22:	f7fd fbfd 	bl	8001620 <writeLog>
		/* What to do if status is SUCCESS */
	}

	return output_status;
 8003e26:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd90      	pop	{r4, r7, pc}
 8003e34:	0800d0e0 	.word	0x0800d0e0
 8003e38:	0800c854 	.word	0x0800c854
 8003e3c:	0800d0e8 	.word	0x0800d0e8

08003e40 <setPhoneFunctionality>:

StatusType setPhoneFunctionality(struct ViettelSDK *self, uint8_t fun) {
 8003e40:	b590      	push	{r4, r7, lr}
 8003e42:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 8003e46:	af02      	add	r7, sp, #8
 8003e48:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	f887 332b 	strb.w	r3, [r7, #811]	; 0x32b
	/* AT+CFUN= */
	/* Initialize STATUS_UNKNOWN */
	StatusType output_status = STATUS_UNKNOWN;
 8003e52:	2310      	movs	r3, #16
 8003e54:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337

	if ((fun != 0) && (fun != 1) && (fun != 4) && (fun != 7)) {
	}

	/* Send command */
	sprintf(self->command, "%s=%u", PHONE_FUCNTIONALITY, fun);
 8003e58:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003e5c:	f203 70f5 	addw	r0, r3, #2037	; 0x7f5
 8003e60:	f897 332b 	ldrb.w	r3, [r7, #811]	; 0x32b
 8003e64:	4a29      	ldr	r2, [pc, #164]	; (8003f0c <setPhoneFunctionality+0xcc>)
 8003e66:	492a      	ldr	r1, [pc, #168]	; (8003f10 <setPhoneFunctionality+0xd0>)
 8003e68:	f006 fea8 	bl	800abbc <siprintf>
	self->command_response = sendCommand(self, self->command,
 8003e6c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003e70:	f203 72f5 	addw	r2, r3, #2037	; 0x7f5
 8003e74:	f8d7 432c 	ldr.w	r4, [r7, #812]	; 0x32c
 8003e78:	4638      	mov	r0, r7
 8003e7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	2304      	movs	r3, #4
 8003e82:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8003e86:	f7fd fea1 	bl	8001bcc <sendCommand>
 8003e8a:	f507 734e 	add.w	r3, r7, #824	; 0x338
 8003e8e:	f5a3 724e 	sub.w	r2, r3, #824	; 0x338
 8003e92:	f104 037f 	add.w	r3, r4, #127	; 0x7f
 8003e96:	4611      	mov	r1, r2
 8003e98:	f240 3221 	movw	r2, #801	; 0x321
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f006 fcab 	bl	800a7f8 <memcpy>
	RUN_COMMAND_COUNTER_DEFAULT, RUN_COMMAND_TIMEOUT_MS_DEFAULT);

	/* Get output status */
	output_status = self->command_response.status;
 8003ea2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003ea6:	f893 307f 	ldrb.w	r3, [r3, #127]	; 0x7f
 8003eaa:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337

	/* Log status of command */
	sprintf(self->log_content, "Set Set Phone Functionality Status is %s.",
 8003eae:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003eb2:	f603 7449 	addw	r4, r3, #3913	; 0xf49
 8003eb6:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fd f8ee 	bl	800109c <getStatusTypeString>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	4913      	ldr	r1, [pc, #76]	; (8003f14 <setPhoneFunctionality+0xd4>)
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	f006 fe78 	bl	800abbc <siprintf>
			getStatusTypeString(output_status));

	/* Logical processing */
	if (output_status != STATUS_SUCCESS) {
 8003ecc:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d00a      	beq.n	8003eea <setPhoneFunctionality+0xaa>
		writeLog(self, LOG_WARNING, self->log_content, false);
 8003ed4:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003ed8:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003edc:	2300      	movs	r3, #0
 8003ede:	2101      	movs	r1, #1
 8003ee0:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003ee4:	f7fd fb9c 	bl	8001620 <writeLog>
 8003ee8:	e009      	b.n	8003efe <setPhoneFunctionality+0xbe>
		/* What to do if status is NOT SUCCESS */
	} else {
		writeLog(self, LOG_INFO, self->log_content, false);
 8003eea:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8003eee:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003efa:	f7fd fb91 	bl	8001620 <writeLog>
		/* What to do if status is SUCCESS */
	}

	return output_status;
 8003efe:	f897 3337 	ldrb.w	r3, [r7, #823]	; 0x337
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd90      	pop	{r4, r7, pc}
 8003f0c:	0800d104 	.word	0x0800d104
 8003f10:	0800c694 	.word	0x0800c694
 8003f14:	0800d10c 	.word	0x0800d10c

08003f18 <mainFlow>:
		writeLog(self, LOG_INFO, self->log_content, false);
	}
	return output_status;
}

void mainFlow(struct ViettelSDK *self) {
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 8003f1e:	af02      	add	r7, sp, #8
 8003f20:	f8c7 032c 	str.w	r0, [r7, #812]	; 0x32c
	int8_t try;

	/* Stage 1 -- Check normally operation of module */
	try = 5;
 8003f24:	2305      	movs	r3, #5
 8003f26:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	while (self->stage == 1) {
 8003f2a:	e0a9      	b.n	8004080 <mainFlow+0x168>
		try--;
 8003f2c:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337

		if (try == 0){
 8003f3a:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d112      	bne.n	8003f68 <mainFlow+0x50>
			/* Sleep */
			/* AT+QCPMUCFG */
			setLedMode(self, false);
 8003f42:	2100      	movs	r1, #0
 8003f44:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003f48:	f7fe f9ea 	bl	8002320 <setLedMode>
			if (setPMUMode(self, 1, 4) != STATUS_SUCCESS) {
 8003f4c:	2204      	movs	r2, #4
 8003f4e:	2101      	movs	r1, #1
 8003f50:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003f54:	f7ff fd1a 	bl	800398c <setPMUMode>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d000      	beq.n	8003f60 <mainFlow+0x48>
				continue;
 8003f5e:	e08f      	b.n	8004080 <mainFlow+0x168>
			}
			//sleepMCU(self, SLEEP_INTERVAL);
			resetMCU(self);
 8003f60:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003f64:	f7fd fa26 	bl	80013b4 <resetMCU>
		}

		/* AT */
		if (checkModule(self) != STATUS_SUCCESS) {
 8003f68:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003f6c:	f7fe f8a4 	bl	80020b8 <checkModule>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d000      	beq.n	8003f78 <mainFlow+0x60>
			continue;
 8003f76:	e083      	b.n	8004080 <mainFlow+0x168>
		}

		/* ATEx */
		if (setCommandEchoMode(self, false) != STATUS_SUCCESS) {
 8003f78:	2100      	movs	r1, #0
 8003f7a:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003f7e:	f7fe f937 	bl	80021f0 <setCommandEchoMode>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d000      	beq.n	8003f8a <mainFlow+0x72>
			continue;
 8003f88:	e07a      	b.n	8004080 <mainFlow+0x168>
		}

		/* AT+CPIN? */
		if (checkSIM(self) != STATUS_SUCCESS) {
 8003f8a:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003f8e:	f7ff feef 	bl	8003d70 <checkSIM>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d012      	beq.n	8003fbe <mainFlow+0xa6>
			/* AT+QCPMUCFG */
			setLedMode(self, false);
 8003f98:	2100      	movs	r1, #0
 8003f9a:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003f9e:	f7fe f9bf 	bl	8002320 <setLedMode>
			if (setPMUMode(self, 1, 4) != STATUS_SUCCESS) {
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	2101      	movs	r1, #1
 8003fa6:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003faa:	f7ff fcef 	bl	800398c <setPMUMode>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d000      	beq.n	8003fb6 <mainFlow+0x9e>
				continue;
 8003fb4:	e064      	b.n	8004080 <mainFlow+0x168>
			}
			/* Sleep */
			//sleepMCU(self, SLEEP_INTERVAL);
			resetMCU(self);
 8003fb6:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003fba:	f7fd f9fb 	bl	80013b4 <resetMCU>
		}

		/* AT+CMEE */
		if (setReportMobileEquipmentError(self, 2) != STATUS_SUCCESS) {
 8003fbe:	2102      	movs	r1, #2
 8003fc0:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003fc4:	f7fe fe12 	bl	8002bec <setReportMobileEquipmentError>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d000      	beq.n	8003fd0 <mainFlow+0xb8>
			continue;
 8003fce:	e057      	b.n	8004080 <mainFlow+0x168>
		}

		/* AT+QCPMUCFG */
		if (setPMUMode(self, 0, 1) != STATUS_SUCCESS) {
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003fd8:	f7ff fcd8 	bl	800398c <setPMUMode>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d000      	beq.n	8003fe4 <mainFlow+0xcc>
			continue;
 8003fe2:	e04d      	b.n	8004080 <mainFlow+0x168>
		}
		setLedMode(self, true);
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003fea:	f7fe f999 	bl	8002320 <setLedMode>

		/* ATI */
		if (displayProductID(self) != STATUS_SUCCESS) {
 8003fee:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8003ff2:	f7fe fea3 	bl	8002d3c <displayProductID>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d000      	beq.n	8003ffe <mainFlow+0xe6>
			continue;
 8003ffc:	e040      	b.n	8004080 <mainFlow+0x168>
		}

		/* AT+CGMI */
		if (requestManufacturerID(self) != STATUS_SUCCESS) {
 8003ffe:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004002:	f7fe ff03 	bl	8002e0c <requestManufacturerID>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d000      	beq.n	800400e <mainFlow+0xf6>
			continue;
 800400c:	e038      	b.n	8004080 <mainFlow+0x168>
		}

		/* AT+CGMM */
		if (requestModelID(self) != STATUS_SUCCESS) {
 800400e:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004012:	f7fe ffff 	bl	8003014 <requestModelID>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d000      	beq.n	800401e <mainFlow+0x106>
			continue;
 800401c:	e030      	b.n	8004080 <mainFlow+0x168>
		}

		/* AT+CGMR */
		if (requestTARevisionIdentification(self) != STATUS_SUCCESS) {
 800401e:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004022:	f7fe fb11 	bl	8002648 <requestTARevisionIdentification>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d000      	beq.n	800402e <mainFlow+0x116>
			continue;
 800402c:	e028      	b.n	8004080 <mainFlow+0x168>
		}

		/* AT+CGSN */
		if (requestIMEI(self) != STATUS_SUCCESS) {
 800402e:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004032:	f7fe fa0d 	bl	8002450 <requestIMEI>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d000      	beq.n	800403e <mainFlow+0x126>
			continue;
 800403c:	e020      	b.n	8004080 <mainFlow+0x168>
		}

		/* AT+CIMI */
		if (requestInternationalMobileSubscriberIdentity(self)
 800403e:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004042:	f7ff f84f 	bl	80030e4 <requestInternationalMobileSubscriberIdentity>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d000      	beq.n	800404e <mainFlow+0x136>
				!= STATUS_SUCCESS) {
			continue;
 800404c:	e018      	b.n	8004080 <mainFlow+0x168>
		}

		/* AT+CBAND */
		if (getAndSetMobileOperationBand(self, 3) != STATUS_SUCCESS) {
 800404e:	2103      	movs	r1, #3
 8004050:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004054:	f7fe ff42 	bl	8002edc <getAndSetMobileOperationBand>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d000      	beq.n	8004060 <mainFlow+0x148>
			continue;
 800405e:	e00f      	b.n	8004080 <mainFlow+0x168>
		}

		/* AT+CSQ */
		if (readSignalQualityReport(self) != STATUS_SUCCESS) {
 8004060:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004064:	f7fe fba2 	bl	80027ac <readSignalQualityReport>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d000      	beq.n	8004070 <mainFlow+0x158>
			continue;
 800406e:	e007      	b.n	8004080 <mainFlow+0x168>
		}

		HAL_Delay(STAGE_DELAY_MS);
 8004070:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004074:	f001 fc74 	bl	8005960 <HAL_Delay>
		self->stage = 2;
 8004078:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800407c:	2202      	movs	r2, #2
 800407e:	705a      	strb	r2, [r3, #1]
	while (self->stage == 1) {
 8004080:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8004084:	785b      	ldrb	r3, [r3, #1]
 8004086:	2b01      	cmp	r3, #1
 8004088:	f43f af50 	beq.w	8003f2c <mainFlow+0x14>




	/* Stage 2 -- Check register to network*/
	try = 3;
 800408c:	2303      	movs	r3, #3
 800408e:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	while (self->stage == 2) {
 8004092:	e0b0      	b.n	80041f6 <mainFlow+0x2de>


		while (try--) {
			/* AT+CEREG? */
			if (try < 2) {
 8004094:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 8004098:	2b01      	cmp	r3, #1
 800409a:	dc03      	bgt.n	80040a4 <mainFlow+0x18c>
				//wakeUpModule(self);													// Delete wakeup, need more time for module attach to network
				HAL_Delay(5000);														// Increasing wake up module
 800409c:	f241 3088 	movw	r0, #5000	; 0x1388
 80040a0:	f001 fc5e 	bl	8005960 <HAL_Delay>
			}
			if ((readEPSNetworkRegistrationStatus(self, true) == STATUS_SUCCESS)
 80040a4:	2101      	movs	r1, #1
 80040a6:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80040aa:	f7fe fcc1 	bl	8002a30 <readEPSNetworkRegistrationStatus>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10a      	bne.n	80040ca <mainFlow+0x1b2>
					&& (self->stat == 1)) {
 80040b4:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80040b8:	f893 3aee 	ldrb.w	r3, [r3, #2798]	; 0xaee
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d104      	bne.n	80040ca <mainFlow+0x1b2>
				self->stage = 3;
 80040c0:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80040c4:	2203      	movs	r2, #3
 80040c6:	705a      	strb	r2, [r3, #1]
				break;
 80040c8:	e00c      	b.n	80040e4 <mainFlow+0x1cc>
			}
			HAL_Delay(10000);															// Increase delay when attach to network
 80040ca:	f242 7010 	movw	r0, #10000	; 0x2710
 80040ce:	f001 fc47 	bl	8005960 <HAL_Delay>
		while (try--) {
 80040d2:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	3a01      	subs	r2, #1
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	f887 2337 	strb.w	r2, [r7, #823]	; 0x337
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1d7      	bne.n	8004094 <mainFlow+0x17c>
		}




		if (try == -1) {
 80040e4:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 80040e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ec:	f040 8083 	bne.w	80041f6 <mainFlow+0x2de>
			/* Cannot register automatically. Try to register manually 3 times  */
			try = 3;
 80040f0:	2303      	movs	r3, #3
 80040f2:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
			while (try--) {
 80040f6:	e046      	b.n	8004186 <mainFlow+0x26e>
				sprintf(self->log_content,
 80040f8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80040fc:	f603 7049 	addw	r0, r3, #3913	; 0xf49
 8004100:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 8004104:	f1c3 0303 	rsb	r3, r3, #3
 8004108:	461a      	mov	r2, r3
 800410a:	49c7      	ldr	r1, [pc, #796]	; (8004428 <mainFlow+0x510>)
 800410c:	f006 fd56 	bl	800abbc <siprintf>
						"Cannot register automatically. Try to register manually 3 times. Attempt: %u/3.\n",
						3 - try);
				writeLog(self, LOG_WARNING, self->log_content, true);
 8004110:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8004114:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8004118:	2301      	movs	r3, #1
 800411a:	2101      	movs	r1, #1
 800411c:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004120:	f7fd fa7e 	bl	8001620 <writeLog>

				/* AT+CFUN= 0*/
				if (setPhoneFunctionality(self, 0) != STATUS_SUCCESS) {
 8004124:	2100      	movs	r1, #0
 8004126:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800412a:	f7ff fe89 	bl	8003e40 <setPhoneFunctionality>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d000      	beq.n	8004136 <mainFlow+0x21e>
					continue;
 8004134:	e027      	b.n	8004186 <mainFlow+0x26e>
				}

				/* AT*MCGDEFCONT         ---->   AT+CGDCONT           */
				if (setDefaultPSDConnection(self) != STATUS_SUCCESS) {
 8004136:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800413a:	f7ff f83b 	bl	80031b4 <setDefaultPSDConnection>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d000      	beq.n	8004146 <mainFlow+0x22e>
					continue;
 8004144:	e01f      	b.n	8004186 <mainFlow+0x26e>
				}

				/* AT+CFUN= */
				if (setPhoneFunctionality(self, 1) != STATUS_SUCCESS) {
 8004146:	2101      	movs	r1, #1
 8004148:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800414c:	f7ff fe78 	bl	8003e40 <setPhoneFunctionality>
 8004150:	4603      	mov	r3, r0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d000      	beq.n	8004158 <mainFlow+0x240>
					continue;
 8004156:	e016      	b.n	8004186 <mainFlow+0x26e>
				}

				HAL_Delay(3000);
 8004158:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800415c:	f001 fc00 	bl	8005960 <HAL_Delay>

				/* AT+CEREG? */
				if ((readEPSNetworkRegistrationStatus(self, true)
 8004160:	2101      	movs	r1, #1
 8004162:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004166:	f7fe fc63 	bl	8002a30 <readEPSNetworkRegistrationStatus>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <mainFlow+0x26e>
						== STATUS_SUCCESS) && (self->stat == 1)) {
 8004170:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8004174:	f893 3aee 	ldrb.w	r3, [r3, #2798]	; 0xaee
 8004178:	2b01      	cmp	r3, #1
 800417a:	d104      	bne.n	8004186 <mainFlow+0x26e>
					self->stage = 3;
 800417c:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8004180:	2203      	movs	r2, #3
 8004182:	705a      	strb	r2, [r3, #1]
					break;
 8004184:	e008      	b.n	8004198 <mainFlow+0x280>
			while (try--) {
 8004186:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 800418a:	b2da      	uxtb	r2, r3
 800418c:	3a01      	subs	r2, #1
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	f887 2337 	strb.w	r2, [r7, #823]	; 0x337
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1af      	bne.n	80040f8 <mainFlow+0x1e0>
				}
			}

			if (try == -1) {
 8004198:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d129      	bne.n	80041f6 <mainFlow+0x2de>
				/* Fail to register manually */
				sprintf(self->log_content, "Fail to register manually!");
 80041a2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80041a6:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 80041aa:	49a0      	ldr	r1, [pc, #640]	; (800442c <mainFlow+0x514>)
 80041ac:	4618      	mov	r0, r3
 80041ae:	f006 fd05 	bl	800abbc <siprintf>
				writeLog(self, LOG_WARNING, self->log_content, true);
 80041b2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80041b6:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 80041ba:	2301      	movs	r3, #1
 80041bc:	2101      	movs	r1, #1
 80041be:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80041c2:	f7fd fa2d 	bl	8001620 <writeLog>

				/* AT+QCPMUCFG */
				setLedMode(self, false);
 80041c6:	2100      	movs	r1, #0
 80041c8:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80041cc:	f7fe f8a8 	bl	8002320 <setLedMode>
				if (setPMUMode(self, 1, 4) != STATUS_SUCCESS) {
 80041d0:	2204      	movs	r2, #4
 80041d2:	2101      	movs	r1, #1
 80041d4:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80041d8:	f7ff fbd8 	bl	800398c <setPMUMode>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d000      	beq.n	80041e4 <mainFlow+0x2cc>
					continue;
 80041e2:	e008      	b.n	80041f6 <mainFlow+0x2de>
				}



				/* Sleep */
				sleepMCU(self, SLEEP_INTERVAL);
 80041e4:	2150      	movs	r1, #80	; 0x50
 80041e6:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80041ea:	f7fc ffd3 	bl	8001194 <sleepMCU>
				resetMCU(self);
 80041ee:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80041f2:	f7fd f8df 	bl	80013b4 <resetMCU>
	while (self->stage == 2) {
 80041f6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80041fa:	785b      	ldrb	r3, [r3, #1]
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	f43f af68 	beq.w	80040d2 <mainFlow+0x1ba>
	}



	/* Stage 3 */
	while (self->stage == 3) {
 8004202:	e088      	b.n	8004316 <mainFlow+0x3fe>

		try = 3;
 8004204:	2303      	movs	r3, #3
 8004206:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
		while (try--) {
 800420a:	e024      	b.n	8004256 <mainFlow+0x33e>

			// Shutdown PSM to avoid ERROR
			if (configPSM(self, 0, "01011111", "00001010") != STATUS_SUCCESS) {
 800420c:	4b88      	ldr	r3, [pc, #544]	; (8004430 <mainFlow+0x518>)
 800420e:	4a89      	ldr	r2, [pc, #548]	; (8004434 <mainFlow+0x51c>)
 8004210:	2100      	movs	r1, #0
 8004212:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004216:	f7ff fadf 	bl	80037d8 <configPSM>
 800421a:	4603      	mov	r3, r0
 800421c:	2b00      	cmp	r3, #0
 800421e:	d000      	beq.n	8004222 <mainFlow+0x30a>
				continue;
 8004220:	e019      	b.n	8004256 <mainFlow+0x33e>
			}

			/*AT+CGCONTRDP*/
			if (readDynamicParamPDPContext(self, false) != STATUS_SUCCESS) {
 8004222:	2100      	movs	r1, #0
 8004224:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004228:	f7ff fc62 	bl	8003af0 <readDynamicParamPDPContext>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d000      	beq.n	8004234 <mainFlow+0x31c>
				continue;
 8004232:	e010      	b.n	8004256 <mainFlow+0x33e>
			}
			/*AT+CTZU=1*/
			if (autoTimeUpdate(self) != STATUS_SUCCESS) {
 8004234:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004238:	f7ff fcc6 	bl	8003bc8 <autoTimeUpdate>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d000      	beq.n	8004244 <mainFlow+0x32c>
				continue;
 8004242:	e008      	b.n	8004256 <mainFlow+0x33e>
			}
			/*AT+CCLK*/
			if (getClock(self, false) != STATUS_SUCCESS) {
 8004244:	2100      	movs	r1, #0
 8004246:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800424a:	f7ff fd25 	bl	8003c98 <getClock>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d000      	beq.n	8004256 <mainFlow+0x33e>
				continue;
 8004254:	bf00      	nop
		while (try--) {
 8004256:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 800425a:	b2da      	uxtb	r2, r3
 800425c:	3a01      	subs	r2, #1
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	f887 2337 	strb.w	r2, [r7, #823]	; 0x337
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1d1      	bne.n	800420c <mainFlow+0x2f4>



		/* Register PSM with cell */
		/*AT+CPSMSTATUS*/
		if (configWakeupIndication(self, 1) != STATUS_SUCCESS) {
 8004268:	2101      	movs	r1, #1
 800426a:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800426e:	f7ff f967 	bl	8003540 <configWakeupIndication>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d000      	beq.n	800427a <mainFlow+0x362>
			continue;
 8004278:	e04d      	b.n	8004316 <mainFlow+0x3fe>
		}

		if (configEPSNetworkRegistration(self, 0) != STATUS_SUCCESS) {
 800427a:	2100      	movs	r1, #0
 800427c:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004280:	f7ff f9e4 	bl	800364c <configEPSNetworkRegistration>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d000      	beq.n	800428c <mainFlow+0x374>
			continue;
 800428a:	e044      	b.n	8004316 <mainFlow+0x3fe>
		}

		/*AT+CEREG=4*/
		if (configEPSNetworkRegistration(self, 4) != STATUS_SUCCESS) {
 800428c:	2104      	movs	r1, #4
 800428e:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004292:	f7ff f9db 	bl	800364c <configEPSNetworkRegistration>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d000      	beq.n	800429e <mainFlow+0x386>
			continue;
 800429c:	e03b      	b.n	8004316 <mainFlow+0x3fe>
//		// Set up PSM again
//		if (configPSM(self, 1, "01011111", "00001010") != STATUS_SUCCESS) {
//			continue;
//		}

		HAL_Delay(1000);
 800429e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042a2:	f001 fb5d 	bl	8005960 <HAL_Delay>

		try = 3;
 80042a6:	2303      	movs	r3, #3
 80042a8:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
		while (try--) {
 80042ac:	e007      	b.n	80042be <mainFlow+0x3a6>
			if (readEPSNetworkRegistrationStatus(self, true)
 80042ae:	2101      	movs	r1, #1
 80042b0:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80042b4:	f7fe fbbc 	bl	8002a30 <readEPSNetworkRegistrationStatus>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <mainFlow+0x3ba>
		while (try--) {
 80042be:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	3a01      	subs	r2, #1
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	f887 2337 	strb.w	r2, [r7, #823]	; 0x337
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1ee      	bne.n	80042ae <mainFlow+0x396>
 80042d0:	e000      	b.n	80042d4 <mainFlow+0x3bc>
					== STATUS_SUCCESS) {
				break;
 80042d2:	bf00      	nop
			}
		}


		if (try == -1) {
 80042d4:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042dc:	d117      	bne.n	800430e <mainFlow+0x3f6>
			/* AT+QCPMUCFG */
			setLedMode(self, false);
 80042de:	2100      	movs	r1, #0
 80042e0:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80042e4:	f7fe f81c 	bl	8002320 <setLedMode>
			if (setPMUMode(self, 1, 4) != STATUS_SUCCESS) {
 80042e8:	2204      	movs	r2, #4
 80042ea:	2101      	movs	r1, #1
 80042ec:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80042f0:	f7ff fb4c 	bl	800398c <setPMUMode>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d000      	beq.n	80042fc <mainFlow+0x3e4>
				continue;
 80042fa:	e00c      	b.n	8004316 <mainFlow+0x3fe>
			}

			sleepMCU(self, SLEEP_INTERVAL);
 80042fc:	2150      	movs	r1, #80	; 0x50
 80042fe:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004302:	f7fc ff47 	bl	8001194 <sleepMCU>
			resetMCU(self);
 8004306:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800430a:	f7fd f853 	bl	80013b4 <resetMCU>
		}



		if (UDP_SELECT){
			self->stage = 4;
 800430e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8004312:	2204      	movs	r2, #4
 8004314:	705a      	strb	r2, [r3, #1]
	while (self->stage == 3) {
 8004316:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800431a:	785b      	ldrb	r3, [r3, #1]
 800431c:	2b03      	cmp	r3, #3
 800431e:	f43f af71 	beq.w	8004204 <mainFlow+0x2ec>

	}


	/* Stage 4 _ UDP */
	while (self->stage == 4) {
 8004322:	e12e      	b.n	8004582 <mainFlow+0x66a>


		sendCommand(self, "AT+NETOPEN",
 8004324:	4638      	mov	r0, r7
 8004326:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	2301      	movs	r3, #1
 800432e:	4a42      	ldr	r2, [pc, #264]	; (8004438 <mainFlow+0x520>)
 8004330:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8004334:	f7fd fc4a 	bl	8001bcc <sendCommand>
			1,
			RUN_COMMAND_TIMEOUT_MS_DEFAULT);

		sendCommand(self, "AT+CIPOPEN=0,\"UDP\",,,12345",
 8004338:	4638      	mov	r0, r7
 800433a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	2301      	movs	r3, #1
 8004342:	4a3e      	ldr	r2, [pc, #248]	; (800443c <mainFlow+0x524>)
 8004344:	f8d7 132c 	ldr.w	r1, [r7, #812]	; 0x32c
 8004348:	f7fd fc40 	bl	8001bcc <sendCommand>
			1,
			RUN_COMMAND_TIMEOUT_MS_DEFAULT);


		/* AT+CSOCON= .... */
		try = 3;
 800434c:	2303      	movs	r3, #3
 800434e:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
		while (try--) {
 8004352:	e006      	b.n	8004362 <mainFlow+0x44a>

			if (UDP_Connect(self) == STATUS_SUCCESS) {
 8004354:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004358:	f7fe ff94 	bl	8003284 <UDP_Connect>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d009      	beq.n	8004376 <mainFlow+0x45e>
		while (try--) {
 8004362:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 8004366:	b2da      	uxtb	r2, r3
 8004368:	3a01      	subs	r2, #1
 800436a:	b2d2      	uxtb	r2, r2
 800436c:	f887 2337 	strb.w	r2, [r7, #823]	; 0x337
 8004370:	2b00      	cmp	r3, #0
 8004372:	d1ef      	bne.n	8004354 <mainFlow+0x43c>
 8004374:	e000      	b.n	8004378 <mainFlow+0x460>
				break;
 8004376:	bf00      	nop
			}
		}
		/* Fail to UDP connection */
		if (try == -1) {
 8004378:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 800437c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004380:	d117      	bne.n	80043b2 <mainFlow+0x49a>
			/* AT+QCPMUCFG */
			setLedMode(self, false);
 8004382:	2100      	movs	r1, #0
 8004384:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004388:	f7fd ffca 	bl	8002320 <setLedMode>
			if (setPMUMode(self, 1, 4) != STATUS_SUCCESS) {
 800438c:	2204      	movs	r2, #4
 800438e:	2101      	movs	r1, #1
 8004390:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004394:	f7ff fafa 	bl	800398c <setPMUMode>
 8004398:	4603      	mov	r3, r0
 800439a:	2b00      	cmp	r3, #0
 800439c:	d000      	beq.n	80043a0 <mainFlow+0x488>
				continue;
 800439e:	e0f0      	b.n	8004582 <mainFlow+0x66a>
			}

			sleepMCU(self, SLEEP_INTERVAL);
 80043a0:	2150      	movs	r1, #80	; 0x50
 80043a2:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80043a6:	f7fc fef5 	bl	8001194 <sleepMCU>
			resetMCU(self);
 80043aa:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80043ae:	f7fd f801 	bl	80013b4 <resetMCU>




		/* Package data to send */
		getData(self);
 80043b2:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80043b6:	f7fd fbe3 	bl	8001b80 <getData>


		/* SEND DATA */
		try = 3;
 80043ba:	2303      	movs	r3, #3
 80043bc:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
		int udp_success = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
		while (try--) {
 80043c6:	e011      	b.n	80043ec <mainFlow+0x4d4>
			/* AT+CASEND */
			if ( send_UDP(self,"115.78.92.253",12345) != STATUS_SUCCESS) {
 80043c8:	f243 0239 	movw	r2, #12345	; 0x3039
 80043cc:	491c      	ldr	r1, [pc, #112]	; (8004440 <mainFlow+0x528>)
 80043ce:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80043d2:	f7fe ffbd 	bl	8003350 <send_UDP>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d000      	beq.n	80043de <mainFlow+0x4c6>
				//wakeUpModule(self);
				continue;
 80043dc:	e006      	b.n	80043ec <mainFlow+0x4d4>
			}
			else {
				udp_success = 1;
 80043de:	2301      	movs	r3, #1
 80043e0:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
				HAL_Delay(3000);
 80043e4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80043e8:	f001 faba 	bl	8005960 <HAL_Delay>
		while (try--) {
 80043ec:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 80043f0:	b2da      	uxtb	r2, r3
 80043f2:	3a01      	subs	r2, #1
 80043f4:	b2d2      	uxtb	r2, r2
 80043f6:	f887 2337 	strb.w	r2, [r7, #823]	; 0x337
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d1e4      	bne.n	80043c8 <mainFlow+0x4b0>
			}
		}



		if (try == -1 && udp_success == 0) {
 80043fe:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 8004402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004406:	f040 8091 	bne.w	800452c <mainFlow+0x614>
 800440a:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 800440e:	2b00      	cmp	r3, #0
 8004410:	f040 808c 	bne.w	800452c <mainFlow+0x614>
			/* Not receive response from platform after 3 attempts */
			if (readEPSNetworkRegistrationStatus(self, true)
 8004414:	2101      	movs	r1, #1
 8004416:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800441a:	f7fe fb09 	bl	8002a30 <readEPSNetworkRegistrationStatus>
 800441e:	4603      	mov	r3, r0
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00f      	beq.n	8004444 <mainFlow+0x52c>
					!= STATUS_SUCCESS) {
				continue;
 8004424:	e0ad      	b.n	8004582 <mainFlow+0x66a>
 8004426:	bf00      	nop
 8004428:	0800d164 	.word	0x0800d164
 800442c:	0800d1b8 	.word	0x0800d1b8
 8004430:	0800d1d4 	.word	0x0800d1d4
 8004434:	0800d1e0 	.word	0x0800d1e0
 8004438:	0800d1ec 	.word	0x0800d1ec
 800443c:	0800d1f8 	.word	0x0800d1f8
 8004440:	0800d214 	.word	0x0800d214
			}

			if (self->stat == 1) {
 8004444:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8004448:	f893 3aee 	ldrb.w	r3, [r3, #2798]	; 0xaee
 800444c:	2b01      	cmp	r3, #1
 800444e:	d112      	bne.n	8004476 <mainFlow+0x55e>
				/* Bad signal. Cannot publish messages */
				sprintf(self->log_content,
 8004450:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8004454:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 8004458:	49ab      	ldr	r1, [pc, #684]	; (8004708 <mainFlow+0x7f0>)
 800445a:	4618      	mov	r0, r3
 800445c:	f006 fbae 	bl	800abbc <siprintf>
						"Bad signal. Cannot publish messages");
				writeLog(self, LOG_WARNING, self->log_content, true);
 8004460:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8004464:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8004468:	2301      	movs	r3, #1
 800446a:	2101      	movs	r1, #1
 800446c:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004470:	f7fd f8d6 	bl	8001620 <writeLog>
 8004474:	e05a      	b.n	800452c <mainFlow+0x614>
			} else if (self->stat == 2) {
 8004476:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800447a:	f893 3aee 	ldrb.w	r3, [r3, #2798]	; 0xaee
 800447e:	2b02      	cmp	r3, #2
 8004480:	d13e      	bne.n	8004500 <mainFlow+0x5e8>
				sprintf(self->log_content, "Cannot register. Clear PSM.");
 8004482:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8004486:	f603 7349 	addw	r3, r3, #3913	; 0xf49
 800448a:	49a0      	ldr	r1, [pc, #640]	; (800470c <mainFlow+0x7f4>)
 800448c:	4618      	mov	r0, r3
 800448e:	f006 fb95 	bl	800abbc <siprintf>
				writeLog(self, LOG_WARNING, self->log_content, true);
 8004492:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8004496:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 800449a:	2301      	movs	r3, #1
 800449c:	2101      	movs	r1, #1
 800449e:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80044a2:	f7fd f8bd 	bl	8001620 <writeLog>

				/* Clear PSM */
				if (configEPSNetworkRegistration(self, 0)
 80044a6:	2100      	movs	r1, #0
 80044a8:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80044ac:	f7ff f8ce 	bl	800364c <configEPSNetworkRegistration>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d000      	beq.n	80044b8 <mainFlow+0x5a0>
						!= STATUS_SUCCESS) {
					continue;
 80044b6:	e064      	b.n	8004582 <mainFlow+0x66a>
				}

				if (configPSM(self, 0, "", "") != STATUS_SUCCESS) {
 80044b8:	4b95      	ldr	r3, [pc, #596]	; (8004710 <mainFlow+0x7f8>)
 80044ba:	4a95      	ldr	r2, [pc, #596]	; (8004710 <mainFlow+0x7f8>)
 80044bc:	2100      	movs	r1, #0
 80044be:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80044c2:	f7ff f989 	bl	80037d8 <configPSM>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d000      	beq.n	80044ce <mainFlow+0x5b6>
					continue;
 80044cc:	e059      	b.n	8004582 <mainFlow+0x66a>
				}

				/* AT+QCPMUCFG */
				setLedMode(self, false);
 80044ce:	2100      	movs	r1, #0
 80044d0:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80044d4:	f7fd ff24 	bl	8002320 <setLedMode>
				if (setPMUMode(self, 1, 4) != STATUS_SUCCESS) {
 80044d8:	2204      	movs	r2, #4
 80044da:	2101      	movs	r1, #1
 80044dc:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80044e0:	f7ff fa54 	bl	800398c <setPMUMode>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d000      	beq.n	80044ec <mainFlow+0x5d4>
					continue;
 80044ea:	e04a      	b.n	8004582 <mainFlow+0x66a>
				}

				sleepMCU(self, SLEEP_INTERVAL);
 80044ec:	2150      	movs	r1, #80	; 0x50
 80044ee:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80044f2:	f7fc fe4f 	bl	8001194 <sleepMCU>
				resetMCU(self);
 80044f6:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80044fa:	f7fc ff5b 	bl	80013b4 <resetMCU>
 80044fe:	e015      	b.n	800452c <mainFlow+0x614>

			} else {
				sprintf(self->log_content,
 8004500:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8004504:	f603 7049 	addw	r0, r3, #3913	; 0xf49
						"Unsupport code of EPS Network Registration Status: %u",
						self->stat);
 8004508:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800450c:	f893 3aee 	ldrb.w	r3, [r3, #2798]	; 0xaee
				sprintf(self->log_content,
 8004510:	461a      	mov	r2, r3
 8004512:	4980      	ldr	r1, [pc, #512]	; (8004714 <mainFlow+0x7fc>)
 8004514:	f006 fb52 	bl	800abbc <siprintf>
				writeLog(self, LOG_INFO, self->log_content, true);
 8004518:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800451c:	f603 7249 	addw	r2, r3, #3913	; 0xf49
 8004520:	2301      	movs	r3, #1
 8004522:	2100      	movs	r1, #0
 8004524:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004528:	f7fd f87a 	bl	8001620 <writeLog>
			}
		}

		/* AT+CACLOSE  & Deactive PDP*/
		UDP_Close(self);
 800452c:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004530:	f7fe ffa0 	bl	8003474 <UDP_Close>
		//ActivePDP(self, 0, 0);


		// Set up PSM again

		configEPSNetworkRegistration(self,4);
 8004534:	2104      	movs	r1, #4
 8004536:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800453a:	f7ff f887 	bl	800364c <configEPSNetworkRegistration>
		configPSM(self, 1, "10100101", "00000010");
 800453e:	4b76      	ldr	r3, [pc, #472]	; (8004718 <mainFlow+0x800>)
 8004540:	4a76      	ldr	r2, [pc, #472]	; (800471c <mainFlow+0x804>)
 8004542:	2101      	movs	r1, #1
 8004544:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004548:	f7ff f946 	bl	80037d8 <configPSM>
		HAL_Delay(5000);
 800454c:	f241 3088 	movw	r0, #5000	; 0x1388
 8004550:	f001 fa06 	bl	8005960 <HAL_Delay>
		/* AT+QCPMUCFG */
		setLedMode(self, false);
 8004554:	2100      	movs	r1, #0
 8004556:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800455a:	f7fd fee1 	bl	8002320 <setLedMode>
		if (setPMUMode(self, 1, 4) != STATUS_SUCCESS) {
 800455e:	2204      	movs	r2, #4
 8004560:	2101      	movs	r1, #1
 8004562:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004566:	f7ff fa11 	bl	800398c <setPMUMode>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d000      	beq.n	8004572 <mainFlow+0x65a>
		continue;
 8004570:	e007      	b.n	8004582 <mainFlow+0x66a>
		}

		//sendCommand(self, "AT+CPSMRDP",RUN_COMMAND_COUNTER_DEFAULT,RUN_COMMAND_TIMEOUT_MS_DEFAULT);

		HAL_Delay(2000);
 8004572:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004576:	f001 f9f3 	bl	8005960 <HAL_Delay>

		self->stage = 0;
 800457a:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800457e:	2200      	movs	r2, #0
 8004580:	705a      	strb	r2, [r3, #1]
	while (self->stage == 4) {
 8004582:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8004586:	785b      	ldrb	r3, [r3, #1]
 8004588:	2b04      	cmp	r3, #4
 800458a:	f43f aecb 	beq.w	8004324 <mainFlow+0x40c>
		Stage 0: Operate successfully, go to sleep
	--------------------------------------------------*/

	/* Wait module to go to sleep */

	self->passively_listen = true;
 800458e:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	self->sleep = false;
 8004598:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 800459c:	2200      	movs	r2, #0
 800459e:	701a      	strb	r2, [r3, #0]
	self->psm_timer = HAL_GetTick();
 80045a0:	f001 f9d2 	bl	8005948 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80045aa:	671a      	str	r2, [r3, #112]	; 0x70
	clearMainBuffer(self);
 80045ac:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80045b0:	f7fd fbc4 	bl	8001d3c <clearMainBuffer>

	try = 7;
 80045b4:	2307      	movs	r3, #7
 80045b6:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	while(try--){
 80045ba:	e020      	b.n	80045fe <mainFlow+0x6e6>
		self->psm_timer = HAL_GetTick();
 80045bc:	f001 f9c4 	bl	8005948 <HAL_GetTick>
 80045c0:	4602      	mov	r2, r0
 80045c2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80045c6:	671a      	str	r2, [r3, #112]	; 0x70
		while (HAL_GetTick() - self->psm_timer <= WAIT_FOR_PSM_MODE) {
 80045c8:	e00b      	b.n	80045e2 <mainFlow+0x6ca>
			if (self->sleep) {
 80045ca:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d006      	beq.n	80045e2 <mainFlow+0x6ca>
				HAL_IWDG_Refresh(&hiwdg);
 80045d4:	4852      	ldr	r0, [pc, #328]	; (8004720 <mainFlow+0x808>)
 80045d6:	f001 ff57 	bl	8006488 <HAL_IWDG_Refresh>
				try = 0;
 80045da:	2300      	movs	r3, #0
 80045dc:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
				break;
 80045e0:	e00a      	b.n	80045f8 <mainFlow+0x6e0>
		while (HAL_GetTick() - self->psm_timer <= WAIT_FOR_PSM_MODE) {
 80045e2:	f001 f9b1 	bl	8005948 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80045ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	f242 7210 	movw	r2, #10000	; 0x2710
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d9e8      	bls.n	80045ca <mainFlow+0x6b2>
			}
		}
		HAL_IWDG_Refresh(&hiwdg);
 80045f8:	4849      	ldr	r0, [pc, #292]	; (8004720 <mainFlow+0x808>)
 80045fa:	f001 ff45 	bl	8006488 <HAL_IWDG_Refresh>
	while(try--){
 80045fe:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 8004602:	b2da      	uxtb	r2, r3
 8004604:	3a01      	subs	r2, #1
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	f887 2337 	strb.w	r2, [r7, #823]	; 0x337
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1d5      	bne.n	80045bc <mainFlow+0x6a4>
	}
	try = 0;
 8004610:	2300      	movs	r3, #0
 8004612:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	HAL_Delay(2000);
 8004616:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800461a:	f001 f9a1 	bl	8005960 <HAL_Delay>


	/* Sleep MCU after Module enter PSM*/
	/* AT+QCPMUCFG */
	setLedMode(self, false);
 800461e:	2100      	movs	r1, #0
 8004620:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004624:	f7fd fe7c 	bl	8002320 <setLedMode>
	setPMUMode(self, 1, 4);
 8004628:	2204      	movs	r2, #4
 800462a:	2101      	movs	r1, #1
 800462c:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004630:	f7ff f9ac 	bl	800398c <setPMUMode>

	sleepMCU(self, SLEEP_INTERVAL);
 8004634:	2150      	movs	r1, #80	; 0x50
 8004636:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800463a:	f7fc fdab 	bl	8001194 <sleepMCU>
	HAL_IWDG_Refresh(&hiwdg);
 800463e:	4838      	ldr	r0, [pc, #224]	; (8004720 <mainFlow+0x808>)
 8004640:	f001 ff22 	bl	8006488 <HAL_IWDG_Refresh>




	try = 3;
 8004644:	2303      	movs	r3, #3
 8004646:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	GetUpModule(self);
 800464a:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 800464e:	f7fc ff01 	bl	8001454 <GetUpModule>
	while (try--) {
 8004652:	e010      	b.n	8004676 <mainFlow+0x75e>
		HAL_Delay(2000);
 8004654:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004658:	f001 f982 	bl	8005960 <HAL_Delay>
		if (checkModule(self) == STATUS_SUCCESS) {
 800465c:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004660:	f7fd fd2a 	bl	80020b8 <checkModule>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d105      	bne.n	8004676 <mainFlow+0x75e>
			setCommandEchoMode(self, false);
 800466a:	2100      	movs	r1, #0
 800466c:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004670:	f7fd fdbe 	bl	80021f0 <setCommandEchoMode>
			break;
 8004674:	e008      	b.n	8004688 <mainFlow+0x770>
	while (try--) {
 8004676:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 800467a:	b2da      	uxtb	r2, r3
 800467c:	3a01      	subs	r2, #1
 800467e:	b2d2      	uxtb	r2, r2
 8004680:	f887 2337 	strb.w	r2, [r7, #823]	; 0x337
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1e5      	bne.n	8004654 <mainFlow+0x73c>
		}
	}
	/* Fail to connect to module */
	if (try == -1) {
 8004688:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 800468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004690:	d103      	bne.n	800469a <mainFlow+0x782>
		resetMCU(self);
 8004692:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 8004696:	f7fc fe8d 	bl	80013b4 <resetMCU>
	}



	try = 3;
 800469a:	2303      	movs	r3, #3
 800469c:	f887 3337 	strb.w	r3, [r7, #823]	; 0x337
	while (try--) {
 80046a0:	e01a      	b.n	80046d8 <mainFlow+0x7c0>
		if (readEPSNetworkRegistrationStatus(self, true) == STATUS_SUCCESS
 80046a2:	2101      	movs	r1, #1
 80046a4:	f8d7 032c 	ldr.w	r0, [r7, #812]	; 0x32c
 80046a8:	f7fe f9c2 	bl	8002a30 <readEPSNetworkRegistrationStatus>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <mainFlow+0x7a6>
				|| self->stat == 1) {
 80046b2:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80046b6:	f893 3aee 	ldrb.w	r3, [r3, #2798]	; 0xaee
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d108      	bne.n	80046d0 <mainFlow+0x7b8>
			/* Still conenct to cell */
			self->stage = 3;
 80046be:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80046c2:	2203      	movs	r2, #3
 80046c4:	705a      	strb	r2, [r3, #1]
			HAL_Delay(1000);
 80046c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046ca:	f001 f949 	bl	8005960 <HAL_Delay>
			return;
 80046ce:	e016      	b.n	80046fe <mainFlow+0x7e6>
		}

		else HAL_Delay(1000);
 80046d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046d4:	f001 f944 	bl	8005960 <HAL_Delay>
	while (try--) {
 80046d8:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	3a01      	subs	r2, #1
 80046e0:	b2d2      	uxtb	r2, r2
 80046e2:	f887 2337 	strb.w	r2, [r7, #823]	; 0x337
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d1db      	bne.n	80046a2 <mainFlow+0x78a>
	}

	if (try == -1) {
 80046ea:	f997 3337 	ldrsb.w	r3, [r7, #823]	; 0x337
 80046ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f2:	d104      	bne.n	80046fe <mainFlow+0x7e6>
		/* Clear PSM */
		self->stage = 1;
 80046f4:	f8d7 332c 	ldr.w	r3, [r7, #812]	; 0x32c
 80046f8:	2201      	movs	r2, #1
 80046fa:	705a      	strb	r2, [r3, #1]
		return;
 80046fc:	bf00      	nop
	}

}
 80046fe:	f507 774e 	add.w	r7, r7, #824	; 0x338
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	0800d224 	.word	0x0800d224
 800470c:	0800d248 	.word	0x0800d248
 8004710:	0800d264 	.word	0x0800d264
 8004714:	0800d268 	.word	0x0800d268
 8004718:	0800d2a0 	.word	0x0800d2a0
 800471c:	0800d2ac 	.word	0x0800d2ac
 8004720:	200000b8 	.word	0x200000b8

08004724 <addData>:
#include "ViettelSDK_Data.h"

void addData(struct ViettelSDK *self, char key[], void *value,
		enum ValueType value_type) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b086      	sub	sp, #24
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	70fb      	strb	r3, [r7, #3]

	/* Fail add previous data, then not add more data */
	if (!self->addDataSuccessfully) {
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f893 3e60 	ldrb.w	r3, [r3, #3680]	; 0xe60
 8004738:	f083 0301 	eor.w	r3, r3, #1
 800473c:	b2db      	uxtb	r3, r3
 800473e:	2b00      	cmp	r3, #0
 8004740:	f040 80b5 	bne.w	80048ae <addData+0x18a>
		return;
	}

	DataNode *new_node = malloc(sizeof(DataNode));
 8004744:	202c      	movs	r0, #44	; 0x2c
 8004746:	f006 f84f 	bl	800a7e8 <malloc>
 800474a:	4603      	mov	r3, r0
 800474c:	613b      	str	r3, [r7, #16]

	if (!new_node || (strlen(key) > KEY_MAX_LENGTH)) {
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d005      	beq.n	8004760 <addData+0x3c>
 8004754:	68b8      	ldr	r0, [r7, #8]
 8004756:	f7fb fd3b 	bl	80001d0 <strlen>
 800475a:	4603      	mov	r3, r0
 800475c:	2b1e      	cmp	r3, #30
 800475e:	d904      	bls.n	800476a <addData+0x46>
		self->addDataSuccessfully = false;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2e60 	strb.w	r2, [r3, #3680]	; 0xe60
		return;
 8004768:	e0a4      	b.n	80048b4 <addData+0x190>
	}

	strcpy(new_node->pair.key, key);
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	68b9      	ldr	r1, [r7, #8]
 800476e:	4618      	mov	r0, r3
 8004770:	f006 fa51 	bl	800ac16 <strcpy>

	switch (value_type) {
 8004774:	78fb      	ldrb	r3, [r7, #3]
 8004776:	2b0b      	cmp	r3, #11
 8004778:	f200 809b 	bhi.w	80048b2 <addData+0x18e>
 800477c:	a201      	add	r2, pc, #4	; (adr r2, 8004784 <addData+0x60>)
 800477e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004782:	bf00      	nop
 8004784:	080047b5 	.word	0x080047b5
 8004788:	080047c5 	.word	0x080047c5
 800478c:	080047d5 	.word	0x080047d5
 8004790:	080047e5 	.word	0x080047e5
 8004794:	080047f5 	.word	0x080047f5
 8004798:	08004805 	.word	0x08004805
 800479c:	08004815 	.word	0x08004815
 80047a0:	08004825 	.word	0x08004825
 80047a4:	08004845 	.word	0x08004845
 80047a8:	08004835 	.word	0x08004835
 80047ac:	08004855 	.word	0x08004855
 80047b0:	08004865 	.word	0x08004865
	case VALUE_BOOL:
		new_node->pair.value.bool_value = (bool*) value;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	621a      	str	r2, [r3, #32]
		new_node->pair.value_type = VALUE_BOOL;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2200      	movs	r2, #0
 80047be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 80047c2:	e057      	b.n	8004874 <addData+0x150>
	case VALUE_CHAR:
		new_node->pair.value.char_value = (char*) value;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	621a      	str	r2, [r3, #32]
		new_node->pair.value_type = VALUE_CHAR;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 80047d2:	e04f      	b.n	8004874 <addData+0x150>
	case VALUE_UNSIGNED_CHAR:
		new_node->pair.value.unsigned_char_value = (unsigned char*) value;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	621a      	str	r2, [r3, #32]
		new_node->pair.value_type = VALUE_UNSIGNED_CHAR;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	2202      	movs	r2, #2
 80047de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 80047e2:	e047      	b.n	8004874 <addData+0x150>
	case VALUE_UINT8_T:
		new_node->pair.value.uint8_value = (uint8_t*) value;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	621a      	str	r2, [r3, #32]
		new_node->pair.value_type = VALUE_UINT8_T;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2203      	movs	r2, #3
 80047ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 80047f2:	e03f      	b.n	8004874 <addData+0x150>
	case VALUE_SHORT:
		new_node->pair.value.short_value = (short*) value;
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	621a      	str	r2, [r3, #32]
		new_node->pair.value_type = VALUE_SHORT;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2204      	movs	r2, #4
 80047fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 8004802:	e037      	b.n	8004874 <addData+0x150>
	case VALUE_UNSIGNED_SHORT:
		new_node->pair.value.unsigned_short_value = (unsigned short*) value;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	621a      	str	r2, [r3, #32]
		new_node->pair.value_type = VALUE_UNSIGNED_SHORT;
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	2205      	movs	r2, #5
 800480e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 8004812:	e02f      	b.n	8004874 <addData+0x150>
	case VALUE_UINT16_T:
		new_node->pair.value.uint16_value = (uint16_t*) value;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	621a      	str	r2, [r3, #32]
		new_node->pair.value_type = VALUE_UINT16_T;
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2206      	movs	r2, #6
 800481e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 8004822:	e027      	b.n	8004874 <addData+0x150>
	case VALUE_INT:
		new_node->pair.value.int_value = (int*) value;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	621a      	str	r2, [r3, #32]
		new_node->pair.value_type = VALUE_INT;
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	2207      	movs	r2, #7
 800482e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 8004832:	e01f      	b.n	8004874 <addData+0x150>
	case VALUE_LONG:
		new_node->pair.value.long_value = (long*) value;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	621a      	str	r2, [r3, #32]
		new_node->pair.value_type = VALUE_LONG;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2209      	movs	r2, #9
 800483e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 8004842:	e017      	b.n	8004874 <addData+0x150>
	case VALUE_UINT32_T:
		new_node->pair.value.uint32_value = (uint32_t*) value;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	621a      	str	r2, [r3, #32]
		new_node->pair.value_type = VALUE_UINT32_T;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	2208      	movs	r2, #8
 800484e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 8004852:	e00f      	b.n	8004874 <addData+0x150>
	case VALUE_FLOAT:
		new_node->pair.value.float_value = (float*) value;
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	621a      	str	r2, [r3, #32]
		new_node->pair.value_type = VALUE_FLOAT;
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	220a      	movs	r2, #10
 800485e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 8004862:	e007      	b.n	8004874 <addData+0x150>
	case VALUE_CHAR_ARRAY:
		new_node->pair.value.char_array_value = (char*) value;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	621a      	str	r2, [r3, #32]
		new_node->pair.value_type = VALUE_CHAR_ARRAY;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	220b      	movs	r2, #11
 800486e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		break;
 8004872:	bf00      	nop
	default:
		return;
	}

	/* Set the next node to NULL */
	new_node->next = NULL;
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	2200      	movs	r2, #0
 8004878:	629a      	str	r2, [r3, #40]	; 0x28

	/* If the list is empty, set the new node as the head */
	if (!self->data_list) {
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f8d3 3e68 	ldr.w	r3, [r3, #3688]	; 0xe68
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <addData+0x16a>
		self->data_list = new_node;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	f8c3 2e68 	str.w	r2, [r3, #3688]	; 0xe68
 800488c:	e012      	b.n	80048b4 <addData+0x190>
	}
	/* Otherwise, traverse the list to the end and append the new node */
	else {
		DataNode *current_node = self->data_list;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	f8d3 3e68 	ldr.w	r3, [r3, #3688]	; 0xe68
 8004894:	617b      	str	r3, [r7, #20]
		while (current_node->next) {
 8004896:	e002      	b.n	800489e <addData+0x17a>
			current_node = current_node->next;
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489c:	617b      	str	r3, [r7, #20]
		while (current_node->next) {
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1f8      	bne.n	8004898 <addData+0x174>
		}
		current_node->next = new_node;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28
 80048ac:	e002      	b.n	80048b4 <addData+0x190>
		return;
 80048ae:	bf00      	nop
 80048b0:	e000      	b.n	80048b4 <addData+0x190>
		return;
 80048b2:	bf00      	nop
	}

}
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop

080048bc <HAL_UARTEx_RxEventCallback>:
void usDelay(uint32_t uSec);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	460b      	mov	r3, r1
 80048c6:	807b      	strh	r3, [r7, #2]
	//writeLog(&sdk_handler, LOG_DEBUG, "Interrupt RX\n\n", true);
	saveResponse(&sdk_handler, huart, Size);
 80048c8:	887b      	ldrh	r3, [r7, #2]
 80048ca:	461a      	mov	r2, r3
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	4803      	ldr	r0, [pc, #12]	; (80048dc <HAL_UARTEx_RxEventCallback+0x20>)
 80048d0:	f7fd fa84 	bl	8001ddc <saveResponse>
}
 80048d4:	bf00      	nop
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20000308 	.word	0x20000308

080048e0 <_write>:

#if defined(__GNUC__)
int _write(int fd, char * ptr, int len) {
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( & huart2, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	f04f 33ff 	mov.w	r3, #4294967295
 80048f4:	68b9      	ldr	r1, [r7, #8]
 80048f6:	4804      	ldr	r0, [pc, #16]	; (8004908 <_write+0x28>)
 80048f8:	f004 fc5e 	bl	80091b8 <HAL_UART_Transmit>
  return len;
 80048fc:	687b      	ldr	r3, [r7, #4]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	200001f4 	.word	0x200001f4

0800490c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004912:	f000 ffec 	bl	80058ee <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004916:	f000 f88f 	bl	8004a38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800491a:	f000 faa5 	bl	8004e68 <MX_GPIO_Init>
  MX_DMA_Init();
 800491e:	f000 fa7d 	bl	8004e1c <MX_DMA_Init>
  MX_IWDG_Init();
 8004922:	f000 f8d1 	bl	8004ac8 <MX_IWDG_Init>
  MX_LPTIM1_Init();
 8004926:	f000 f8ed 	bl	8004b04 <MX_LPTIM1_Init>
  MX_RTC_Init();
 800492a:	f000 f917 	bl	8004b5c <MX_RTC_Init>
  MX_TIM2_Init();
 800492e:	f000 f9a5 	bl	8004c7c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8004932:	f000 fa13 	bl	8004d5c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8004936:	f000 fa41 	bl	8004dbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  initializeSDK(&sdk_handler, &huart2, &huart1, &hdma_usart1_rx, GPIOA, GPIO_PIN_7, &hrtc);
 800493a:	4b31      	ldr	r3, [pc, #196]	; (8004a00 <main+0xf4>)
 800493c:	9302      	str	r3, [sp, #8]
 800493e:	2380      	movs	r3, #128	; 0x80
 8004940:	9301      	str	r3, [sp, #4]
 8004942:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004946:	9300      	str	r3, [sp, #0]
 8004948:	4b2e      	ldr	r3, [pc, #184]	; (8004a04 <main+0xf8>)
 800494a:	4a2f      	ldr	r2, [pc, #188]	; (8004a08 <main+0xfc>)
 800494c:	492f      	ldr	r1, [pc, #188]	; (8004a0c <main+0x100>)
 800494e:	4830      	ldr	r0, [pc, #192]	; (8004a10 <main+0x104>)
 8004950:	f7fc ff7c 	bl	800184c <initializeSDK>

//  setupMQTTParameters(&sdk_handler, "mqtt.innoway.vn", "1883", 5000, 512, 1,
//  			"ef2885df-341c-44e6-9fbf-a185a36a8f1a", 3, "demo",
//  			"a2yVP58DWKhQEJkiQWQZt3nFgoQabHyS");

  addData(&sdk_handler, "data", &pulse, VALUE_UINT32_T);
 8004954:	2308      	movs	r3, #8
 8004956:	4a2f      	ldr	r2, [pc, #188]	; (8004a14 <main+0x108>)
 8004958:	492f      	ldr	r1, [pc, #188]	; (8004a18 <main+0x10c>)
 800495a:	482d      	ldr	r0, [pc, #180]	; (8004a10 <main+0x104>)
 800495c:	f7ff fee2 	bl	8004724 <addData>

  updateFLASHData(&sdk_handler);
 8004960:	482b      	ldr	r0, [pc, #172]	; (8004a10 <main+0x104>)
 8004962:	f7fc fde3 	bl	800152c <updateFLASHData>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  	//HAL_TIM_Base_Start_IT (&hlptim1);
  	resetDMAInterrupt_2(&sdk_handler);
 8004966:	482a      	ldr	r0, [pc, #168]	; (8004a10 <main+0x104>)
 8004968:	f7fd fa0b 	bl	8001d82 <resetDMAInterrupt_2>

  while (1)
  {
	  	  	printf("Start to read DHT\r\n");
 800496c:	482b      	ldr	r0, [pc, #172]	; (8004a1c <main+0x110>)
 800496e:	f006 f8d9 	bl	800ab24 <puts>
	  	  	DHT_GetData(&DHT11_Data);
 8004972:	482b      	ldr	r0, [pc, #172]	; (8004a20 <main+0x114>)
 8004974:	f7fc fb1e 	bl	8000fb4 <DHT_GetData>
		  	Temperature = DHT11_Data.Temperature;
 8004978:	4b29      	ldr	r3, [pc, #164]	; (8004a20 <main+0x114>)
 800497a:	edd3 7a00 	vldr	s15, [r3]
 800497e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004982:	edc7 7a01 	vstr	s15, [r7, #4]
 8004986:	793b      	ldrb	r3, [r7, #4]
 8004988:	b2da      	uxtb	r2, r3
 800498a:	4b26      	ldr	r3, [pc, #152]	; (8004a24 <main+0x118>)
 800498c:	701a      	strb	r2, [r3, #0]
		  	Humidity = DHT11_Data.Humidity;
 800498e:	4b24      	ldr	r3, [pc, #144]	; (8004a20 <main+0x114>)
 8004990:	edd3 7a01 	vldr	s15, [r3, #4]
 8004994:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004998:	edc7 7a01 	vstr	s15, [r7, #4]
 800499c:	793b      	ldrb	r3, [r7, #4]
 800499e:	b2da      	uxtb	r2, r3
 80049a0:	4b21      	ldr	r3, [pc, #132]	; (8004a28 <main+0x11c>)
 80049a2:	701a      	strb	r2, [r3, #0]
		  	printf("Temperature: %d C, Humidity: %d%%\r\n", Temperature, Humidity);
 80049a4:	4b1f      	ldr	r3, [pc, #124]	; (8004a24 <main+0x118>)
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	4619      	mov	r1, r3
 80049aa:	4b1f      	ldr	r3, [pc, #124]	; (8004a28 <main+0x11c>)
 80049ac:	781b      	ldrb	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	481e      	ldr	r0, [pc, #120]	; (8004a2c <main+0x120>)
 80049b2:	f006 f831 	bl	800aa18 <iprintf>

	        // wait for 1 second
		  	HAL_Delay(1000);
 80049b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049ba:	f000 ffd1 	bl	8005960 <HAL_Delay>
	        //Read Ultrasonic Sensor
	       	distance = Read_Ultrasonic_Distance();
 80049be:	f000 fac3 	bl	8004f48 <Read_Ultrasonic_Distance>
 80049c2:	4603      	mov	r3, r0
 80049c4:	4a1a      	ldr	r2, [pc, #104]	; (8004a30 <main+0x124>)
 80049c6:	6013      	str	r3, [r2, #0]
	       	printf("Distance: %lu cm\n", distance);
 80049c8:	4b19      	ldr	r3, [pc, #100]	; (8004a30 <main+0x124>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4619      	mov	r1, r3
 80049ce:	4819      	ldr	r0, [pc, #100]	; (8004a34 <main+0x128>)
 80049d0:	f006 f822 	bl	800aa18 <iprintf>

	       	sdk_handler.data7022[2] = distance;
 80049d4:	4b16      	ldr	r3, [pc, #88]	; (8004a30 <main+0x124>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	461a      	mov	r2, r3
 80049da:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <main+0x104>)
 80049dc:	f8c3 2e74 	str.w	r2, [r3, #3700]	; 0xe74
	       	sdk_handler.data7022[3] = Temperature;
 80049e0:	4b10      	ldr	r3, [pc, #64]	; (8004a24 <main+0x118>)
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	461a      	mov	r2, r3
 80049e6:	4b0a      	ldr	r3, [pc, #40]	; (8004a10 <main+0x104>)
 80049e8:	f8c3 2e78 	str.w	r2, [r3, #3704]	; 0xe78
	       	sdk_handler.data7022[4] = Humidity;
 80049ec:	4b0e      	ldr	r3, [pc, #56]	; (8004a28 <main+0x11c>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	461a      	mov	r2, r3
 80049f2:	4b07      	ldr	r3, [pc, #28]	; (8004a10 <main+0x104>)
 80049f4:	f8c3 2e7c 	str.w	r2, [r3, #3708]	; 0xe7c
//
//		  	  writeLog(&sdk_handler, LOG_DEBUG, sdk_handler.log_content, true);
//
//		  	  HAL_Delay(1000);

	       	connectToPlatform(&sdk_handler);
 80049f8:	4805      	ldr	r0, [pc, #20]	; (8004a10 <main+0x104>)
 80049fa:	f7fc ffef 	bl	80019dc <connectToPlatform>
	  	  	printf("Start to read DHT\r\n");
 80049fe:	e7b5      	b.n	800496c <main+0x60>
 8004a00:	20000100 	.word	0x20000100
 8004a04:	20000278 	.word	0x20000278
 8004a08:	20000170 	.word	0x20000170
 8004a0c:	200001f4 	.word	0x200001f4
 8004a10:	20000308 	.word	0x20000308
 8004a14:	200014b8 	.word	0x200014b8
 8004a18:	0800d430 	.word	0x0800d430
 8004a1c:	0800d438 	.word	0x0800d438
 8004a20:	200014bc 	.word	0x200014bc
 8004a24:	200014c4 	.word	0x200014c4
 8004a28:	200014c5 	.word	0x200014c5
 8004a2c:	0800d44c 	.word	0x0800d44c
 8004a30:	200014c8 	.word	0x200014c8
 8004a34:	0800d470 	.word	0x0800d470

08004a38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b096      	sub	sp, #88	; 0x58
 8004a3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a3e:	f107 0314 	add.w	r3, r7, #20
 8004a42:	2244      	movs	r2, #68	; 0x44
 8004a44:	2100      	movs	r1, #0
 8004a46:	4618      	mov	r0, r3
 8004a48:	f005 fefe 	bl	800a848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a4c:	463b      	mov	r3, r7
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	605a      	str	r2, [r3, #4]
 8004a54:	609a      	str	r2, [r3, #8]
 8004a56:	60da      	str	r2, [r3, #12]
 8004a58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004a5a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a5e:	f001 ff09 	bl	8006874 <HAL_PWREx_ControlVoltageScaling>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8004a68:	f000 fb36 	bl	80050d8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004a6c:	230a      	movs	r3, #10
 8004a6e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a74:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a76:	2310      	movs	r3, #16
 8004a78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a82:	f107 0314 	add.w	r3, r7, #20
 8004a86:	4618      	mov	r0, r3
 8004a88:	f001 ff92 	bl	80069b0 <HAL_RCC_OscConfig>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8004a92:	f000 fb21 	bl	80050d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a96:	230f      	movs	r3, #15
 8004a98:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004aaa:	463b      	mov	r3, r7
 8004aac:	2100      	movs	r1, #0
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f002 fb92 	bl	80071d8 <HAL_RCC_ClockConfig>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <SystemClock_Config+0x86>
  {
    Error_Handler();
 8004aba:	f000 fb0d 	bl	80050d8 <Error_Handler>
  }
}
 8004abe:	bf00      	nop
 8004ac0:	3758      	adds	r7, #88	; 0x58
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
	...

08004ac8 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */
//
  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <MX_IWDG_Init+0x34>)
 8004ace:	4a0c      	ldr	r2, [pc, #48]	; (8004b00 <MX_IWDG_Init+0x38>)
 8004ad0:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <MX_IWDG_Init+0x34>)
 8004ad4:	2206      	movs	r2, #6
 8004ad6:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8004ad8:	4b08      	ldr	r3, [pc, #32]	; (8004afc <MX_IWDG_Init+0x34>)
 8004ada:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004ade:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8004ae0:	4b06      	ldr	r3, [pc, #24]	; (8004afc <MX_IWDG_Init+0x34>)
 8004ae2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004ae6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8004ae8:	4804      	ldr	r0, [pc, #16]	; (8004afc <MX_IWDG_Init+0x34>)
 8004aea:	f001 fc7e 	bl	80063ea <HAL_IWDG_Init>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8004af4:	f000 faf0 	bl	80050d8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */
//
  /* USER CODE END IWDG_Init 2 */

}
 8004af8:	bf00      	nop
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	200000b8 	.word	0x200000b8
 8004b00:	40003000 	.word	0x40003000

08004b04 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */
//
  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8004b08:	4b12      	ldr	r3, [pc, #72]	; (8004b54 <MX_LPTIM1_Init+0x50>)
 8004b0a:	4a13      	ldr	r2, [pc, #76]	; (8004b58 <MX_LPTIM1_Init+0x54>)
 8004b0c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8004b0e:	4b11      	ldr	r3, [pc, #68]	; (8004b54 <MX_LPTIM1_Init+0x50>)
 8004b10:	2200      	movs	r2, #0
 8004b12:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8004b14:	4b0f      	ldr	r3, [pc, #60]	; (8004b54 <MX_LPTIM1_Init+0x50>)
 8004b16:	2200      	movs	r2, #0
 8004b18:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8004b1a:	4b0e      	ldr	r3, [pc, #56]	; (8004b54 <MX_LPTIM1_Init+0x50>)
 8004b1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b20:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8004b22:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <MX_LPTIM1_Init+0x50>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8004b28:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <MX_LPTIM1_Init+0x50>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8004b2e:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <MX_LPTIM1_Init+0x50>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8004b34:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <MX_LPTIM1_Init+0x50>)
 8004b36:	2200      	movs	r2, #0
 8004b38:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8004b3a:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <MX_LPTIM1_Init+0x50>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8004b40:	4804      	ldr	r0, [pc, #16]	; (8004b54 <MX_LPTIM1_Init+0x50>)
 8004b42:	f001 fcb1 	bl	80064a8 <HAL_LPTIM_Init>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d001      	beq.n	8004b50 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 8004b4c:	f000 fac4 	bl	80050d8 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */
//
  /* USER CODE END LPTIM1_Init 2 */

}
 8004b50:	bf00      	nop
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	200000c8 	.word	0x200000c8
 8004b58:	40007c00 	.word	0x40007c00

08004b5c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b092      	sub	sp, #72	; 0x48
 8004b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */
//
  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004b62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
 8004b6a:	605a      	str	r2, [r3, #4]
 8004b6c:	609a      	str	r2, [r3, #8]
 8004b6e:	60da      	str	r2, [r3, #12]
 8004b70:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004b72:	2300      	movs	r3, #0
 8004b74:	633b      	str	r3, [r7, #48]	; 0x30
  RTC_AlarmTypeDef sAlarm = {0};
 8004b76:	1d3b      	adds	r3, r7, #4
 8004b78:	222c      	movs	r2, #44	; 0x2c
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f005 fe63 	bl	800a848 <memset>
//
  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004b82:	4b3c      	ldr	r3, [pc, #240]	; (8004c74 <MX_RTC_Init+0x118>)
 8004b84:	4a3c      	ldr	r2, [pc, #240]	; (8004c78 <MX_RTC_Init+0x11c>)
 8004b86:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004b88:	4b3a      	ldr	r3, [pc, #232]	; (8004c74 <MX_RTC_Init+0x118>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004b8e:	4b39      	ldr	r3, [pc, #228]	; (8004c74 <MX_RTC_Init+0x118>)
 8004b90:	227f      	movs	r2, #127	; 0x7f
 8004b92:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004b94:	4b37      	ldr	r3, [pc, #220]	; (8004c74 <MX_RTC_Init+0x118>)
 8004b96:	22ff      	movs	r2, #255	; 0xff
 8004b98:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004b9a:	4b36      	ldr	r3, [pc, #216]	; (8004c74 <MX_RTC_Init+0x118>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004ba0:	4b34      	ldr	r3, [pc, #208]	; (8004c74 <MX_RTC_Init+0x118>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004ba6:	4b33      	ldr	r3, [pc, #204]	; (8004c74 <MX_RTC_Init+0x118>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004bac:	4b31      	ldr	r3, [pc, #196]	; (8004c74 <MX_RTC_Init+0x118>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004bb2:	4830      	ldr	r0, [pc, #192]	; (8004c74 <MX_RTC_Init+0x118>)
 8004bb4:	f003 f84e 	bl	8007c54 <HAL_RTC_Init>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8004bbe:	f000 fa8b 	bl	80050d8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  sTime.Minutes = 0x0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  sTime.Seconds = 0x0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004bdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004be0:	2201      	movs	r2, #1
 8004be2:	4619      	mov	r1, r3
 8004be4:	4823      	ldr	r0, [pc, #140]	; (8004c74 <MX_RTC_Init+0x118>)
 8004be6:	f003 f8b0 	bl	8007d4a <HAL_RTC_SetTime>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <MX_RTC_Init+0x98>
  {
    Error_Handler();
 8004bf0:	f000 fa72 	bl	80050d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sDate.Month = RTC_MONTH_JANUARY;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sDate.Date = 0x1;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sDate.Year = 0x0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004c0c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004c10:	2201      	movs	r2, #1
 8004c12:	4619      	mov	r1, r3
 8004c14:	4817      	ldr	r0, [pc, #92]	; (8004c74 <MX_RTC_Init+0x118>)
 8004c16:	f003 f935 	bl	8007e84 <HAL_RTC_SetDate>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d001      	beq.n	8004c24 <MX_RTC_Init+0xc8>
  {
    Error_Handler();
 8004c20:	f000 fa5a 	bl	80050d8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8004c24:	2300      	movs	r3, #0
 8004c26:	713b      	strb	r3, [r7, #4]
  sAlarm.AlarmTime.Minutes = 0x0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	717b      	strb	r3, [r7, #5]
  sAlarm.AlarmTime.Seconds = 0x0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	71bb      	strb	r3, [r7, #6]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8004c30:	2300      	movs	r3, #0
 8004c32:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004c34:	2300      	movs	r3, #0
 8004c36:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8004c3c:	2300      	movs	r3, #0
 8004c3e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8004c44:	2300      	movs	r3, #0
 8004c46:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmDateWeekDay = 0x1;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sAlarm.Alarm = RTC_ALARM_A;
 8004c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8004c54:	1d3b      	adds	r3, r7, #4
 8004c56:	2201      	movs	r2, #1
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4806      	ldr	r0, [pc, #24]	; (8004c74 <MX_RTC_Init+0x118>)
 8004c5c:	f003 f99a 	bl	8007f94 <HAL_RTC_SetAlarm_IT>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <MX_RTC_Init+0x10e>
  {
    Error_Handler();
 8004c66:	f000 fa37 	bl	80050d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */
//
  /* USER CODE END RTC_Init 2 */

}
 8004c6a:	bf00      	nop
 8004c6c:	3748      	adds	r7, #72	; 0x48
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20000100 	.word	0x20000100
 8004c78:	40002800 	.word	0x40002800

08004c7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08c      	sub	sp, #48	; 0x30
 8004c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004c82:	f107 0320 	add.w	r3, r7, #32
 8004c86:	2200      	movs	r2, #0
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	605a      	str	r2, [r3, #4]
 8004c8c:	609a      	str	r2, [r3, #8]
 8004c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c90:	f107 0314 	add.w	r3, r7, #20
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8004c9c:	1d3b      	adds	r3, r7, #4
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	601a      	str	r2, [r3, #0]
 8004ca2:	605a      	str	r2, [r3, #4]
 8004ca4:	609a      	str	r2, [r3, #8]
 8004ca6:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004ca8:	4b2b      	ldr	r3, [pc, #172]	; (8004d58 <MX_TIM2_Init+0xdc>)
 8004caa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004cae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8004cb0:	4b29      	ldr	r3, [pc, #164]	; (8004d58 <MX_TIM2_Init+0xdc>)
 8004cb2:	220f      	movs	r2, #15
 8004cb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004cb6:	4b28      	ldr	r3, [pc, #160]	; (8004d58 <MX_TIM2_Init+0xdc>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8004cbc:	4b26      	ldr	r3, [pc, #152]	; (8004d58 <MX_TIM2_Init+0xdc>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004cc2:	4b25      	ldr	r3, [pc, #148]	; (8004d58 <MX_TIM2_Init+0xdc>)
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004cc8:	4b23      	ldr	r3, [pc, #140]	; (8004d58 <MX_TIM2_Init+0xdc>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004cce:	4822      	ldr	r0, [pc, #136]	; (8004d58 <MX_TIM2_Init+0xdc>)
 8004cd0:	f003 fbae 	bl	8008430 <HAL_TIM_Base_Init>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8004cda:	f000 f9fd 	bl	80050d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004cde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ce2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004ce4:	f107 0320 	add.w	r3, r7, #32
 8004ce8:	4619      	mov	r1, r3
 8004cea:	481b      	ldr	r0, [pc, #108]	; (8004d58 <MX_TIM2_Init+0xdc>)
 8004cec:	f003 fe97 	bl	8008a1e <HAL_TIM_ConfigClockSource>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d001      	beq.n	8004cfa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8004cf6:	f000 f9ef 	bl	80050d8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8004cfa:	4817      	ldr	r0, [pc, #92]	; (8004d58 <MX_TIM2_Init+0xdc>)
 8004cfc:	f003 fc73 	bl	80085e6 <HAL_TIM_IC_Init>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004d06:	f000 f9e7 	bl	80050d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004d12:	f107 0314 	add.w	r3, r7, #20
 8004d16:	4619      	mov	r1, r3
 8004d18:	480f      	ldr	r0, [pc, #60]	; (8004d58 <MX_TIM2_Init+0xdc>)
 8004d1a:	f004 f97b 	bl	8009014 <HAL_TIMEx_MasterConfigSynchronization>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d001      	beq.n	8004d28 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8004d24:	f000 f9d8 	bl	80050d8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8004d30:	2300      	movs	r3, #0
 8004d32:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8004d34:	2300      	movs	r3, #0
 8004d36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8004d38:	1d3b      	adds	r3, r7, #4
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	4806      	ldr	r0, [pc, #24]	; (8004d58 <MX_TIM2_Init+0xdc>)
 8004d40:	f003 fdd1 	bl	80088e6 <HAL_TIM_IC_ConfigChannel>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8004d4a:	f000 f9c5 	bl	80050d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004d4e:	bf00      	nop
 8004d50:	3730      	adds	r7, #48	; 0x30
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000124 	.word	0x20000124

08004d5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */
//
  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004d60:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <MX_USART1_UART_Init+0x58>)
 8004d62:	4a15      	ldr	r2, [pc, #84]	; (8004db8 <MX_USART1_UART_Init+0x5c>)
 8004d64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004d66:	4b13      	ldr	r3, [pc, #76]	; (8004db4 <MX_USART1_UART_Init+0x58>)
 8004d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004d6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004d6e:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <MX_USART1_UART_Init+0x58>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004d74:	4b0f      	ldr	r3, [pc, #60]	; (8004db4 <MX_USART1_UART_Init+0x58>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004d7a:	4b0e      	ldr	r3, [pc, #56]	; (8004db4 <MX_USART1_UART_Init+0x58>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004d80:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <MX_USART1_UART_Init+0x58>)
 8004d82:	220c      	movs	r2, #12
 8004d84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004d86:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <MX_USART1_UART_Init+0x58>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004d8c:	4b09      	ldr	r3, [pc, #36]	; (8004db4 <MX_USART1_UART_Init+0x58>)
 8004d8e:	2200      	movs	r2, #0
 8004d90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004d92:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <MX_USART1_UART_Init+0x58>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004d98:	4b06      	ldr	r3, [pc, #24]	; (8004db4 <MX_USART1_UART_Init+0x58>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004d9e:	4805      	ldr	r0, [pc, #20]	; (8004db4 <MX_USART1_UART_Init+0x58>)
 8004da0:	f004 f9bc 	bl	800911c <HAL_UART_Init>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004daa:	f000 f995 	bl	80050d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
//
  /* USER CODE END USART1_Init 2 */

}
 8004dae:	bf00      	nop
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	20000170 	.word	0x20000170
 8004db8:	40013800 	.word	0x40013800

08004dbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
//
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004dc0:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <MX_USART2_UART_Init+0x58>)
 8004dc2:	4a15      	ldr	r2, [pc, #84]	; (8004e18 <MX_USART2_UART_Init+0x5c>)
 8004dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004dc6:	4b13      	ldr	r3, [pc, #76]	; (8004e14 <MX_USART2_UART_Init+0x58>)
 8004dc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004dce:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <MX_USART2_UART_Init+0x58>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004dd4:	4b0f      	ldr	r3, [pc, #60]	; (8004e14 <MX_USART2_UART_Init+0x58>)
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004dda:	4b0e      	ldr	r3, [pc, #56]	; (8004e14 <MX_USART2_UART_Init+0x58>)
 8004ddc:	2200      	movs	r2, #0
 8004dde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004de0:	4b0c      	ldr	r3, [pc, #48]	; (8004e14 <MX_USART2_UART_Init+0x58>)
 8004de2:	220c      	movs	r2, #12
 8004de4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004de6:	4b0b      	ldr	r3, [pc, #44]	; (8004e14 <MX_USART2_UART_Init+0x58>)
 8004de8:	2200      	movs	r2, #0
 8004dea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004dec:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <MX_USART2_UART_Init+0x58>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004df2:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <MX_USART2_UART_Init+0x58>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004df8:	4b06      	ldr	r3, [pc, #24]	; (8004e14 <MX_USART2_UART_Init+0x58>)
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004dfe:	4805      	ldr	r0, [pc, #20]	; (8004e14 <MX_USART2_UART_Init+0x58>)
 8004e00:	f004 f98c 	bl	800911c <HAL_UART_Init>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004e0a:	f000 f965 	bl	80050d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
//
  /* USER CODE END USART2_Init 2 */

}
 8004e0e:	bf00      	nop
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	200001f4 	.word	0x200001f4
 8004e18:	40004400 	.word	0x40004400

08004e1c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004e22:	4b10      	ldr	r3, [pc, #64]	; (8004e64 <MX_DMA_Init+0x48>)
 8004e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e26:	4a0f      	ldr	r2, [pc, #60]	; (8004e64 <MX_DMA_Init+0x48>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	6493      	str	r3, [r2, #72]	; 0x48
 8004e2e:	4b0d      	ldr	r3, [pc, #52]	; (8004e64 <MX_DMA_Init+0x48>)
 8004e30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	607b      	str	r3, [r7, #4]
 8004e38:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2102      	movs	r1, #2
 8004e3e:	200f      	movs	r0, #15
 8004e40:	f000 fe6a 	bl	8005b18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8004e44:	200f      	movs	r0, #15
 8004e46:	f000 fe83 	bl	8005b50 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	2010      	movs	r0, #16
 8004e50:	f000 fe62 	bl	8005b18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8004e54:	2010      	movs	r0, #16
 8004e56:	f000 fe7b 	bl	8005b50 <HAL_NVIC_EnableIRQ>

}
 8004e5a:	bf00      	nop
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	40021000 	.word	0x40021000

08004e68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b088      	sub	sp, #32
 8004e6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e6e:	f107 030c 	add.w	r3, r7, #12
 8004e72:	2200      	movs	r2, #0
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	605a      	str	r2, [r3, #4]
 8004e78:	609a      	str	r2, [r3, #8]
 8004e7a:	60da      	str	r2, [r3, #12]
 8004e7c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e7e:	4b30      	ldr	r3, [pc, #192]	; (8004f40 <MX_GPIO_Init+0xd8>)
 8004e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e82:	4a2f      	ldr	r2, [pc, #188]	; (8004f40 <MX_GPIO_Init+0xd8>)
 8004e84:	f043 0301 	orr.w	r3, r3, #1
 8004e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e8a:	4b2d      	ldr	r3, [pc, #180]	; (8004f40 <MX_GPIO_Init+0xd8>)
 8004e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	60bb      	str	r3, [r7, #8]
 8004e94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e96:	4b2a      	ldr	r3, [pc, #168]	; (8004f40 <MX_GPIO_Init+0xd8>)
 8004e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e9a:	4a29      	ldr	r2, [pc, #164]	; (8004f40 <MX_GPIO_Init+0xd8>)
 8004e9c:	f043 0302 	orr.w	r3, r3, #2
 8004ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ea2:	4b27      	ldr	r3, [pc, #156]	; (8004f40 <MX_GPIO_Init+0xd8>)
 8004ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	607b      	str	r3, [r7, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Trigger_Ultra_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8004eae:	2200      	movs	r2, #0
 8004eb0:	21a0      	movs	r1, #160	; 0xa0
 8004eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004eb6:	f001 fa5d 	bl	8006374 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8004eba:	2310      	movs	r3, #16
 8004ebc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8004ec6:	f107 030c 	add.w	r3, r7, #12
 8004eca:	4619      	mov	r1, r3
 8004ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ed0:	f001 f8ce 	bl	8006070 <HAL_GPIO_Init>

  /*Configure GPIO pins : Trigger_Ultra_Pin PA7 */
  GPIO_InitStruct.Pin = Trigger_Ultra_Pin|GPIO_PIN_7;
 8004ed4:	23a0      	movs	r3, #160	; 0xa0
 8004ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ee4:	f107 030c 	add.w	r3, r7, #12
 8004ee8:	4619      	mov	r1, r3
 8004eea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004eee:	f001 f8bf 	bl	8006070 <HAL_GPIO_Init>

  /*Configure GPIO pin : Echo_Ultra_Pin */
  GPIO_InitStruct.Pin = Echo_Ultra_Pin;
 8004ef2:	2340      	movs	r3, #64	; 0x40
 8004ef4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004efa:	2300      	movs	r3, #0
 8004efc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Echo_Ultra_GPIO_Port, &GPIO_InitStruct);
 8004efe:	f107 030c 	add.w	r3, r7, #12
 8004f02:	4619      	mov	r1, r3
 8004f04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f08:	f001 f8b2 	bl	8006070 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004f10:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8004f14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f16:	2300      	movs	r3, #0
 8004f18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f1a:	f107 030c 	add.w	r3, r7, #12
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4808      	ldr	r0, [pc, #32]	; (8004f44 <MX_GPIO_Init+0xdc>)
 8004f22:	f001 f8a5 	bl	8006070 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8004f26:	2200      	movs	r2, #0
 8004f28:	2100      	movs	r1, #0
 8004f2a:	2006      	movs	r0, #6
 8004f2c:	f000 fdf4 	bl	8005b18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8004f30:	2006      	movs	r0, #6
 8004f32:	f000 fe0d 	bl	8005b50 <HAL_NVIC_EnableIRQ>

}
 8004f36:	bf00      	nop
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40021000 	.word	0x40021000
 8004f44:	48000400 	.word	0x48000400

08004f48 <Read_Ultrasonic_Distance>:
//    htim4.Init.Period = 0xFFFFFFFF; // Maximum period to measure long distances
//    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
//    HAL_TIM_Base_Init(&htim4);
}

uint32_t Read_Ultrasonic_Distance(void) {
 8004f48:	b5b0      	push	{r4, r5, r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(TRIGGER_PORT, TRIGGER_PIN, GPIO_PIN_RESET);
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2120      	movs	r1, #32
 8004f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f56:	f001 fa0d 	bl	8006374 <HAL_GPIO_WritePin>
	usDelay(3);
 8004f5a:	2003      	movs	r0, #3
 8004f5c:	f000 f872 	bl	8005044 <usDelay>
    // Send a 10us pulse to trigger the ultrasonic sensor
    HAL_GPIO_WritePin(TRIGGER_PORT, TRIGGER_PIN, GPIO_PIN_SET);
 8004f60:	2201      	movs	r2, #1
 8004f62:	2120      	movs	r1, #32
 8004f64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f68:	f001 fa04 	bl	8006374 <HAL_GPIO_WritePin>
    usDelay(10);
 8004f6c:	200a      	movs	r0, #10
 8004f6e:	f000 f869 	bl	8005044 <usDelay>
    HAL_GPIO_WritePin(TRIGGER_PORT, TRIGGER_PIN, GPIO_PIN_RESET);
 8004f72:	2200      	movs	r2, #0
 8004f74:	2120      	movs	r1, #32
 8004f76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f7a:	f001 f9fb 	bl	8006374 <HAL_GPIO_WritePin>

    // Wait for the rising edge of the echo signal
    while (HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_RESET);
 8004f7e:	bf00      	nop
 8004f80:	2140      	movs	r1, #64	; 0x40
 8004f82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f86:	f001 f9dd 	bl	8006344 <HAL_GPIO_ReadPin>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f7      	beq.n	8004f80 <Read_Ultrasonic_Distance+0x38>

    // Start measuring ECHO pulse width in usec
    		uint32_t numTicks = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	607b      	str	r3, [r7, #4]
    		while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET)
 8004f94:	e005      	b.n	8004fa2 <Read_Ultrasonic_Distance+0x5a>
    		{
    			numTicks++;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	607b      	str	r3, [r7, #4]
    			usDelay(2); //2.8usec
 8004f9c:	2002      	movs	r0, #2
 8004f9e:	f000 f851 	bl	8005044 <usDelay>
    		while(HAL_GPIO_ReadPin(ECHO_PORT, ECHO_PIN) == GPIO_PIN_SET)
 8004fa2:	2140      	movs	r1, #64	; 0x40
 8004fa4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fa8:	f001 f9cc 	bl	8006344 <HAL_GPIO_ReadPin>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d0f1      	beq.n	8004f96 <Read_Ultrasonic_Distance+0x4e>
    		};

    // Estimate distance in cm
    		distance = (numTicks + 0.0f)*3*2.8*speedOfSound/2;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	ee07 3a90 	vmov	s15, r3
 8004fb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fbc:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005038 <Read_Ultrasonic_Distance+0xf0>
 8004fc0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004fc4:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8004fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004fcc:	ee17 0a90 	vmov	r0, s15
 8004fd0:	f7fb faba 	bl	8000548 <__aeabi_f2d>
 8004fd4:	a316      	add	r3, pc, #88	; (adr r3, 8005030 <Read_Ultrasonic_Distance+0xe8>)
 8004fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fda:	f7fb fb0d 	bl	80005f8 <__aeabi_dmul>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4614      	mov	r4, r2
 8004fe4:	461d      	mov	r5, r3
 8004fe6:	4b15      	ldr	r3, [pc, #84]	; (800503c <Read_Ultrasonic_Distance+0xf4>)
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fb faad 	bl	8000548 <__aeabi_f2d>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4620      	mov	r0, r4
 8004ff4:	4629      	mov	r1, r5
 8004ff6:	f7fb faff 	bl	80005f8 <__aeabi_dmul>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4610      	mov	r0, r2
 8005000:	4619      	mov	r1, r3
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800500a:	f7fb fc1f 	bl	800084c <__aeabi_ddiv>
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4610      	mov	r0, r2
 8005014:	4619      	mov	r1, r3
 8005016:	f7fb fd01 	bl	8000a1c <__aeabi_d2uiz>
 800501a:	4603      	mov	r3, r0
 800501c:	4a08      	ldr	r2, [pc, #32]	; (8005040 <Read_Ultrasonic_Distance+0xf8>)
 800501e:	6013      	str	r3, [r2, #0]
    return distance;
 8005020:	4b07      	ldr	r3, [pc, #28]	; (8005040 <Read_Ultrasonic_Distance+0xf8>)
 8005022:	681b      	ldr	r3, [r3, #0]
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bdb0      	pop	{r4, r5, r7, pc}
 800502c:	f3af 8000 	nop.w
 8005030:	66666666 	.word	0x66666666
 8005034:	40066666 	.word	0x40066666
 8005038:	00000000 	.word	0x00000000
 800503c:	3d0c7e28 	.word	0x3d0c7e28
 8005040:	200014c8 	.word	0x200014c8

08005044 <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d801      	bhi.n	8005056 <usDelay+0x12>
 8005052:	2302      	movs	r3, #2
 8005054:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 8005056:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3b01      	subs	r3, #1
 800505e:	62d3      	str	r3, [r2, #44]	; 0x2c
	usTIM->EGR = 1; 		/*Re-initialises the timer*/
 8005060:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005064:	2201      	movs	r2, #1
 8005066:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8005068:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005072:	f023 0301 	bic.w	r3, r3, #1
 8005076:	6113      	str	r3, [r2, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8005078:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	6013      	str	r3, [r2, #0]
	while((usTIM->SR&0x0001) != 1);
 8005088:	bf00      	nop
 800508a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	f003 0301 	and.w	r3, r3, #1
 8005094:	2b01      	cmp	r3, #1
 8005096:	d1f8      	bne.n	800508a <usDelay+0x46>
	usTIM->SR &= ~(0x0001);
 8005098:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80050a2:	f023 0301 	bic.w	r3, r3, #1
 80050a6:	6113      	str	r3, [r2, #16]
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
//				HAL_PWR_DisableSleepOnExit();
//			}
//
//		}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a04      	ldr	r2, [pc, #16]	; (80050d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d101      	bne.n	80050ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80050c6:	f000 fc2b 	bl	8005920 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	40012c00 	.word	0x40012c00

080050d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80050dc:	b672      	cpsid	i
}
 80050de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80050e0:	e7fe      	b.n	80050e0 <Error_Handler+0x8>
	...

080050e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80050ea:	4b0f      	ldr	r3, [pc, #60]	; (8005128 <HAL_MspInit+0x44>)
 80050ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050ee:	4a0e      	ldr	r2, [pc, #56]	; (8005128 <HAL_MspInit+0x44>)
 80050f0:	f043 0301 	orr.w	r3, r3, #1
 80050f4:	6613      	str	r3, [r2, #96]	; 0x60
 80050f6:	4b0c      	ldr	r3, [pc, #48]	; (8005128 <HAL_MspInit+0x44>)
 80050f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	607b      	str	r3, [r7, #4]
 8005100:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005102:	4b09      	ldr	r3, [pc, #36]	; (8005128 <HAL_MspInit+0x44>)
 8005104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005106:	4a08      	ldr	r2, [pc, #32]	; (8005128 <HAL_MspInit+0x44>)
 8005108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510c:	6593      	str	r3, [r2, #88]	; 0x58
 800510e:	4b06      	ldr	r3, [pc, #24]	; (8005128 <HAL_MspInit+0x44>)
 8005110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005116:	603b      	str	r3, [r7, #0]
 8005118:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800511a:	bf00      	nop
 800511c:	370c      	adds	r7, #12
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	40021000 	.word	0x40021000

0800512c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b098      	sub	sp, #96	; 0x60
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005134:	f107 030c 	add.w	r3, r7, #12
 8005138:	2254      	movs	r2, #84	; 0x54
 800513a:	2100      	movs	r1, #0
 800513c:	4618      	mov	r0, r3
 800513e:	f005 fb83 	bl	800a848 <memset>
  if(hlptim->Instance==LPTIM1)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a15      	ldr	r2, [pc, #84]	; (800519c <HAL_LPTIM_MspInit+0x70>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d122      	bne.n	8005192 <HAL_LPTIM_MspInit+0x66>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800514c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005150:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 8005152:	2300      	movs	r3, #0
 8005154:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005156:	f107 030c 	add.w	r3, r7, #12
 800515a:	4618      	mov	r0, r3
 800515c:	f002 fa92 	bl	8007684 <HAL_RCCEx_PeriphCLKConfig>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d001      	beq.n	800516a <HAL_LPTIM_MspInit+0x3e>
    {
      Error_Handler();
 8005166:	f7ff ffb7 	bl	80050d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800516a:	4b0d      	ldr	r3, [pc, #52]	; (80051a0 <HAL_LPTIM_MspInit+0x74>)
 800516c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516e:	4a0c      	ldr	r2, [pc, #48]	; (80051a0 <HAL_LPTIM_MspInit+0x74>)
 8005170:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005174:	6593      	str	r3, [r2, #88]	; 0x58
 8005176:	4b0a      	ldr	r3, [pc, #40]	; (80051a0 <HAL_LPTIM_MspInit+0x74>)
 8005178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800517a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800517e:	60bb      	str	r3, [r7, #8]
 8005180:	68bb      	ldr	r3, [r7, #8]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8005182:	2200      	movs	r2, #0
 8005184:	2100      	movs	r1, #0
 8005186:	2041      	movs	r0, #65	; 0x41
 8005188:	f000 fcc6 	bl	8005b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800518c:	2041      	movs	r0, #65	; 0x41
 800518e:	f000 fcdf 	bl	8005b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8005192:	bf00      	nop
 8005194:	3760      	adds	r7, #96	; 0x60
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40007c00 	.word	0x40007c00
 80051a0:	40021000 	.word	0x40021000

080051a4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b098      	sub	sp, #96	; 0x60
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80051ac:	f107 030c 	add.w	r3, r7, #12
 80051b0:	2254      	movs	r2, #84	; 0x54
 80051b2:	2100      	movs	r1, #0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f005 fb47 	bl	800a848 <memset>
  if(hrtc->Instance==RTC)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a13      	ldr	r2, [pc, #76]	; (800520c <HAL_RTC_MspInit+0x68>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d11f      	bne.n	8005204 <HAL_RTC_MspInit+0x60>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80051c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80051c8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80051ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051ce:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051d0:	f107 030c 	add.w	r3, r7, #12
 80051d4:	4618      	mov	r0, r3
 80051d6:	f002 fa55 	bl	8007684 <HAL_RCCEx_PeriphCLKConfig>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80051e0:	f7ff ff7a 	bl	80050d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80051e4:	4b0a      	ldr	r3, [pc, #40]	; (8005210 <HAL_RTC_MspInit+0x6c>)
 80051e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ea:	4a09      	ldr	r2, [pc, #36]	; (8005210 <HAL_RTC_MspInit+0x6c>)
 80051ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80051f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80051f4:	2200      	movs	r2, #0
 80051f6:	2100      	movs	r1, #0
 80051f8:	2029      	movs	r0, #41	; 0x29
 80051fa:	f000 fc8d 	bl	8005b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80051fe:	2029      	movs	r0, #41	; 0x29
 8005200:	f000 fca6 	bl	8005b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005204:	bf00      	nop
 8005206:	3760      	adds	r7, #96	; 0x60
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}
 800520c:	40002800 	.word	0x40002800
 8005210:	40021000 	.word	0x40021000

08005214 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b08a      	sub	sp, #40	; 0x28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800521c:	f107 0314 	add.w	r3, r7, #20
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
 8005224:	605a      	str	r2, [r3, #4]
 8005226:	609a      	str	r2, [r3, #8]
 8005228:	60da      	str	r2, [r3, #12]
 800522a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005234:	d130      	bne.n	8005298 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005236:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <HAL_TIM_Base_MspInit+0x8c>)
 8005238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800523a:	4a19      	ldr	r2, [pc, #100]	; (80052a0 <HAL_TIM_Base_MspInit+0x8c>)
 800523c:	f043 0301 	orr.w	r3, r3, #1
 8005240:	6593      	str	r3, [r2, #88]	; 0x58
 8005242:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <HAL_TIM_Base_MspInit+0x8c>)
 8005244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005246:	f003 0301 	and.w	r3, r3, #1
 800524a:	613b      	str	r3, [r7, #16]
 800524c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800524e:	4b14      	ldr	r3, [pc, #80]	; (80052a0 <HAL_TIM_Base_MspInit+0x8c>)
 8005250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005252:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <HAL_TIM_Base_MspInit+0x8c>)
 8005254:	f043 0301 	orr.w	r3, r3, #1
 8005258:	64d3      	str	r3, [r2, #76]	; 0x4c
 800525a:	4b11      	ldr	r3, [pc, #68]	; (80052a0 <HAL_TIM_Base_MspInit+0x8c>)
 800525c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	60fb      	str	r3, [r7, #12]
 8005264:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005266:	2301      	movs	r3, #1
 8005268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800526a:	2302      	movs	r3, #2
 800526c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800526e:	2300      	movs	r3, #0
 8005270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005272:	2300      	movs	r3, #0
 8005274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005276:	2301      	movs	r3, #1
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800527a:	f107 0314 	add.w	r3, r7, #20
 800527e:	4619      	mov	r1, r3
 8005280:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005284:	f000 fef4 	bl	8006070 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8005288:	2200      	movs	r2, #0
 800528a:	2100      	movs	r1, #0
 800528c:	201c      	movs	r0, #28
 800528e:	f000 fc43 	bl	8005b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005292:	201c      	movs	r0, #28
 8005294:	f000 fc5c 	bl	8005b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8005298:	bf00      	nop
 800529a:	3728      	adds	r7, #40	; 0x28
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40021000 	.word	0x40021000

080052a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b0a0      	sub	sp, #128	; 0x80
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80052b0:	2200      	movs	r2, #0
 80052b2:	601a      	str	r2, [r3, #0]
 80052b4:	605a      	str	r2, [r3, #4]
 80052b6:	609a      	str	r2, [r3, #8]
 80052b8:	60da      	str	r2, [r3, #12]
 80052ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80052bc:	f107 0318 	add.w	r3, r7, #24
 80052c0:	2254      	movs	r2, #84	; 0x54
 80052c2:	2100      	movs	r1, #0
 80052c4:	4618      	mov	r0, r3
 80052c6:	f005 fabf 	bl	800a848 <memset>
  if(huart->Instance==USART1)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a81      	ldr	r2, [pc, #516]	; (80054d4 <HAL_UART_MspInit+0x230>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d17c      	bne.n	80053ce <HAL_UART_MspInit+0x12a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80052d4:	2301      	movs	r3, #1
 80052d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80052d8:	2300      	movs	r3, #0
 80052da:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80052dc:	f107 0318 	add.w	r3, r7, #24
 80052e0:	4618      	mov	r0, r3
 80052e2:	f002 f9cf 	bl	8007684 <HAL_RCCEx_PeriphCLKConfig>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80052ec:	f7ff fef4 	bl	80050d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80052f0:	4b79      	ldr	r3, [pc, #484]	; (80054d8 <HAL_UART_MspInit+0x234>)
 80052f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052f4:	4a78      	ldr	r2, [pc, #480]	; (80054d8 <HAL_UART_MspInit+0x234>)
 80052f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052fa:	6613      	str	r3, [r2, #96]	; 0x60
 80052fc:	4b76      	ldr	r3, [pc, #472]	; (80054d8 <HAL_UART_MspInit+0x234>)
 80052fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005304:	617b      	str	r3, [r7, #20]
 8005306:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005308:	4b73      	ldr	r3, [pc, #460]	; (80054d8 <HAL_UART_MspInit+0x234>)
 800530a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800530c:	4a72      	ldr	r2, [pc, #456]	; (80054d8 <HAL_UART_MspInit+0x234>)
 800530e:	f043 0301 	orr.w	r3, r3, #1
 8005312:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005314:	4b70      	ldr	r3, [pc, #448]	; (80054d8 <HAL_UART_MspInit+0x234>)
 8005316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	613b      	str	r3, [r7, #16]
 800531e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005320:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005324:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005326:	2302      	movs	r3, #2
 8005328:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800532a:	2300      	movs	r3, #0
 800532c:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800532e:	2303      	movs	r3, #3
 8005330:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005332:	2307      	movs	r3, #7
 8005334:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005336:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800533a:	4619      	mov	r1, r3
 800533c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005340:	f000 fe96 	bl	8006070 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005348:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800534a:	2312      	movs	r3, #18
 800534c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800534e:	2302      	movs	r3, #2
 8005350:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005352:	2303      	movs	r3, #3
 8005354:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005356:	2307      	movs	r3, #7
 8005358:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800535a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800535e:	4619      	mov	r1, r3
 8005360:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005364:	f000 fe84 	bl	8006070 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005368:	4b5c      	ldr	r3, [pc, #368]	; (80054dc <HAL_UART_MspInit+0x238>)
 800536a:	4a5d      	ldr	r2, [pc, #372]	; (80054e0 <HAL_UART_MspInit+0x23c>)
 800536c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_2;
 800536e:	4b5b      	ldr	r3, [pc, #364]	; (80054dc <HAL_UART_MspInit+0x238>)
 8005370:	2202      	movs	r2, #2
 8005372:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005374:	4b59      	ldr	r3, [pc, #356]	; (80054dc <HAL_UART_MspInit+0x238>)
 8005376:	2200      	movs	r2, #0
 8005378:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800537a:	4b58      	ldr	r3, [pc, #352]	; (80054dc <HAL_UART_MspInit+0x238>)
 800537c:	2200      	movs	r2, #0
 800537e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005380:	4b56      	ldr	r3, [pc, #344]	; (80054dc <HAL_UART_MspInit+0x238>)
 8005382:	2280      	movs	r2, #128	; 0x80
 8005384:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005386:	4b55      	ldr	r3, [pc, #340]	; (80054dc <HAL_UART_MspInit+0x238>)
 8005388:	2200      	movs	r2, #0
 800538a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800538c:	4b53      	ldr	r3, [pc, #332]	; (80054dc <HAL_UART_MspInit+0x238>)
 800538e:	2200      	movs	r2, #0
 8005390:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005392:	4b52      	ldr	r3, [pc, #328]	; (80054dc <HAL_UART_MspInit+0x238>)
 8005394:	2220      	movs	r2, #32
 8005396:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005398:	4b50      	ldr	r3, [pc, #320]	; (80054dc <HAL_UART_MspInit+0x238>)
 800539a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800539e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80053a0:	484e      	ldr	r0, [pc, #312]	; (80054dc <HAL_UART_MspInit+0x238>)
 80053a2:	f000 fbe3 	bl	8005b6c <HAL_DMA_Init>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80053ac:	f7ff fe94 	bl	80050d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a4a      	ldr	r2, [pc, #296]	; (80054dc <HAL_UART_MspInit+0x238>)
 80053b4:	671a      	str	r2, [r3, #112]	; 0x70
 80053b6:	4a49      	ldr	r2, [pc, #292]	; (80054dc <HAL_UART_MspInit+0x238>)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80053bc:	2200      	movs	r2, #0
 80053be:	2102      	movs	r1, #2
 80053c0:	2025      	movs	r0, #37	; 0x25
 80053c2:	f000 fba9 	bl	8005b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80053c6:	2025      	movs	r0, #37	; 0x25
 80053c8:	f000 fbc2 	bl	8005b50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80053cc:	e07d      	b.n	80054ca <HAL_UART_MspInit+0x226>
  else if(huart->Instance==USART2)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a44      	ldr	r2, [pc, #272]	; (80054e4 <HAL_UART_MspInit+0x240>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d178      	bne.n	80054ca <HAL_UART_MspInit+0x226>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80053d8:	2302      	movs	r3, #2
 80053da:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80053dc:	2300      	movs	r3, #0
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80053e0:	f107 0318 	add.w	r3, r7, #24
 80053e4:	4618      	mov	r0, r3
 80053e6:	f002 f94d 	bl	8007684 <HAL_RCCEx_PeriphCLKConfig>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d001      	beq.n	80053f4 <HAL_UART_MspInit+0x150>
      Error_Handler();
 80053f0:	f7ff fe72 	bl	80050d8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80053f4:	4b38      	ldr	r3, [pc, #224]	; (80054d8 <HAL_UART_MspInit+0x234>)
 80053f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f8:	4a37      	ldr	r2, [pc, #220]	; (80054d8 <HAL_UART_MspInit+0x234>)
 80053fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053fe:	6593      	str	r3, [r2, #88]	; 0x58
 8005400:	4b35      	ldr	r3, [pc, #212]	; (80054d8 <HAL_UART_MspInit+0x234>)
 8005402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005404:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800540c:	4b32      	ldr	r3, [pc, #200]	; (80054d8 <HAL_UART_MspInit+0x234>)
 800540e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005410:	4a31      	ldr	r2, [pc, #196]	; (80054d8 <HAL_UART_MspInit+0x234>)
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005418:	4b2f      	ldr	r3, [pc, #188]	; (80054d8 <HAL_UART_MspInit+0x234>)
 800541a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005424:	2304      	movs	r3, #4
 8005426:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005428:	2302      	movs	r3, #2
 800542a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800542c:	2300      	movs	r3, #0
 800542e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005430:	2303      	movs	r3, #3
 8005432:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005434:	2307      	movs	r3, #7
 8005436:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005438:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800543c:	4619      	mov	r1, r3
 800543e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005442:	f000 fe15 	bl	8006070 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005446:	2308      	movs	r3, #8
 8005448:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800544a:	2302      	movs	r3, #2
 800544c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800544e:	2302      	movs	r3, #2
 8005450:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005452:	2303      	movs	r3, #3
 8005454:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005456:	2307      	movs	r3, #7
 8005458:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800545a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800545e:	4619      	mov	r1, r3
 8005460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005464:	f000 fe04 	bl	8006070 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8005468:	4b1f      	ldr	r3, [pc, #124]	; (80054e8 <HAL_UART_MspInit+0x244>)
 800546a:	4a20      	ldr	r2, [pc, #128]	; (80054ec <HAL_UART_MspInit+0x248>)
 800546c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 800546e:	4b1e      	ldr	r3, [pc, #120]	; (80054e8 <HAL_UART_MspInit+0x244>)
 8005470:	2202      	movs	r2, #2
 8005472:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005474:	4b1c      	ldr	r3, [pc, #112]	; (80054e8 <HAL_UART_MspInit+0x244>)
 8005476:	2200      	movs	r2, #0
 8005478:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800547a:	4b1b      	ldr	r3, [pc, #108]	; (80054e8 <HAL_UART_MspInit+0x244>)
 800547c:	2200      	movs	r2, #0
 800547e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005480:	4b19      	ldr	r3, [pc, #100]	; (80054e8 <HAL_UART_MspInit+0x244>)
 8005482:	2280      	movs	r2, #128	; 0x80
 8005484:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005486:	4b18      	ldr	r3, [pc, #96]	; (80054e8 <HAL_UART_MspInit+0x244>)
 8005488:	2200      	movs	r2, #0
 800548a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800548c:	4b16      	ldr	r3, [pc, #88]	; (80054e8 <HAL_UART_MspInit+0x244>)
 800548e:	2200      	movs	r2, #0
 8005490:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8005492:	4b15      	ldr	r3, [pc, #84]	; (80054e8 <HAL_UART_MspInit+0x244>)
 8005494:	2200      	movs	r2, #0
 8005496:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005498:	4b13      	ldr	r3, [pc, #76]	; (80054e8 <HAL_UART_MspInit+0x244>)
 800549a:	2200      	movs	r2, #0
 800549c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800549e:	4812      	ldr	r0, [pc, #72]	; (80054e8 <HAL_UART_MspInit+0x244>)
 80054a0:	f000 fb64 	bl	8005b6c <HAL_DMA_Init>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <HAL_UART_MspInit+0x20a>
      Error_Handler();
 80054aa:	f7ff fe15 	bl	80050d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a0d      	ldr	r2, [pc, #52]	; (80054e8 <HAL_UART_MspInit+0x244>)
 80054b2:	671a      	str	r2, [r3, #112]	; 0x70
 80054b4:	4a0c      	ldr	r2, [pc, #48]	; (80054e8 <HAL_UART_MspInit+0x244>)
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80054ba:	2200      	movs	r2, #0
 80054bc:	2100      	movs	r1, #0
 80054be:	2026      	movs	r0, #38	; 0x26
 80054c0:	f000 fb2a 	bl	8005b18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80054c4:	2026      	movs	r0, #38	; 0x26
 80054c6:	f000 fb43 	bl	8005b50 <HAL_NVIC_EnableIRQ>
}
 80054ca:	bf00      	nop
 80054cc:	3780      	adds	r7, #128	; 0x80
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
 80054d2:	bf00      	nop
 80054d4:	40013800 	.word	0x40013800
 80054d8:	40021000 	.word	0x40021000
 80054dc:	20000278 	.word	0x20000278
 80054e0:	40020058 	.word	0x40020058
 80054e4:	40004400 	.word	0x40004400
 80054e8:	200002c0 	.word	0x200002c0
 80054ec:	4002006c 	.word	0x4002006c

080054f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08c      	sub	sp, #48	; 0x30
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80054fe:	4b2e      	ldr	r3, [pc, #184]	; (80055b8 <HAL_InitTick+0xc8>)
 8005500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005502:	4a2d      	ldr	r2, [pc, #180]	; (80055b8 <HAL_InitTick+0xc8>)
 8005504:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005508:	6613      	str	r3, [r2, #96]	; 0x60
 800550a:	4b2b      	ldr	r3, [pc, #172]	; (80055b8 <HAL_InitTick+0xc8>)
 800550c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800550e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005512:	60bb      	str	r3, [r7, #8]
 8005514:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005516:	f107 020c 	add.w	r2, r7, #12
 800551a:	f107 0310 	add.w	r3, r7, #16
 800551e:	4611      	mov	r1, r2
 8005520:	4618      	mov	r0, r3
 8005522:	f002 f81d 	bl	8007560 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005526:	f002 f805 	bl	8007534 <HAL_RCC_GetPCLK2Freq>
 800552a:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800552c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552e:	4a23      	ldr	r2, [pc, #140]	; (80055bc <HAL_InitTick+0xcc>)
 8005530:	fba2 2303 	umull	r2, r3, r2, r3
 8005534:	0c9b      	lsrs	r3, r3, #18
 8005536:	3b01      	subs	r3, #1
 8005538:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800553a:	4b21      	ldr	r3, [pc, #132]	; (80055c0 <HAL_InitTick+0xd0>)
 800553c:	4a21      	ldr	r2, [pc, #132]	; (80055c4 <HAL_InitTick+0xd4>)
 800553e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005540:	4b1f      	ldr	r3, [pc, #124]	; (80055c0 <HAL_InitTick+0xd0>)
 8005542:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005546:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8005548:	4a1d      	ldr	r2, [pc, #116]	; (80055c0 <HAL_InitTick+0xd0>)
 800554a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554c:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800554e:	4b1c      	ldr	r3, [pc, #112]	; (80055c0 <HAL_InitTick+0xd0>)
 8005550:	2200      	movs	r2, #0
 8005552:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005554:	4b1a      	ldr	r3, [pc, #104]	; (80055c0 <HAL_InitTick+0xd0>)
 8005556:	2200      	movs	r2, #0
 8005558:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800555a:	4b19      	ldr	r3, [pc, #100]	; (80055c0 <HAL_InitTick+0xd0>)
 800555c:	2200      	movs	r2, #0
 800555e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8005560:	4817      	ldr	r0, [pc, #92]	; (80055c0 <HAL_InitTick+0xd0>)
 8005562:	f002 ff65 	bl	8008430 <HAL_TIM_Base_Init>
 8005566:	4603      	mov	r3, r0
 8005568:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800556c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005570:	2b00      	cmp	r3, #0
 8005572:	d11b      	bne.n	80055ac <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8005574:	4812      	ldr	r0, [pc, #72]	; (80055c0 <HAL_InitTick+0xd0>)
 8005576:	f002 ffb3 	bl	80084e0 <HAL_TIM_Base_Start_IT>
 800557a:	4603      	mov	r3, r0
 800557c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8005580:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005584:	2b00      	cmp	r3, #0
 8005586:	d111      	bne.n	80055ac <HAL_InitTick+0xbc>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005588:	2019      	movs	r0, #25
 800558a:	f000 fae1 	bl	8005b50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b0f      	cmp	r3, #15
 8005592:	d808      	bhi.n	80055a6 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8005594:	2200      	movs	r2, #0
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	2019      	movs	r0, #25
 800559a:	f000 fabd 	bl	8005b18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800559e:	4a0a      	ldr	r2, [pc, #40]	; (80055c8 <HAL_InitTick+0xd8>)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6013      	str	r3, [r2, #0]
 80055a4:	e002      	b.n	80055ac <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80055ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3730      	adds	r7, #48	; 0x30
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	40021000 	.word	0x40021000
 80055bc:	431bde83 	.word	0x431bde83
 80055c0:	200014cc 	.word	0x200014cc
 80055c4:	40012c00 	.word	0x40012c00
 80055c8:	20000028 	.word	0x20000028

080055cc <HAL_SuspendTick>:
  * @note   Disable the tick increment by disabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_SuspendTick(void)
{
 80055cc:	b480      	push	{r7}
 80055ce:	af00      	add	r7, sp, #0
  /* Disable TIM1 update Interrupt */
  __HAL_TIM_DISABLE_IT(&htim1, TIM_IT_UPDATE);
 80055d0:	4b06      	ldr	r3, [pc, #24]	; (80055ec <HAL_SuspendTick+0x20>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	4b05      	ldr	r3, [pc, #20]	; (80055ec <HAL_SuspendTick+0x20>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0201 	bic.w	r2, r2, #1
 80055de:	60da      	str	r2, [r3, #12]
}
 80055e0:	bf00      	nop
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	200014cc 	.word	0x200014cc

080055f0 <HAL_ResumeTick>:
  * @note   Enable the tick increment by Enabling TIM1 update interrupt.
  * @param  None
  * @retval None
  */
void HAL_ResumeTick(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  /* Enable TIM1 Update interrupt */
  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_UPDATE);
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <HAL_ResumeTick+0x20>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	68da      	ldr	r2, [r3, #12]
 80055fa:	4b05      	ldr	r3, [pc, #20]	; (8005610 <HAL_ResumeTick+0x20>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f042 0201 	orr.w	r2, r2, #1
 8005602:	60da      	str	r2, [r3, #12]
}
 8005604:	bf00      	nop
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	200014cc 	.word	0x200014cc

08005614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005618:	e7fe      	b.n	8005618 <NMI_Handler+0x4>

0800561a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800561a:	b480      	push	{r7}
 800561c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800561e:	e7fe      	b.n	800561e <HardFault_Handler+0x4>

08005620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005624:	e7fe      	b.n	8005624 <MemManage_Handler+0x4>

08005626 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005626:	b480      	push	{r7}
 8005628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800562a:	e7fe      	b.n	800562a <BusFault_Handler+0x4>

0800562c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005630:	e7fe      	b.n	8005630 <UsageFault_Handler+0x4>

08005632 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005632:	b480      	push	{r7}
 8005634:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005636:	bf00      	nop
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005640:	b480      	push	{r7}
 8005642:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005644:	bf00      	nop
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr

0800564e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800564e:	b480      	push	{r7}
 8005650:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005652:	bf00      	nop
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800565c:	b480      	push	{r7}
 800565e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005660:	bf00      	nop
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800566a:	b580      	push	{r7, lr}
 800566c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800566e:	2001      	movs	r0, #1
 8005670:	f000 fe98 	bl	80063a4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8005674:	bf00      	nop
 8005676:	bd80      	pop	{r7, pc}

08005678 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800567c:	4802      	ldr	r0, [pc, #8]	; (8005688 <DMA1_Channel5_IRQHandler+0x10>)
 800567e:	f000 fc0c 	bl	8005e9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8005682:	bf00      	nop
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	20000278 	.word	0x20000278

0800568c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005690:	4802      	ldr	r0, [pc, #8]	; (800569c <DMA1_Channel6_IRQHandler+0x10>)
 8005692:	f000 fc02 	bl	8005e9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8005696:	bf00      	nop
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	200002c0 	.word	0x200002c0

080056a0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80056a4:	4802      	ldr	r0, [pc, #8]	; (80056b0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80056a6:	f002 ffff 	bl	80086a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80056aa:	bf00      	nop
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	200014cc 	.word	0x200014cc

080056b4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_IWDG_Refresh(&hiwdg);
 80056b8:	4803      	ldr	r0, [pc, #12]	; (80056c8 <TIM2_IRQHandler+0x14>)
 80056ba:	f000 fee5 	bl	8006488 <HAL_IWDG_Refresh>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80056be:	4803      	ldr	r0, [pc, #12]	; (80056cc <TIM2_IRQHandler+0x18>)
 80056c0:	f002 fff2 	bl	80086a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80056c4:	bf00      	nop
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	200000b8 	.word	0x200000b8
 80056cc:	20000124 	.word	0x20000124

080056d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80056d4:	4802      	ldr	r0, [pc, #8]	; (80056e0 <USART1_IRQHandler+0x10>)
 80056d6:	f003 feb3 	bl	8009440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80056da:	bf00      	nop
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000170 	.word	0x20000170

080056e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80056e8:	4802      	ldr	r0, [pc, #8]	; (80056f4 <USART2_IRQHandler+0x10>)
 80056ea:	f003 fea9 	bl	8009440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80056ee:	bf00      	nop
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	200001f4 	.word	0x200001f4

080056f8 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarm interrupt through EXTI line 18.
  */
void RTC_Alarm_IRQHandler(void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */
	HAL_PWR_DisableSleepOnExit();
 80056fc:	f001 f89c 	bl	8006838 <HAL_PWR_DisableSleepOnExit>

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8005700:	4802      	ldr	r0, [pc, #8]	; (800570c <RTC_Alarm_IRQHandler+0x14>)
 8005702:	f002 fd83 	bl	800820c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8005706:	bf00      	nop
 8005708:	bd80      	pop	{r7, pc}
 800570a:	bf00      	nop
 800570c:	20000100 	.word	0x20000100

08005710 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8005714:	4802      	ldr	r0, [pc, #8]	; (8005720 <LPTIM1_IRQHandler+0x10>)
 8005716:	f000 ff69 	bl	80065ec <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 800571a:	bf00      	nop
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	200000c8 	.word	0x200000c8

08005724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0
  return 1;
 8005728:	2301      	movs	r3, #1
}
 800572a:	4618      	mov	r0, r3
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <_kill>:

int _kill(int pid, int sig)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800573e:	f005 f829 	bl	800a794 <__errno>
 8005742:	4603      	mov	r3, r0
 8005744:	2216      	movs	r2, #22
 8005746:	601a      	str	r2, [r3, #0]
  return -1;
 8005748:	f04f 33ff 	mov.w	r3, #4294967295
}
 800574c:	4618      	mov	r0, r3
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <_exit>:

void _exit (int status)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800575c:	f04f 31ff 	mov.w	r1, #4294967295
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7ff ffe7 	bl	8005734 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005766:	e7fe      	b.n	8005766 <_exit+0x12>

08005768 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b086      	sub	sp, #24
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005774:	2300      	movs	r3, #0
 8005776:	617b      	str	r3, [r7, #20]
 8005778:	e00a      	b.n	8005790 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800577a:	f3af 8000 	nop.w
 800577e:	4601      	mov	r1, r0
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	60ba      	str	r2, [r7, #8]
 8005786:	b2ca      	uxtb	r2, r1
 8005788:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	3301      	adds	r3, #1
 800578e:	617b      	str	r3, [r7, #20]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	429a      	cmp	r2, r3
 8005796:	dbf0      	blt.n	800577a <_read+0x12>
  }

  return len;
 8005798:	687b      	ldr	r3, [r7, #4]
}
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b083      	sub	sp, #12
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80057aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	370c      	adds	r7, #12
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b083      	sub	sp, #12
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
 80057c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057ca:	605a      	str	r2, [r3, #4]
  return 0;
 80057cc:	2300      	movs	r3, #0
}
 80057ce:	4618      	mov	r0, r3
 80057d0:	370c      	adds	r7, #12
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <_isatty>:

int _isatty(int file)
{
 80057da:	b480      	push	{r7}
 80057dc:	b083      	sub	sp, #12
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80057e2:	2301      	movs	r3, #1
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b085      	sub	sp, #20
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
	...

0800580c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b086      	sub	sp, #24
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005814:	4a14      	ldr	r2, [pc, #80]	; (8005868 <_sbrk+0x5c>)
 8005816:	4b15      	ldr	r3, [pc, #84]	; (800586c <_sbrk+0x60>)
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005820:	4b13      	ldr	r3, [pc, #76]	; (8005870 <_sbrk+0x64>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d102      	bne.n	800582e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005828:	4b11      	ldr	r3, [pc, #68]	; (8005870 <_sbrk+0x64>)
 800582a:	4a12      	ldr	r2, [pc, #72]	; (8005874 <_sbrk+0x68>)
 800582c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800582e:	4b10      	ldr	r3, [pc, #64]	; (8005870 <_sbrk+0x64>)
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4413      	add	r3, r2
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	429a      	cmp	r2, r3
 800583a:	d207      	bcs.n	800584c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800583c:	f004 ffaa 	bl	800a794 <__errno>
 8005840:	4603      	mov	r3, r0
 8005842:	220c      	movs	r2, #12
 8005844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005846:	f04f 33ff 	mov.w	r3, #4294967295
 800584a:	e009      	b.n	8005860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800584c:	4b08      	ldr	r3, [pc, #32]	; (8005870 <_sbrk+0x64>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005852:	4b07      	ldr	r3, [pc, #28]	; (8005870 <_sbrk+0x64>)
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4413      	add	r3, r2
 800585a:	4a05      	ldr	r2, [pc, #20]	; (8005870 <_sbrk+0x64>)
 800585c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800585e:	68fb      	ldr	r3, [r7, #12]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3718      	adds	r7, #24
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	20010000 	.word	0x20010000
 800586c:	00000400 	.word	0x00000400
 8005870:	20001518 	.word	0x20001518
 8005874:	20001530 	.word	0x20001530

08005878 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005878:	b480      	push	{r7}
 800587a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800587c:	4b06      	ldr	r3, [pc, #24]	; (8005898 <SystemInit+0x20>)
 800587e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005882:	4a05      	ldr	r2, [pc, #20]	; (8005898 <SystemInit+0x20>)
 8005884:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005888:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800588c:	bf00      	nop
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	e000ed00 	.word	0xe000ed00

0800589c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800589c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80058d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80058a0:	f7ff ffea 	bl	8005878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80058a4:	480c      	ldr	r0, [pc, #48]	; (80058d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80058a6:	490d      	ldr	r1, [pc, #52]	; (80058dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80058a8:	4a0d      	ldr	r2, [pc, #52]	; (80058e0 <LoopForever+0xe>)
  movs r3, #0
 80058aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058ac:	e002      	b.n	80058b4 <LoopCopyDataInit>

080058ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058b2:	3304      	adds	r3, #4

080058b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058b8:	d3f9      	bcc.n	80058ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058ba:	4a0a      	ldr	r2, [pc, #40]	; (80058e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80058bc:	4c0a      	ldr	r4, [pc, #40]	; (80058e8 <LoopForever+0x16>)
  movs r3, #0
 80058be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058c0:	e001      	b.n	80058c6 <LoopFillZerobss>

080058c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058c4:	3204      	adds	r2, #4

080058c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058c8:	d3fb      	bcc.n	80058c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80058ca:	f004 ff69 	bl	800a7a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80058ce:	f7ff f81d 	bl	800490c <main>

080058d2 <LoopForever>:

LoopForever:
    b LoopForever
 80058d2:	e7fe      	b.n	80058d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80058d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80058d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058dc:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 80058e0:	0800d728 	.word	0x0800d728
  ldr r2, =_sbss
 80058e4:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 80058e8:	20001530 	.word	0x20001530

080058ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80058ec:	e7fe      	b.n	80058ec <ADC1_IRQHandler>

080058ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b082      	sub	sp, #8
 80058f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80058f4:	2300      	movs	r3, #0
 80058f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80058f8:	2003      	movs	r0, #3
 80058fa:	f000 f902 	bl	8005b02 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80058fe:	200f      	movs	r0, #15
 8005900:	f7ff fdf6 	bl	80054f0 <HAL_InitTick>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d002      	beq.n	8005910 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	71fb      	strb	r3, [r7, #7]
 800590e:	e001      	b.n	8005914 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005910:	f7ff fbe8 	bl	80050e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005914:	79fb      	ldrb	r3, [r7, #7]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005920:	b480      	push	{r7}
 8005922:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005924:	4b06      	ldr	r3, [pc, #24]	; (8005940 <HAL_IncTick+0x20>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	4b06      	ldr	r3, [pc, #24]	; (8005944 <HAL_IncTick+0x24>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4413      	add	r3, r2
 8005930:	4a04      	ldr	r2, [pc, #16]	; (8005944 <HAL_IncTick+0x24>)
 8005932:	6013      	str	r3, [r2, #0]
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	2000002c 	.word	0x2000002c
 8005944:	2000151c 	.word	0x2000151c

08005948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005948:	b480      	push	{r7}
 800594a:	af00      	add	r7, sp, #0
  return uwTick;
 800594c:	4b03      	ldr	r3, [pc, #12]	; (800595c <HAL_GetTick+0x14>)
 800594e:	681b      	ldr	r3, [r3, #0]
}
 8005950:	4618      	mov	r0, r3
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	2000151c 	.word	0x2000151c

08005960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b084      	sub	sp, #16
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005968:	f7ff ffee 	bl	8005948 <HAL_GetTick>
 800596c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005978:	d005      	beq.n	8005986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800597a:	4b0a      	ldr	r3, [pc, #40]	; (80059a4 <HAL_Delay+0x44>)
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005986:	bf00      	nop
 8005988:	f7ff ffde 	bl	8005948 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	429a      	cmp	r2, r3
 8005996:	d8f7      	bhi.n	8005988 <HAL_Delay+0x28>
  {
  }
}
 8005998:	bf00      	nop
 800599a:	bf00      	nop
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	2000002c 	.word	0x2000002c

080059a8 <__NVIC_SetPriorityGrouping>:
{
 80059a8:	b480      	push	{r7}
 80059aa:	b085      	sub	sp, #20
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059b8:	4b0c      	ldr	r3, [pc, #48]	; (80059ec <__NVIC_SetPriorityGrouping+0x44>)
 80059ba:	68db      	ldr	r3, [r3, #12]
 80059bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059c4:	4013      	ands	r3, r2
 80059c6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059da:	4a04      	ldr	r2, [pc, #16]	; (80059ec <__NVIC_SetPriorityGrouping+0x44>)
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	60d3      	str	r3, [r2, #12]
}
 80059e0:	bf00      	nop
 80059e2:	3714      	adds	r7, #20
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr
 80059ec:	e000ed00 	.word	0xe000ed00

080059f0 <__NVIC_GetPriorityGrouping>:
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80059f4:	4b04      	ldr	r3, [pc, #16]	; (8005a08 <__NVIC_GetPriorityGrouping+0x18>)
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	0a1b      	lsrs	r3, r3, #8
 80059fa:	f003 0307 	and.w	r3, r3, #7
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr
 8005a08:	e000ed00 	.word	0xe000ed00

08005a0c <__NVIC_EnableIRQ>:
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	4603      	mov	r3, r0
 8005a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	db0b      	blt.n	8005a36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a1e:	79fb      	ldrb	r3, [r7, #7]
 8005a20:	f003 021f 	and.w	r2, r3, #31
 8005a24:	4907      	ldr	r1, [pc, #28]	; (8005a44 <__NVIC_EnableIRQ+0x38>)
 8005a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a2a:	095b      	lsrs	r3, r3, #5
 8005a2c:	2001      	movs	r0, #1
 8005a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8005a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005a36:	bf00      	nop
 8005a38:	370c      	adds	r7, #12
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	e000e100 	.word	0xe000e100

08005a48 <__NVIC_SetPriority>:
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	4603      	mov	r3, r0
 8005a50:	6039      	str	r1, [r7, #0]
 8005a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	db0a      	blt.n	8005a72 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	b2da      	uxtb	r2, r3
 8005a60:	490c      	ldr	r1, [pc, #48]	; (8005a94 <__NVIC_SetPriority+0x4c>)
 8005a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a66:	0112      	lsls	r2, r2, #4
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005a70:	e00a      	b.n	8005a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	b2da      	uxtb	r2, r3
 8005a76:	4908      	ldr	r1, [pc, #32]	; (8005a98 <__NVIC_SetPriority+0x50>)
 8005a78:	79fb      	ldrb	r3, [r7, #7]
 8005a7a:	f003 030f 	and.w	r3, r3, #15
 8005a7e:	3b04      	subs	r3, #4
 8005a80:	0112      	lsls	r2, r2, #4
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	440b      	add	r3, r1
 8005a86:	761a      	strb	r2, [r3, #24]
}
 8005a88:	bf00      	nop
 8005a8a:	370c      	adds	r7, #12
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	e000e100 	.word	0xe000e100
 8005a98:	e000ed00 	.word	0xe000ed00

08005a9c <NVIC_EncodePriority>:
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b089      	sub	sp, #36	; 0x24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f003 0307 	and.w	r3, r3, #7
 8005aae:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f1c3 0307 	rsb	r3, r3, #7
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	bf28      	it	cs
 8005aba:	2304      	movcs	r3, #4
 8005abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	2b06      	cmp	r3, #6
 8005ac4:	d902      	bls.n	8005acc <NVIC_EncodePriority+0x30>
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	3b03      	subs	r3, #3
 8005aca:	e000      	b.n	8005ace <NVIC_EncodePriority+0x32>
 8005acc:	2300      	movs	r3, #0
 8005ace:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8005ada:	43da      	mvns	r2, r3
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	401a      	ands	r2, r3
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ae4:	f04f 31ff 	mov.w	r1, #4294967295
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	fa01 f303 	lsl.w	r3, r1, r3
 8005aee:	43d9      	mvns	r1, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005af4:	4313      	orrs	r3, r2
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3724      	adds	r7, #36	; 0x24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr

08005b02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b082      	sub	sp, #8
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f7ff ff4c 	bl	80059a8 <__NVIC_SetPriorityGrouping>
}
 8005b10:	bf00      	nop
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b086      	sub	sp, #24
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	607a      	str	r2, [r7, #4]
 8005b24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005b26:	2300      	movs	r3, #0
 8005b28:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005b2a:	f7ff ff61 	bl	80059f0 <__NVIC_GetPriorityGrouping>
 8005b2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	68b9      	ldr	r1, [r7, #8]
 8005b34:	6978      	ldr	r0, [r7, #20]
 8005b36:	f7ff ffb1 	bl	8005a9c <NVIC_EncodePriority>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b40:	4611      	mov	r1, r2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7ff ff80 	bl	8005a48 <__NVIC_SetPriority>
}
 8005b48:	bf00      	nop
 8005b4a:	3718      	adds	r7, #24
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	4603      	mov	r3, r0
 8005b58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b5e:	4618      	mov	r0, r3
 8005b60:	f7ff ff54 	bl	8005a0c <__NVIC_EnableIRQ>
}
 8005b64:	bf00      	nop
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d101      	bne.n	8005b7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005b7a:	2301      	movs	r3, #1
 8005b7c:	e098      	b.n	8005cb0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	4b4d      	ldr	r3, [pc, #308]	; (8005cbc <HAL_DMA_Init+0x150>)
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d80f      	bhi.n	8005baa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	4b4b      	ldr	r3, [pc, #300]	; (8005cc0 <HAL_DMA_Init+0x154>)
 8005b92:	4413      	add	r3, r2
 8005b94:	4a4b      	ldr	r2, [pc, #300]	; (8005cc4 <HAL_DMA_Init+0x158>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	091b      	lsrs	r3, r3, #4
 8005b9c:	009a      	lsls	r2, r3, #2
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a48      	ldr	r2, [pc, #288]	; (8005cc8 <HAL_DMA_Init+0x15c>)
 8005ba6:	641a      	str	r2, [r3, #64]	; 0x40
 8005ba8:	e00e      	b.n	8005bc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	4b46      	ldr	r3, [pc, #280]	; (8005ccc <HAL_DMA_Init+0x160>)
 8005bb2:	4413      	add	r3, r2
 8005bb4:	4a43      	ldr	r2, [pc, #268]	; (8005cc4 <HAL_DMA_Init+0x158>)
 8005bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8005bba:	091b      	lsrs	r3, r3, #4
 8005bbc:	009a      	lsls	r2, r3, #2
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	4a42      	ldr	r2, [pc, #264]	; (8005cd0 <HAL_DMA_Init+0x164>)
 8005bc6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2202      	movs	r2, #2
 8005bcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	699b      	ldr	r3, [r3, #24]
 8005bfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a1b      	ldr	r3, [r3, #32]
 8005c0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005c22:	d039      	beq.n	8005c98 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c28:	4a27      	ldr	r2, [pc, #156]	; (8005cc8 <HAL_DMA_Init+0x15c>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d11a      	bne.n	8005c64 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c2e:	4b29      	ldr	r3, [pc, #164]	; (8005cd4 <HAL_DMA_Init+0x168>)
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c36:	f003 031c 	and.w	r3, r3, #28
 8005c3a:	210f      	movs	r1, #15
 8005c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005c40:	43db      	mvns	r3, r3
 8005c42:	4924      	ldr	r1, [pc, #144]	; (8005cd4 <HAL_DMA_Init+0x168>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c48:	4b22      	ldr	r3, [pc, #136]	; (8005cd4 <HAL_DMA_Init+0x168>)
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6859      	ldr	r1, [r3, #4]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c54:	f003 031c 	and.w	r3, r3, #28
 8005c58:	fa01 f303 	lsl.w	r3, r1, r3
 8005c5c:	491d      	ldr	r1, [pc, #116]	; (8005cd4 <HAL_DMA_Init+0x168>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	600b      	str	r3, [r1, #0]
 8005c62:	e019      	b.n	8005c98 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005c64:	4b1c      	ldr	r3, [pc, #112]	; (8005cd8 <HAL_DMA_Init+0x16c>)
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6c:	f003 031c 	and.w	r3, r3, #28
 8005c70:	210f      	movs	r1, #15
 8005c72:	fa01 f303 	lsl.w	r3, r1, r3
 8005c76:	43db      	mvns	r3, r3
 8005c78:	4917      	ldr	r1, [pc, #92]	; (8005cd8 <HAL_DMA_Init+0x16c>)
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005c7e:	4b16      	ldr	r3, [pc, #88]	; (8005cd8 <HAL_DMA_Init+0x16c>)
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6859      	ldr	r1, [r3, #4]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c8a:	f003 031c 	and.w	r3, r3, #28
 8005c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005c92:	4911      	ldr	r1, [pc, #68]	; (8005cd8 <HAL_DMA_Init+0x16c>)
 8005c94:	4313      	orrs	r3, r2
 8005c96:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005cae:	2300      	movs	r3, #0
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3714      	adds	r7, #20
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr
 8005cbc:	40020407 	.word	0x40020407
 8005cc0:	bffdfff8 	.word	0xbffdfff8
 8005cc4:	cccccccd 	.word	0xcccccccd
 8005cc8:	40020000 	.word	0x40020000
 8005ccc:	bffdfbf8 	.word	0xbffdfbf8
 8005cd0:	40020400 	.word	0x40020400
 8005cd4:	400200a8 	.word	0x400200a8
 8005cd8:	400204a8 	.word	0x400204a8

08005cdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b086      	sub	sp, #24
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005cea:	2300      	movs	r3, #0
 8005cec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d101      	bne.n	8005cfc <HAL_DMA_Start_IT+0x20>
 8005cf8:	2302      	movs	r3, #2
 8005cfa:	e04b      	b.n	8005d94 <HAL_DMA_Start_IT+0xb8>
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d0a:	b2db      	uxtb	r3, r3
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d13a      	bne.n	8005d86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2202      	movs	r2, #2
 8005d14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f022 0201 	bic.w	r2, r2, #1
 8005d2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 f96b 	bl	8006010 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d008      	beq.n	8005d54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f042 020e 	orr.w	r2, r2, #14
 8005d50:	601a      	str	r2, [r3, #0]
 8005d52:	e00f      	b.n	8005d74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 0204 	bic.w	r2, r2, #4
 8005d62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f042 020a 	orr.w	r2, r2, #10
 8005d72:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	681a      	ldr	r2, [r3, #0]
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f042 0201 	orr.w	r2, r2, #1
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	e005      	b.n	8005d92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	2200      	movs	r2, #0
 8005d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005d8e:	2302      	movs	r3, #2
 8005d90:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b085      	sub	sp, #20
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b02      	cmp	r3, #2
 8005db2:	d008      	beq.n	8005dc6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2204      	movs	r2, #4
 8005db8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e022      	b.n	8005e0c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 020e 	bic.w	r2, r2, #14
 8005dd4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	681a      	ldr	r2, [r3, #0]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f022 0201 	bic.w	r2, r2, #1
 8005de4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dea:	f003 021c 	and.w	r2, r3, #28
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df2:	2101      	movs	r1, #1
 8005df4:	fa01 f202 	lsl.w	r2, r1, r2
 8005df8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3714      	adds	r7, #20
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e20:	2300      	movs	r3, #0
 8005e22:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b02      	cmp	r3, #2
 8005e2e:	d005      	beq.n	8005e3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2204      	movs	r2, #4
 8005e34:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	73fb      	strb	r3, [r7, #15]
 8005e3a:	e029      	b.n	8005e90 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 020e 	bic.w	r2, r2, #14
 8005e4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f022 0201 	bic.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e60:	f003 021c 	and.w	r2, r3, #28
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e68:	2101      	movs	r1, #1
 8005e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8005e6e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	4798      	blx	r3
    }
  }
  return status;
 8005e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3710      	adds	r7, #16
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb6:	f003 031c 	and.w	r3, r3, #28
 8005eba:	2204      	movs	r2, #4
 8005ebc:	409a      	lsls	r2, r3
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d026      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x7a>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f003 0304 	and.w	r3, r3, #4
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d021      	beq.n	8005f14 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d107      	bne.n	8005eee <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0204 	bic.w	r2, r2, #4
 8005eec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ef2:	f003 021c 	and.w	r2, r3, #28
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005efa:	2104      	movs	r1, #4
 8005efc:	fa01 f202 	lsl.w	r2, r1, r2
 8005f00:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d071      	beq.n	8005fee <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005f12:	e06c      	b.n	8005fee <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f18:	f003 031c 	and.w	r3, r3, #28
 8005f1c:	2202      	movs	r2, #2
 8005f1e:	409a      	lsls	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4013      	ands	r3, r2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d02e      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xec>
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	f003 0302 	and.w	r3, r3, #2
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d029      	beq.n	8005f86 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d10b      	bne.n	8005f58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f022 020a 	bic.w	r2, r2, #10
 8005f4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f5c:	f003 021c 	and.w	r2, r3, #28
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f64:	2102      	movs	r1, #2
 8005f66:	fa01 f202 	lsl.w	r2, r1, r2
 8005f6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d038      	beq.n	8005fee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005f84:	e033      	b.n	8005fee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f8a:	f003 031c 	and.w	r3, r3, #28
 8005f8e:	2208      	movs	r2, #8
 8005f90:	409a      	lsls	r2, r3
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4013      	ands	r3, r2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d02a      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x156>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	f003 0308 	and.w	r3, r3, #8
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d025      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f022 020e 	bic.w	r2, r2, #14
 8005fb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb8:	f003 021c 	and.w	r2, r3, #28
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc0:	2101      	movs	r1, #1
 8005fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8005fc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d004      	beq.n	8005ff0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005fee:	bf00      	nop
 8005ff0:	bf00      	nop
}
 8005ff2:	3710      	adds	r7, #16
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	60f8      	str	r0, [r7, #12]
 8006018:	60b9      	str	r1, [r7, #8]
 800601a:	607a      	str	r2, [r7, #4]
 800601c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006022:	f003 021c 	and.w	r2, r3, #28
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800602a:	2101      	movs	r1, #1
 800602c:	fa01 f202 	lsl.w	r2, r1, r2
 8006030:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	683a      	ldr	r2, [r7, #0]
 8006038:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	689b      	ldr	r3, [r3, #8]
 800603e:	2b10      	cmp	r3, #16
 8006040:	d108      	bne.n	8006054 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006052:	e007      	b.n	8006064 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68ba      	ldr	r2, [r7, #8]
 800605a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	60da      	str	r2, [r3, #12]
}
 8006064:	bf00      	nop
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006070:	b480      	push	{r7}
 8006072:	b087      	sub	sp, #28
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800607a:	2300      	movs	r3, #0
 800607c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800607e:	e148      	b.n	8006312 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	2101      	movs	r1, #1
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	fa01 f303 	lsl.w	r3, r1, r3
 800608c:	4013      	ands	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b00      	cmp	r3, #0
 8006094:	f000 813a 	beq.w	800630c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d005      	beq.n	80060b0 <HAL_GPIO_Init+0x40>
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f003 0303 	and.w	r3, r3, #3
 80060ac:	2b02      	cmp	r3, #2
 80060ae:	d130      	bne.n	8006112 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	005b      	lsls	r3, r3, #1
 80060ba:	2203      	movs	r2, #3
 80060bc:	fa02 f303 	lsl.w	r3, r2, r3
 80060c0:	43db      	mvns	r3, r3
 80060c2:	693a      	ldr	r2, [r7, #16]
 80060c4:	4013      	ands	r3, r2
 80060c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	68da      	ldr	r2, [r3, #12]
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	005b      	lsls	r3, r3, #1
 80060d0:	fa02 f303 	lsl.w	r3, r2, r3
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060e6:	2201      	movs	r2, #1
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	43db      	mvns	r3, r3
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4013      	ands	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	091b      	lsrs	r3, r3, #4
 80060fc:	f003 0201 	and.w	r2, r3, #1
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	693a      	ldr	r2, [r7, #16]
 8006108:	4313      	orrs	r3, r2
 800610a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b03      	cmp	r3, #3
 800611c:	d017      	beq.n	800614e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	005b      	lsls	r3, r3, #1
 8006128:	2203      	movs	r2, #3
 800612a:	fa02 f303 	lsl.w	r3, r2, r3
 800612e:	43db      	mvns	r3, r3
 8006130:	693a      	ldr	r2, [r7, #16]
 8006132:	4013      	ands	r3, r2
 8006134:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	689a      	ldr	r2, [r3, #8]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	005b      	lsls	r3, r3, #1
 800613e:	fa02 f303 	lsl.w	r3, r2, r3
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	4313      	orrs	r3, r2
 8006146:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f003 0303 	and.w	r3, r3, #3
 8006156:	2b02      	cmp	r3, #2
 8006158:	d123      	bne.n	80061a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	08da      	lsrs	r2, r3, #3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	3208      	adds	r2, #8
 8006162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006166:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	f003 0307 	and.w	r3, r3, #7
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	220f      	movs	r2, #15
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	43db      	mvns	r3, r3
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	4013      	ands	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f003 0307 	and.w	r3, r3, #7
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	fa02 f303 	lsl.w	r3, r2, r3
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	4313      	orrs	r3, r2
 8006192:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	08da      	lsrs	r2, r3, #3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	3208      	adds	r2, #8
 800619c:	6939      	ldr	r1, [r7, #16]
 800619e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	2203      	movs	r2, #3
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	43db      	mvns	r3, r3
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4013      	ands	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f003 0203 	and.w	r2, r3, #3
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	005b      	lsls	r3, r3, #1
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 8094 	beq.w	800630c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061e4:	4b52      	ldr	r3, [pc, #328]	; (8006330 <HAL_GPIO_Init+0x2c0>)
 80061e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061e8:	4a51      	ldr	r2, [pc, #324]	; (8006330 <HAL_GPIO_Init+0x2c0>)
 80061ea:	f043 0301 	orr.w	r3, r3, #1
 80061ee:	6613      	str	r3, [r2, #96]	; 0x60
 80061f0:	4b4f      	ldr	r3, [pc, #316]	; (8006330 <HAL_GPIO_Init+0x2c0>)
 80061f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f4:	f003 0301 	and.w	r3, r3, #1
 80061f8:	60bb      	str	r3, [r7, #8]
 80061fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80061fc:	4a4d      	ldr	r2, [pc, #308]	; (8006334 <HAL_GPIO_Init+0x2c4>)
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	089b      	lsrs	r3, r3, #2
 8006202:	3302      	adds	r3, #2
 8006204:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006208:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f003 0303 	and.w	r3, r3, #3
 8006210:	009b      	lsls	r3, r3, #2
 8006212:	220f      	movs	r2, #15
 8006214:	fa02 f303 	lsl.w	r3, r2, r3
 8006218:	43db      	mvns	r3, r3
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4013      	ands	r3, r2
 800621e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8006226:	d00d      	beq.n	8006244 <HAL_GPIO_Init+0x1d4>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	4a43      	ldr	r2, [pc, #268]	; (8006338 <HAL_GPIO_Init+0x2c8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d007      	beq.n	8006240 <HAL_GPIO_Init+0x1d0>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	4a42      	ldr	r2, [pc, #264]	; (800633c <HAL_GPIO_Init+0x2cc>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d101      	bne.n	800623c <HAL_GPIO_Init+0x1cc>
 8006238:	2302      	movs	r3, #2
 800623a:	e004      	b.n	8006246 <HAL_GPIO_Init+0x1d6>
 800623c:	2307      	movs	r3, #7
 800623e:	e002      	b.n	8006246 <HAL_GPIO_Init+0x1d6>
 8006240:	2301      	movs	r3, #1
 8006242:	e000      	b.n	8006246 <HAL_GPIO_Init+0x1d6>
 8006244:	2300      	movs	r3, #0
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	f002 0203 	and.w	r2, r2, #3
 800624c:	0092      	lsls	r2, r2, #2
 800624e:	4093      	lsls	r3, r2
 8006250:	693a      	ldr	r2, [r7, #16]
 8006252:	4313      	orrs	r3, r2
 8006254:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006256:	4937      	ldr	r1, [pc, #220]	; (8006334 <HAL_GPIO_Init+0x2c4>)
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	089b      	lsrs	r3, r3, #2
 800625c:	3302      	adds	r3, #2
 800625e:	693a      	ldr	r2, [r7, #16]
 8006260:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006264:	4b36      	ldr	r3, [pc, #216]	; (8006340 <HAL_GPIO_Init+0x2d0>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	43db      	mvns	r3, r3
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4013      	ands	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006288:	4a2d      	ldr	r2, [pc, #180]	; (8006340 <HAL_GPIO_Init+0x2d0>)
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800628e:	4b2c      	ldr	r3, [pc, #176]	; (8006340 <HAL_GPIO_Init+0x2d0>)
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	43db      	mvns	r3, r3
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4013      	ands	r3, r2
 800629c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80062b2:	4a23      	ldr	r2, [pc, #140]	; (8006340 <HAL_GPIO_Init+0x2d0>)
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80062b8:	4b21      	ldr	r3, [pc, #132]	; (8006340 <HAL_GPIO_Init+0x2d0>)
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	43db      	mvns	r3, r3
 80062c2:	693a      	ldr	r2, [r7, #16]
 80062c4:	4013      	ands	r3, r2
 80062c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80062d4:	693a      	ldr	r2, [r7, #16]
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	4313      	orrs	r3, r2
 80062da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80062dc:	4a18      	ldr	r2, [pc, #96]	; (8006340 <HAL_GPIO_Init+0x2d0>)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80062e2:	4b17      	ldr	r3, [pc, #92]	; (8006340 <HAL_GPIO_Init+0x2d0>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	43db      	mvns	r3, r3
 80062ec:	693a      	ldr	r2, [r7, #16]
 80062ee:	4013      	ands	r3, r2
 80062f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80062fe:	693a      	ldr	r2, [r7, #16]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	4313      	orrs	r3, r2
 8006304:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006306:	4a0e      	ldr	r2, [pc, #56]	; (8006340 <HAL_GPIO_Init+0x2d0>)
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	3301      	adds	r3, #1
 8006310:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	fa22 f303 	lsr.w	r3, r2, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	f47f aeaf 	bne.w	8006080 <HAL_GPIO_Init+0x10>
  }
}
 8006322:	bf00      	nop
 8006324:	bf00      	nop
 8006326:	371c      	adds	r7, #28
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr
 8006330:	40021000 	.word	0x40021000
 8006334:	40010000 	.word	0x40010000
 8006338:	48000400 	.word	0x48000400
 800633c:	48000800 	.word	0x48000800
 8006340:	40010400 	.word	0x40010400

08006344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	460b      	mov	r3, r1
 800634e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691a      	ldr	r2, [r3, #16]
 8006354:	887b      	ldrh	r3, [r7, #2]
 8006356:	4013      	ands	r3, r2
 8006358:	2b00      	cmp	r3, #0
 800635a:	d002      	beq.n	8006362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800635c:	2301      	movs	r3, #1
 800635e:	73fb      	strb	r3, [r7, #15]
 8006360:	e001      	b.n	8006366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006362:	2300      	movs	r3, #0
 8006364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	807b      	strh	r3, [r7, #2]
 8006380:	4613      	mov	r3, r2
 8006382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006384:	787b      	ldrb	r3, [r7, #1]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800638a:	887a      	ldrh	r2, [r7, #2]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006390:	e002      	b.n	8006398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006392:	887a      	ldrh	r2, [r7, #2]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006398:	bf00      	nop
 800639a:	370c      	adds	r7, #12
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr

080063a4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	4603      	mov	r3, r0
 80063ac:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80063ae:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063b0:	695a      	ldr	r2, [r3, #20]
 80063b2:	88fb      	ldrh	r3, [r7, #6]
 80063b4:	4013      	ands	r3, r2
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d006      	beq.n	80063c8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80063ba:	4a05      	ldr	r2, [pc, #20]	; (80063d0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80063bc:	88fb      	ldrh	r3, [r7, #6]
 80063be:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80063c0:	88fb      	ldrh	r3, [r7, #6]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 f806 	bl	80063d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	40010400 	.word	0x40010400

080063d4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4603      	mov	r3, r0
 80063dc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d101      	bne.n	80063fc <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e041      	b.n	8006480 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8006404:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f245 5255 	movw	r2, #21845	; 0x5555
 800640e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	6852      	ldr	r2, [r2, #4]
 8006418:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	687a      	ldr	r2, [r7, #4]
 8006420:	6892      	ldr	r2, [r2, #8]
 8006422:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8006424:	f7ff fa90 	bl	8005948 <HAL_GetTick>
 8006428:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800642a:	e00f      	b.n	800644c <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800642c:	f7ff fa8c 	bl	8005948 <HAL_GetTick>
 8006430:	4602      	mov	r2, r0
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1ad3      	subs	r3, r2, r3
 8006436:	2b31      	cmp	r3, #49	; 0x31
 8006438:	d908      	bls.n	800644c <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	f003 0307 	and.w	r3, r3, #7
 8006444:	2b00      	cmp	r3, #0
 8006446:	d001      	beq.n	800644c <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e019      	b.n	8006480 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68db      	ldr	r3, [r3, #12]
 8006452:	f003 0307 	and.w	r3, r3, #7
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e8      	bne.n	800642c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	691a      	ldr	r2, [r3, #16]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	429a      	cmp	r2, r3
 8006466:	d005      	beq.n	8006474 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	687a      	ldr	r2, [r7, #4]
 800646e:	68d2      	ldr	r2, [r2, #12]
 8006470:	611a      	str	r2, [r3, #16]
 8006472:	e004      	b.n	800647e <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800647c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800647e:	2300      	movs	r3, #0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8006498:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e08f      	b.n	80065da <HAL_LPTIM_Init+0x132>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2b01      	cmp	r3, #1
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));
#if defined(LPTIM_RCR_REP)
  assert_param(IS_LPTIM_REPETITION(hlptim->Init.RepetitionCounter));
#endif

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d106      	bne.n	80064da <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f7fe fe29 	bl	800512c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2202      	movs	r2, #2
 80064de:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  }

#endif

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d004      	beq.n	80064fc <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064fa:	d103      	bne.n	8006504 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 031e 	bic.w	r3, r3, #30
 8006502:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800650c:	4293      	cmp	r3, r2
 800650e:	d005      	beq.n	800651c <HAL_LPTIM_Init+0x74>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006516:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800651a:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4b31      	ldr	r3, [pc, #196]	; (80065e4 <HAL_LPTIM_Init+0x13c>)
 8006520:	4013      	ands	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800652c:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8006532:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8006538:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800653e:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	4313      	orrs	r3, r2
 8006544:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d107      	bne.n	800655e <HAL_LPTIM_Init+0xb6>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8006556:	4313      	orrs	r3, r2
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	4313      	orrs	r3, r2
 800655c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d004      	beq.n	8006570 <HAL_LPTIM_Init+0xc8>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800656e:	d107      	bne.n	8006580 <HAL_LPTIM_Init+0xd8>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8006578:	4313      	orrs	r3, r2
 800657a:	68fa      	ldr	r2, [r7, #12]
 800657c:	4313      	orrs	r3, r2
 800657e:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	695b      	ldr	r3, [r3, #20]
 8006584:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006588:	4293      	cmp	r3, r2
 800658a:	d00a      	beq.n	80065a2 <HAL_LPTIM_Init+0xfa>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8006594:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800659a:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800659c:	68fa      	ldr	r2, [r7, #12]
 800659e:	4313      	orrs	r3, r2
 80065a0:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if (hlptim->Instance == LPTIM1)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	4a0e      	ldr	r2, [pc, #56]	; (80065e8 <HAL_LPTIM_Init+0x140>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d108      	bne.n	80065c6 <HAL_LPTIM_Init+0x11e>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->OR = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	430a      	orrs	r2, r1
 80065c2:	621a      	str	r2, [r3, #32]
 80065c4:	e004      	b.n	80065d0 <HAL_LPTIM_Init+0x128>
  {
    /* Check LPTIM2 Input1 source */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

    /* Configure LPTIM2 Input1 source */
    hlptim->Instance->OR = hlptim->Init.Input1Source;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	687a      	ldr	r2, [r7, #4]
 80065cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80065ce:	621a      	str	r2, [r3, #32]
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	ff19f1fe 	.word	0xff19f1fe
 80065e8:	40007c00 	.word	0x40007c00

080065ec <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b082      	sub	sp, #8
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d10d      	bne.n	800661e <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	f003 0301 	and.w	r3, r3, #1
 800660c:	2b01      	cmp	r3, #1
 800660e:	d106      	bne.n	800661e <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2201      	movs	r2, #1
 8006616:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 f882 	bl	8006722 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b02      	cmp	r3, #2
 800662a:	d10d      	bne.n	8006648 <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 0302 	and.w	r3, r3, #2
 8006636:	2b02      	cmp	r3, #2
 8006638:	d106      	bne.n	8006648 <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2202      	movs	r2, #2
 8006640:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f877 	bl	8006736 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0304 	and.w	r3, r3, #4
 8006652:	2b04      	cmp	r3, #4
 8006654:	d10d      	bne.n	8006672 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b04      	cmp	r3, #4
 8006662:	d106      	bne.n	8006672 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2204      	movs	r2, #4
 800666a:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f86c 	bl	800674a <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b08      	cmp	r3, #8
 800667e:	d10d      	bne.n	800669c <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f003 0308 	and.w	r3, r3, #8
 800668a:	2b08      	cmp	r3, #8
 800668c:	d106      	bne.n	800669c <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2208      	movs	r2, #8
 8006694:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f861 	bl	800675e <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0310 	and.w	r3, r3, #16
 80066a6:	2b10      	cmp	r3, #16
 80066a8:	d10d      	bne.n	80066c6 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f003 0310 	and.w	r3, r3, #16
 80066b4:	2b10      	cmp	r3, #16
 80066b6:	d106      	bne.n	80066c6 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2210      	movs	r2, #16
 80066be:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f000 f856 	bl	8006772 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f003 0320 	and.w	r3, r3, #32
 80066d0:	2b20      	cmp	r3, #32
 80066d2:	d10d      	bne.n	80066f0 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	689b      	ldr	r3, [r3, #8]
 80066da:	f003 0320 	and.w	r3, r3, #32
 80066de:	2b20      	cmp	r3, #32
 80066e0:	d106      	bne.n	80066f0 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2220      	movs	r2, #32
 80066e8:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f84b 	bl	8006786 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fa:	2b40      	cmp	r3, #64	; 0x40
 80066fc:	d10d      	bne.n	800671a <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006708:	2b40      	cmp	r3, #64	; 0x40
 800670a:	d106      	bne.n	800671a <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	2240      	movs	r2, #64	; 0x40
 8006712:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f000 f840 	bl	800679a <HAL_LPTIM_DirectionDownCallback>
      HAL_LPTIM_RepCounterWriteCallback(hlptim);
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
#endif
}
 800671a:	bf00      	nop
 800671c:	3708      	adds	r7, #8
 800671e:	46bd      	mov	sp, r7
 8006720:	bd80      	pop	{r7, pc}

08006722 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006722:	b480      	push	{r7}
 8006724:	b083      	sub	sp, #12
 8006726:	af00      	add	r7, sp, #0
 8006728:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 800672a:	bf00      	nop
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800679a:	b480      	push	{r7}
 800679c:	b083      	sub	sp, #12
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
	...

080067b0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	460b      	mov	r3, r1
 80067ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d10c      	bne.n	80067dc <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80067c2:	4b13      	ldr	r3, [pc, #76]	; (8006810 <HAL_PWR_EnterSLEEPMode+0x60>)
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ce:	d10e      	bne.n	80067ee <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80067d0:	f000 f8b6 	bl	8006940 <HAL_PWREx_DisableLowPowerRunMode>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d009      	beq.n	80067ee <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 80067da:	e016      	b.n	800680a <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 80067dc:	4b0c      	ldr	r3, [pc, #48]	; (8006810 <HAL_PWR_EnterSLEEPMode+0x60>)
 80067de:	695b      	ldr	r3, [r3, #20]
 80067e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067e8:	d001      	beq.n	80067ee <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 80067ea:	f000 f899 	bl	8006920 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80067ee:	4b09      	ldr	r3, [pc, #36]	; (8006814 <HAL_PWR_EnterSLEEPMode+0x64>)
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	4a08      	ldr	r2, [pc, #32]	; (8006814 <HAL_PWR_EnterSLEEPMode+0x64>)
 80067f4:	f023 0304 	bic.w	r3, r3, #4
 80067f8:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80067fa:	78fb      	ldrb	r3, [r7, #3]
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	d101      	bne.n	8006804 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8006800:	bf30      	wfi
 8006802:	e002      	b.n	800680a <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8006804:	bf40      	sev
    __WFE();
 8006806:	bf20      	wfe
    __WFE();
 8006808:	bf20      	wfe
  }

}
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40007000 	.word	0x40007000
 8006814:	e000ed00 	.word	0xe000ed00

08006818 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8006818:	b480      	push	{r7}
 800681a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800681c:	4b05      	ldr	r3, [pc, #20]	; (8006834 <HAL_PWR_EnableSleepOnExit+0x1c>)
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	4a04      	ldr	r2, [pc, #16]	; (8006834 <HAL_PWR_EnableSleepOnExit+0x1c>)
 8006822:	f043 0302 	orr.w	r3, r3, #2
 8006826:	6113      	str	r3, [r2, #16]
}
 8006828:	bf00      	nop
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	e000ed00 	.word	0xe000ed00

08006838 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 8006838:	b480      	push	{r7}
 800683a:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800683c:	4b05      	ldr	r3, [pc, #20]	; (8006854 <HAL_PWR_DisableSleepOnExit+0x1c>)
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	4a04      	ldr	r2, [pc, #16]	; (8006854 <HAL_PWR_DisableSleepOnExit+0x1c>)
 8006842:	f023 0302 	bic.w	r3, r3, #2
 8006846:	6113      	str	r3, [r2, #16]
}
 8006848:	bf00      	nop
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	e000ed00 	.word	0xe000ed00

08006858 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006858:	b480      	push	{r7}
 800685a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800685c:	4b04      	ldr	r3, [pc, #16]	; (8006870 <HAL_PWREx_GetVoltageRange+0x18>)
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006864:	4618      	mov	r0, r3
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	40007000 	.word	0x40007000

08006874 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006882:	d130      	bne.n	80068e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006884:	4b23      	ldr	r3, [pc, #140]	; (8006914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800688c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006890:	d038      	beq.n	8006904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006892:	4b20      	ldr	r3, [pc, #128]	; (8006914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800689a:	4a1e      	ldr	r2, [pc, #120]	; (8006914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800689c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80068a2:	4b1d      	ldr	r3, [pc, #116]	; (8006918 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2232      	movs	r2, #50	; 0x32
 80068a8:	fb02 f303 	mul.w	r3, r2, r3
 80068ac:	4a1b      	ldr	r2, [pc, #108]	; (800691c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80068ae:	fba2 2303 	umull	r2, r3, r2, r3
 80068b2:	0c9b      	lsrs	r3, r3, #18
 80068b4:	3301      	adds	r3, #1
 80068b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068b8:	e002      	b.n	80068c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3b01      	subs	r3, #1
 80068be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80068c0:	4b14      	ldr	r3, [pc, #80]	; (8006914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068cc:	d102      	bne.n	80068d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d1f2      	bne.n	80068ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80068d4:	4b0f      	ldr	r3, [pc, #60]	; (8006914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e0:	d110      	bne.n	8006904 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e00f      	b.n	8006906 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80068e6:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80068ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f2:	d007      	beq.n	8006904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80068f4:	4b07      	ldr	r3, [pc, #28]	; (8006914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80068fc:	4a05      	ldr	r2, [pc, #20]	; (8006914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80068fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006902:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	3714      	adds	r7, #20
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop
 8006914:	40007000 	.word	0x40007000
 8006918:	20000024 	.word	0x20000024
 800691c:	431bde83 	.word	0x431bde83

08006920 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8006920:	b480      	push	{r7}
 8006922:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8006924:	4b05      	ldr	r3, [pc, #20]	; (800693c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a04      	ldr	r2, [pc, #16]	; (800693c <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800692a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800692e:	6013      	str	r3, [r2, #0]
}
 8006930:	bf00      	nop
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	40007000 	.word	0x40007000

08006940 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8006946:	4b17      	ldr	r3, [pc, #92]	; (80069a4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a16      	ldr	r2, [pc, #88]	; (80069a4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 800694c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006950:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006952:	4b15      	ldr	r3, [pc, #84]	; (80069a8 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2232      	movs	r2, #50	; 0x32
 8006958:	fb02 f303 	mul.w	r3, r2, r3
 800695c:	4a13      	ldr	r2, [pc, #76]	; (80069ac <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 800695e:	fba2 2303 	umull	r2, r3, r2, r3
 8006962:	0c9b      	lsrs	r3, r3, #18
 8006964:	3301      	adds	r3, #1
 8006966:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006968:	e002      	b.n	8006970 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	3b01      	subs	r3, #1
 800696e:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8006970:	4b0c      	ldr	r3, [pc, #48]	; (80069a4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006978:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800697c:	d102      	bne.n	8006984 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d1f2      	bne.n	800696a <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8006984:	4b07      	ldr	r3, [pc, #28]	; (80069a4 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800698c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006990:	d101      	bne.n	8006996 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e000      	b.n	8006998 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 8006996:	2300      	movs	r3, #0
}
 8006998:	4618      	mov	r0, r3
 800699a:	370c      	adds	r7, #12
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	40007000 	.word	0x40007000
 80069a8:	20000024 	.word	0x20000024
 80069ac:	431bde83 	.word	0x431bde83

080069b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b088      	sub	sp, #32
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d102      	bne.n	80069c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	f000 bc02 	b.w	80071c8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80069c4:	4b96      	ldr	r3, [pc, #600]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f003 030c 	and.w	r3, r3, #12
 80069cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80069ce:	4b94      	ldr	r3, [pc, #592]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f003 0303 	and.w	r3, r3, #3
 80069d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0310 	and.w	r3, r3, #16
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 80e4 	beq.w	8006bae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d007      	beq.n	80069fc <HAL_RCC_OscConfig+0x4c>
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	2b0c      	cmp	r3, #12
 80069f0:	f040 808b 	bne.w	8006b0a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	f040 8087 	bne.w	8006b0a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80069fc:	4b88      	ldr	r3, [pc, #544]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <HAL_RCC_OscConfig+0x64>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d101      	bne.n	8006a14 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e3d9      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6a1a      	ldr	r2, [r3, #32]
 8006a18:	4b81      	ldr	r3, [pc, #516]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d004      	beq.n	8006a2e <HAL_RCC_OscConfig+0x7e>
 8006a24:	4b7e      	ldr	r3, [pc, #504]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a2c:	e005      	b.n	8006a3a <HAL_RCC_OscConfig+0x8a>
 8006a2e:	4b7c      	ldr	r3, [pc, #496]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a34:	091b      	lsrs	r3, r3, #4
 8006a36:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d223      	bcs.n	8006a86 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fdbe 	bl	80075c4 <RCC_SetFlashLatencyFromMSIRange>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d001      	beq.n	8006a52 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e3ba      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a52:	4b73      	ldr	r3, [pc, #460]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a72      	ldr	r2, [pc, #456]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a58:	f043 0308 	orr.w	r3, r3, #8
 8006a5c:	6013      	str	r3, [r2, #0]
 8006a5e:	4b70      	ldr	r3, [pc, #448]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6a1b      	ldr	r3, [r3, #32]
 8006a6a:	496d      	ldr	r1, [pc, #436]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a70:	4b6b      	ldr	r3, [pc, #428]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	69db      	ldr	r3, [r3, #28]
 8006a7c:	021b      	lsls	r3, r3, #8
 8006a7e:	4968      	ldr	r1, [pc, #416]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a80:	4313      	orrs	r3, r2
 8006a82:	604b      	str	r3, [r1, #4]
 8006a84:	e025      	b.n	8006ad2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a86:	4b66      	ldr	r3, [pc, #408]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a65      	ldr	r2, [pc, #404]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a8c:	f043 0308 	orr.w	r3, r3, #8
 8006a90:	6013      	str	r3, [r2, #0]
 8006a92:	4b63      	ldr	r3, [pc, #396]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6a1b      	ldr	r3, [r3, #32]
 8006a9e:	4960      	ldr	r1, [pc, #384]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006aa4:	4b5e      	ldr	r3, [pc, #376]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	021b      	lsls	r3, r3, #8
 8006ab2:	495b      	ldr	r1, [pc, #364]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d109      	bne.n	8006ad2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6a1b      	ldr	r3, [r3, #32]
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f000 fd7e 	bl	80075c4 <RCC_SetFlashLatencyFromMSIRange>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e37a      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006ad2:	f000 fc81 	bl	80073d8 <HAL_RCC_GetSysClockFreq>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	4b51      	ldr	r3, [pc, #324]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	091b      	lsrs	r3, r3, #4
 8006ade:	f003 030f 	and.w	r3, r3, #15
 8006ae2:	4950      	ldr	r1, [pc, #320]	; (8006c24 <HAL_RCC_OscConfig+0x274>)
 8006ae4:	5ccb      	ldrb	r3, [r1, r3]
 8006ae6:	f003 031f 	and.w	r3, r3, #31
 8006aea:	fa22 f303 	lsr.w	r3, r2, r3
 8006aee:	4a4e      	ldr	r2, [pc, #312]	; (8006c28 <HAL_RCC_OscConfig+0x278>)
 8006af0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006af2:	4b4e      	ldr	r3, [pc, #312]	; (8006c2c <HAL_RCC_OscConfig+0x27c>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fe fcfa 	bl	80054f0 <HAL_InitTick>
 8006afc:	4603      	mov	r3, r0
 8006afe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d052      	beq.n	8006bac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006b06:	7bfb      	ldrb	r3, [r7, #15]
 8006b08:	e35e      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d032      	beq.n	8006b78 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006b12:	4b43      	ldr	r3, [pc, #268]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a42      	ldr	r2, [pc, #264]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b18:	f043 0301 	orr.w	r3, r3, #1
 8006b1c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b1e:	f7fe ff13 	bl	8005948 <HAL_GetTick>
 8006b22:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b24:	e008      	b.n	8006b38 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b26:	f7fe ff0f 	bl	8005948 <HAL_GetTick>
 8006b2a:	4602      	mov	r2, r0
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	2b02      	cmp	r3, #2
 8006b32:	d901      	bls.n	8006b38 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006b34:	2303      	movs	r3, #3
 8006b36:	e347      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006b38:	4b39      	ldr	r3, [pc, #228]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d0f0      	beq.n	8006b26 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006b44:	4b36      	ldr	r3, [pc, #216]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a35      	ldr	r2, [pc, #212]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b4a:	f043 0308 	orr.w	r3, r3, #8
 8006b4e:	6013      	str	r3, [r2, #0]
 8006b50:	4b33      	ldr	r3, [pc, #204]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6a1b      	ldr	r3, [r3, #32]
 8006b5c:	4930      	ldr	r1, [pc, #192]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006b62:	4b2f      	ldr	r3, [pc, #188]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	021b      	lsls	r3, r3, #8
 8006b70:	492b      	ldr	r1, [pc, #172]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	604b      	str	r3, [r1, #4]
 8006b76:	e01a      	b.n	8006bae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006b78:	4b29      	ldr	r3, [pc, #164]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	4a28      	ldr	r2, [pc, #160]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006b7e:	f023 0301 	bic.w	r3, r3, #1
 8006b82:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006b84:	f7fe fee0 	bl	8005948 <HAL_GetTick>
 8006b88:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b8a:	e008      	b.n	8006b9e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006b8c:	f7fe fedc 	bl	8005948 <HAL_GetTick>
 8006b90:	4602      	mov	r2, r0
 8006b92:	693b      	ldr	r3, [r7, #16]
 8006b94:	1ad3      	subs	r3, r2, r3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d901      	bls.n	8006b9e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006b9a:	2303      	movs	r3, #3
 8006b9c:	e314      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006b9e:	4b20      	ldr	r3, [pc, #128]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d1f0      	bne.n	8006b8c <HAL_RCC_OscConfig+0x1dc>
 8006baa:	e000      	b.n	8006bae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006bac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f003 0301 	and.w	r3, r3, #1
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d073      	beq.n	8006ca2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006bba:	69bb      	ldr	r3, [r7, #24]
 8006bbc:	2b08      	cmp	r3, #8
 8006bbe:	d005      	beq.n	8006bcc <HAL_RCC_OscConfig+0x21c>
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2b0c      	cmp	r3, #12
 8006bc4:	d10e      	bne.n	8006be4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	d10b      	bne.n	8006be4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006bcc:	4b14      	ldr	r3, [pc, #80]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d063      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x2f0>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	685b      	ldr	r3, [r3, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d15f      	bne.n	8006ca0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006be0:	2301      	movs	r3, #1
 8006be2:	e2f1      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	685b      	ldr	r3, [r3, #4]
 8006be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bec:	d106      	bne.n	8006bfc <HAL_RCC_OscConfig+0x24c>
 8006bee:	4b0c      	ldr	r3, [pc, #48]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a0b      	ldr	r2, [pc, #44]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bf8:	6013      	str	r3, [r2, #0]
 8006bfa:	e025      	b.n	8006c48 <HAL_RCC_OscConfig+0x298>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006c04:	d114      	bne.n	8006c30 <HAL_RCC_OscConfig+0x280>
 8006c06:	4b06      	ldr	r3, [pc, #24]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a05      	ldr	r2, [pc, #20]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	4b03      	ldr	r3, [pc, #12]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a02      	ldr	r2, [pc, #8]	; (8006c20 <HAL_RCC_OscConfig+0x270>)
 8006c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c1c:	6013      	str	r3, [r2, #0]
 8006c1e:	e013      	b.n	8006c48 <HAL_RCC_OscConfig+0x298>
 8006c20:	40021000 	.word	0x40021000
 8006c24:	0800d484 	.word	0x0800d484
 8006c28:	20000024 	.word	0x20000024
 8006c2c:	20000028 	.word	0x20000028
 8006c30:	4ba0      	ldr	r3, [pc, #640]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a9f      	ldr	r2, [pc, #636]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	4b9d      	ldr	r3, [pc, #628]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a9c      	ldr	r2, [pc, #624]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d013      	beq.n	8006c78 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c50:	f7fe fe7a 	bl	8005948 <HAL_GetTick>
 8006c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c56:	e008      	b.n	8006c6a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c58:	f7fe fe76 	bl	8005948 <HAL_GetTick>
 8006c5c:	4602      	mov	r2, r0
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	2b64      	cmp	r3, #100	; 0x64
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e2ae      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006c6a:	4b92      	ldr	r3, [pc, #584]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d0f0      	beq.n	8006c58 <HAL_RCC_OscConfig+0x2a8>
 8006c76:	e014      	b.n	8006ca2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c78:	f7fe fe66 	bl	8005948 <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c80:	f7fe fe62 	bl	8005948 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b64      	cmp	r3, #100	; 0x64
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e29a      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006c92:	4b88      	ldr	r3, [pc, #544]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1f0      	bne.n	8006c80 <HAL_RCC_OscConfig+0x2d0>
 8006c9e:	e000      	b.n	8006ca2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0302 	and.w	r3, r3, #2
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d060      	beq.n	8006d70 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	2b04      	cmp	r3, #4
 8006cb2:	d005      	beq.n	8006cc0 <HAL_RCC_OscConfig+0x310>
 8006cb4:	69bb      	ldr	r3, [r7, #24]
 8006cb6:	2b0c      	cmp	r3, #12
 8006cb8:	d119      	bne.n	8006cee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d116      	bne.n	8006cee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cc0:	4b7c      	ldr	r3, [pc, #496]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d005      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x328>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d101      	bne.n	8006cd8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e277      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cd8:	4b76      	ldr	r3, [pc, #472]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	061b      	lsls	r3, r3, #24
 8006ce6:	4973      	ldr	r1, [pc, #460]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006cec:	e040      	b.n	8006d70 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d023      	beq.n	8006d3e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006cf6:	4b6f      	ldr	r3, [pc, #444]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a6e      	ldr	r2, [pc, #440]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d02:	f7fe fe21 	bl	8005948 <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d08:	e008      	b.n	8006d1c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d0a:	f7fe fe1d 	bl	8005948 <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e255      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006d1c:	4b65      	ldr	r3, [pc, #404]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d0f0      	beq.n	8006d0a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d28:	4b62      	ldr	r3, [pc, #392]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	061b      	lsls	r3, r3, #24
 8006d36:	495f      	ldr	r1, [pc, #380]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	604b      	str	r3, [r1, #4]
 8006d3c:	e018      	b.n	8006d70 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d3e:	4b5d      	ldr	r3, [pc, #372]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a5c      	ldr	r2, [pc, #368]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d4a:	f7fe fdfd 	bl	8005948 <HAL_GetTick>
 8006d4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d50:	e008      	b.n	8006d64 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d52:	f7fe fdf9 	bl	8005948 <HAL_GetTick>
 8006d56:	4602      	mov	r2, r0
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	1ad3      	subs	r3, r2, r3
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d901      	bls.n	8006d64 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e231      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006d64:	4b53      	ldr	r3, [pc, #332]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d1f0      	bne.n	8006d52 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f003 0308 	and.w	r3, r3, #8
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d03c      	beq.n	8006df6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	695b      	ldr	r3, [r3, #20]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01c      	beq.n	8006dbe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d84:	4b4b      	ldr	r3, [pc, #300]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d8a:	4a4a      	ldr	r2, [pc, #296]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006d8c:	f043 0301 	orr.w	r3, r3, #1
 8006d90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d94:	f7fe fdd8 	bl	8005948 <HAL_GetTick>
 8006d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006d9a:	e008      	b.n	8006dae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d9c:	f7fe fdd4 	bl	8005948 <HAL_GetTick>
 8006da0:	4602      	mov	r2, r0
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	1ad3      	subs	r3, r2, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d901      	bls.n	8006dae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006daa:	2303      	movs	r3, #3
 8006dac:	e20c      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006dae:	4b41      	ldr	r3, [pc, #260]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006db4:	f003 0302 	and.w	r3, r3, #2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d0ef      	beq.n	8006d9c <HAL_RCC_OscConfig+0x3ec>
 8006dbc:	e01b      	b.n	8006df6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dbe:	4b3d      	ldr	r3, [pc, #244]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dc4:	4a3b      	ldr	r2, [pc, #236]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006dc6:	f023 0301 	bic.w	r3, r3, #1
 8006dca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dce:	f7fe fdbb 	bl	8005948 <HAL_GetTick>
 8006dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006dd4:	e008      	b.n	8006de8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dd6:	f7fe fdb7 	bl	8005948 <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	2b02      	cmp	r3, #2
 8006de2:	d901      	bls.n	8006de8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006de4:	2303      	movs	r3, #3
 8006de6:	e1ef      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006de8:	4b32      	ldr	r3, [pc, #200]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006dee:	f003 0302 	and.w	r3, r3, #2
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1ef      	bne.n	8006dd6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f003 0304 	and.w	r3, r3, #4
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	f000 80a6 	beq.w	8006f50 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e04:	2300      	movs	r3, #0
 8006e06:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006e08:	4b2a      	ldr	r3, [pc, #168]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d10d      	bne.n	8006e30 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e14:	4b27      	ldr	r3, [pc, #156]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e18:	4a26      	ldr	r2, [pc, #152]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8006e20:	4b24      	ldr	r3, [pc, #144]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e28:	60bb      	str	r3, [r7, #8]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e30:	4b21      	ldr	r3, [pc, #132]	; (8006eb8 <HAL_RCC_OscConfig+0x508>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d118      	bne.n	8006e6e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006e3c:	4b1e      	ldr	r3, [pc, #120]	; (8006eb8 <HAL_RCC_OscConfig+0x508>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4a1d      	ldr	r2, [pc, #116]	; (8006eb8 <HAL_RCC_OscConfig+0x508>)
 8006e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e46:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e48:	f7fe fd7e 	bl	8005948 <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e4e:	e008      	b.n	8006e62 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e50:	f7fe fd7a 	bl	8005948 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d901      	bls.n	8006e62 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006e5e:	2303      	movs	r3, #3
 8006e60:	e1b2      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006e62:	4b15      	ldr	r3, [pc, #84]	; (8006eb8 <HAL_RCC_OscConfig+0x508>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d0f0      	beq.n	8006e50 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d108      	bne.n	8006e88 <HAL_RCC_OscConfig+0x4d8>
 8006e76:	4b0f      	ldr	r3, [pc, #60]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7c:	4a0d      	ldr	r2, [pc, #52]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006e7e:	f043 0301 	orr.w	r3, r3, #1
 8006e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006e86:	e029      	b.n	8006edc <HAL_RCC_OscConfig+0x52c>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	2b05      	cmp	r3, #5
 8006e8e:	d115      	bne.n	8006ebc <HAL_RCC_OscConfig+0x50c>
 8006e90:	4b08      	ldr	r3, [pc, #32]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e96:	4a07      	ldr	r2, [pc, #28]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006e98:	f043 0304 	orr.w	r3, r3, #4
 8006e9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ea0:	4b04      	ldr	r3, [pc, #16]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea6:	4a03      	ldr	r2, [pc, #12]	; (8006eb4 <HAL_RCC_OscConfig+0x504>)
 8006ea8:	f043 0301 	orr.w	r3, r3, #1
 8006eac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006eb0:	e014      	b.n	8006edc <HAL_RCC_OscConfig+0x52c>
 8006eb2:	bf00      	nop
 8006eb4:	40021000 	.word	0x40021000
 8006eb8:	40007000 	.word	0x40007000
 8006ebc:	4b9a      	ldr	r3, [pc, #616]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8006ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec2:	4a99      	ldr	r2, [pc, #612]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8006ec4:	f023 0301 	bic.w	r3, r3, #1
 8006ec8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ecc:	4b96      	ldr	r3, [pc, #600]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8006ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed2:	4a95      	ldr	r2, [pc, #596]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8006ed4:	f023 0304 	bic.w	r3, r3, #4
 8006ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d016      	beq.n	8006f12 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee4:	f7fe fd30 	bl	8005948 <HAL_GetTick>
 8006ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006eea:	e00a      	b.n	8006f02 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eec:	f7fe fd2c 	bl	8005948 <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	1ad3      	subs	r3, r2, r3
 8006ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d901      	bls.n	8006f02 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006efe:	2303      	movs	r3, #3
 8006f00:	e162      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006f02:	4b89      	ldr	r3, [pc, #548]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8006f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0ed      	beq.n	8006eec <HAL_RCC_OscConfig+0x53c>
 8006f10:	e015      	b.n	8006f3e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f12:	f7fe fd19 	bl	8005948 <HAL_GetTick>
 8006f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f18:	e00a      	b.n	8006f30 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f1a:	f7fe fd15 	bl	8005948 <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d901      	bls.n	8006f30 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e14b      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006f30:	4b7d      	ldr	r3, [pc, #500]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8006f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f36:	f003 0302 	and.w	r3, r3, #2
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1ed      	bne.n	8006f1a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006f3e:	7ffb      	ldrb	r3, [r7, #31]
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d105      	bne.n	8006f50 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f44:	4b78      	ldr	r3, [pc, #480]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8006f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f48:	4a77      	ldr	r2, [pc, #476]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8006f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f4e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f003 0320 	and.w	r3, r3, #32
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d03c      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d01c      	beq.n	8006f9e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006f64:	4b70      	ldr	r3, [pc, #448]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8006f66:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f6a:	4a6f      	ldr	r2, [pc, #444]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8006f6c:	f043 0301 	orr.w	r3, r3, #1
 8006f70:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f74:	f7fe fce8 	bl	8005948 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f7c:	f7fe fce4 	bl	8005948 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e11c      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006f8e:	4b66      	ldr	r3, [pc, #408]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8006f90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f94:	f003 0302 	and.w	r3, r3, #2
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d0ef      	beq.n	8006f7c <HAL_RCC_OscConfig+0x5cc>
 8006f9c:	e01b      	b.n	8006fd6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006f9e:	4b62      	ldr	r3, [pc, #392]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8006fa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fa4:	4a60      	ldr	r2, [pc, #384]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8006fa6:	f023 0301 	bic.w	r3, r3, #1
 8006faa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006fae:	f7fe fccb 	bl	8005948 <HAL_GetTick>
 8006fb2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006fb6:	f7fe fcc7 	bl	8005948 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e0ff      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006fc8:	4b57      	ldr	r3, [pc, #348]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8006fca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fce:	f003 0302 	and.w	r3, r3, #2
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1ef      	bne.n	8006fb6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 80f3 	beq.w	80071c6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	f040 80c9 	bne.w	800717c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006fea:	4b4f      	ldr	r3, [pc, #316]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f003 0203 	and.w	r2, r3, #3
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d12c      	bne.n	8007058 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007008:	3b01      	subs	r3, #1
 800700a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800700c:	429a      	cmp	r2, r3
 800700e:	d123      	bne.n	8007058 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800701a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800701c:	429a      	cmp	r2, r3
 800701e:	d11b      	bne.n	8007058 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800702c:	429a      	cmp	r2, r3
 800702e:	d113      	bne.n	8007058 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703a:	085b      	lsrs	r3, r3, #1
 800703c:	3b01      	subs	r3, #1
 800703e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007040:	429a      	cmp	r2, r3
 8007042:	d109      	bne.n	8007058 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704e:	085b      	lsrs	r3, r3, #1
 8007050:	3b01      	subs	r3, #1
 8007052:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007054:	429a      	cmp	r2, r3
 8007056:	d06b      	beq.n	8007130 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	2b0c      	cmp	r3, #12
 800705c:	d062      	beq.n	8007124 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800705e:	4b32      	ldr	r3, [pc, #200]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007066:	2b00      	cmp	r3, #0
 8007068:	d001      	beq.n	800706e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e0ac      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800706e:	4b2e      	ldr	r3, [pc, #184]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a2d      	ldr	r2, [pc, #180]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8007074:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007078:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800707a:	f7fe fc65 	bl	8005948 <HAL_GetTick>
 800707e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007080:	e008      	b.n	8007094 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007082:	f7fe fc61 	bl	8005948 <HAL_GetTick>
 8007086:	4602      	mov	r2, r0
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	1ad3      	subs	r3, r2, r3
 800708c:	2b02      	cmp	r3, #2
 800708e:	d901      	bls.n	8007094 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e099      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007094:	4b24      	ldr	r3, [pc, #144]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d1f0      	bne.n	8007082 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070a0:	4b21      	ldr	r3, [pc, #132]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 80070a2:	68da      	ldr	r2, [r3, #12]
 80070a4:	4b21      	ldr	r3, [pc, #132]	; (800712c <HAL_RCC_OscConfig+0x77c>)
 80070a6:	4013      	ands	r3, r2
 80070a8:	687a      	ldr	r2, [r7, #4]
 80070aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80070b0:	3a01      	subs	r2, #1
 80070b2:	0112      	lsls	r2, r2, #4
 80070b4:	4311      	orrs	r1, r2
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80070ba:	0212      	lsls	r2, r2, #8
 80070bc:	4311      	orrs	r1, r2
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80070c2:	0852      	lsrs	r2, r2, #1
 80070c4:	3a01      	subs	r2, #1
 80070c6:	0552      	lsls	r2, r2, #21
 80070c8:	4311      	orrs	r1, r2
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80070ce:	0852      	lsrs	r2, r2, #1
 80070d0:	3a01      	subs	r2, #1
 80070d2:	0652      	lsls	r2, r2, #25
 80070d4:	4311      	orrs	r1, r2
 80070d6:	687a      	ldr	r2, [r7, #4]
 80070d8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80070da:	06d2      	lsls	r2, r2, #27
 80070dc:	430a      	orrs	r2, r1
 80070de:	4912      	ldr	r1, [pc, #72]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80070e4:	4b10      	ldr	r3, [pc, #64]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a0f      	ldr	r2, [pc, #60]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 80070ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070ee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80070f0:	4b0d      	ldr	r3, [pc, #52]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	4a0c      	ldr	r2, [pc, #48]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 80070f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80070fa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80070fc:	f7fe fc24 	bl	8005948 <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007104:	f7fe fc20 	bl	8005948 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e058      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007116:	4b04      	ldr	r3, [pc, #16]	; (8007128 <HAL_RCC_OscConfig+0x778>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d0f0      	beq.n	8007104 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007122:	e050      	b.n	80071c6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
 8007126:	e04f      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
 8007128:	40021000 	.word	0x40021000
 800712c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007130:	4b27      	ldr	r3, [pc, #156]	; (80071d0 <HAL_RCC_OscConfig+0x820>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d144      	bne.n	80071c6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800713c:	4b24      	ldr	r3, [pc, #144]	; (80071d0 <HAL_RCC_OscConfig+0x820>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a23      	ldr	r2, [pc, #140]	; (80071d0 <HAL_RCC_OscConfig+0x820>)
 8007142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007146:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007148:	4b21      	ldr	r3, [pc, #132]	; (80071d0 <HAL_RCC_OscConfig+0x820>)
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	4a20      	ldr	r2, [pc, #128]	; (80071d0 <HAL_RCC_OscConfig+0x820>)
 800714e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007152:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007154:	f7fe fbf8 	bl	8005948 <HAL_GetTick>
 8007158:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800715a:	e008      	b.n	800716e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800715c:	f7fe fbf4 	bl	8005948 <HAL_GetTick>
 8007160:	4602      	mov	r2, r0
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d901      	bls.n	800716e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e02c      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800716e:	4b18      	ldr	r3, [pc, #96]	; (80071d0 <HAL_RCC_OscConfig+0x820>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007176:	2b00      	cmp	r3, #0
 8007178:	d0f0      	beq.n	800715c <HAL_RCC_OscConfig+0x7ac>
 800717a:	e024      	b.n	80071c6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	2b0c      	cmp	r3, #12
 8007180:	d01f      	beq.n	80071c2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007182:	4b13      	ldr	r3, [pc, #76]	; (80071d0 <HAL_RCC_OscConfig+0x820>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a12      	ldr	r2, [pc, #72]	; (80071d0 <HAL_RCC_OscConfig+0x820>)
 8007188:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800718c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718e:	f7fe fbdb 	bl	8005948 <HAL_GetTick>
 8007192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007194:	e008      	b.n	80071a8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007196:	f7fe fbd7 	bl	8005948 <HAL_GetTick>
 800719a:	4602      	mov	r2, r0
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d901      	bls.n	80071a8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e00f      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071a8:	4b09      	ldr	r3, [pc, #36]	; (80071d0 <HAL_RCC_OscConfig+0x820>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1f0      	bne.n	8007196 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80071b4:	4b06      	ldr	r3, [pc, #24]	; (80071d0 <HAL_RCC_OscConfig+0x820>)
 80071b6:	68da      	ldr	r2, [r3, #12]
 80071b8:	4905      	ldr	r1, [pc, #20]	; (80071d0 <HAL_RCC_OscConfig+0x820>)
 80071ba:	4b06      	ldr	r3, [pc, #24]	; (80071d4 <HAL_RCC_OscConfig+0x824>)
 80071bc:	4013      	ands	r3, r2
 80071be:	60cb      	str	r3, [r1, #12]
 80071c0:	e001      	b.n	80071c6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	e000      	b.n	80071c8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3720      	adds	r7, #32
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}
 80071d0:	40021000 	.word	0x40021000
 80071d4:	feeefffc 	.word	0xfeeefffc

080071d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d101      	bne.n	80071ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e0e7      	b.n	80073bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80071ec:	4b75      	ldr	r3, [pc, #468]	; (80073c4 <HAL_RCC_ClockConfig+0x1ec>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 0307 	and.w	r3, r3, #7
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d910      	bls.n	800721c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071fa:	4b72      	ldr	r3, [pc, #456]	; (80073c4 <HAL_RCC_ClockConfig+0x1ec>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f023 0207 	bic.w	r2, r3, #7
 8007202:	4970      	ldr	r1, [pc, #448]	; (80073c4 <HAL_RCC_ClockConfig+0x1ec>)
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	4313      	orrs	r3, r2
 8007208:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800720a:	4b6e      	ldr	r3, [pc, #440]	; (80073c4 <HAL_RCC_ClockConfig+0x1ec>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	683a      	ldr	r2, [r7, #0]
 8007214:	429a      	cmp	r2, r3
 8007216:	d001      	beq.n	800721c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	e0cf      	b.n	80073bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f003 0302 	and.w	r3, r3, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	d010      	beq.n	800724a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	4b66      	ldr	r3, [pc, #408]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007234:	429a      	cmp	r2, r3
 8007236:	d908      	bls.n	800724a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007238:	4b63      	ldr	r3, [pc, #396]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	689b      	ldr	r3, [r3, #8]
 8007244:	4960      	ldr	r1, [pc, #384]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007246:	4313      	orrs	r3, r2
 8007248:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b00      	cmp	r3, #0
 8007254:	d04c      	beq.n	80072f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	2b03      	cmp	r3, #3
 800725c:	d107      	bne.n	800726e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800725e:	4b5a      	ldr	r3, [pc, #360]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d121      	bne.n	80072ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800726a:	2301      	movs	r3, #1
 800726c:	e0a6      	b.n	80073bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	2b02      	cmp	r3, #2
 8007274:	d107      	bne.n	8007286 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007276:	4b54      	ldr	r3, [pc, #336]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d115      	bne.n	80072ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e09a      	b.n	80073bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d107      	bne.n	800729e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800728e:	4b4e      	ldr	r3, [pc, #312]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 0302 	and.w	r3, r3, #2
 8007296:	2b00      	cmp	r3, #0
 8007298:	d109      	bne.n	80072ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e08e      	b.n	80073bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800729e:	4b4a      	ldr	r3, [pc, #296]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d101      	bne.n	80072ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e086      	b.n	80073bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80072ae:	4b46      	ldr	r3, [pc, #280]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f023 0203 	bic.w	r2, r3, #3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	4943      	ldr	r1, [pc, #268]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 80072bc:	4313      	orrs	r3, r2
 80072be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80072c0:	f7fe fb42 	bl	8005948 <HAL_GetTick>
 80072c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072c6:	e00a      	b.n	80072de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072c8:	f7fe fb3e 	bl	8005948 <HAL_GetTick>
 80072cc:	4602      	mov	r2, r0
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	1ad3      	subs	r3, r2, r3
 80072d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d901      	bls.n	80072de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e06e      	b.n	80073bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072de:	4b3a      	ldr	r3, [pc, #232]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	f003 020c 	and.w	r2, r3, #12
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d1eb      	bne.n	80072c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f003 0302 	and.w	r3, r3, #2
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d010      	beq.n	800731e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689a      	ldr	r2, [r3, #8]
 8007300:	4b31      	ldr	r3, [pc, #196]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007308:	429a      	cmp	r2, r3
 800730a:	d208      	bcs.n	800731e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800730c:	4b2e      	ldr	r3, [pc, #184]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	492b      	ldr	r1, [pc, #172]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 800731a:	4313      	orrs	r3, r2
 800731c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800731e:	4b29      	ldr	r3, [pc, #164]	; (80073c4 <HAL_RCC_ClockConfig+0x1ec>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f003 0307 	and.w	r3, r3, #7
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	429a      	cmp	r2, r3
 800732a:	d210      	bcs.n	800734e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800732c:	4b25      	ldr	r3, [pc, #148]	; (80073c4 <HAL_RCC_ClockConfig+0x1ec>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f023 0207 	bic.w	r2, r3, #7
 8007334:	4923      	ldr	r1, [pc, #140]	; (80073c4 <HAL_RCC_ClockConfig+0x1ec>)
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	4313      	orrs	r3, r2
 800733a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800733c:	4b21      	ldr	r3, [pc, #132]	; (80073c4 <HAL_RCC_ClockConfig+0x1ec>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 0307 	and.w	r3, r3, #7
 8007344:	683a      	ldr	r2, [r7, #0]
 8007346:	429a      	cmp	r2, r3
 8007348:	d001      	beq.n	800734e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800734a:	2301      	movs	r3, #1
 800734c:	e036      	b.n	80073bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0304 	and.w	r3, r3, #4
 8007356:	2b00      	cmp	r3, #0
 8007358:	d008      	beq.n	800736c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800735a:	4b1b      	ldr	r3, [pc, #108]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 800735c:	689b      	ldr	r3, [r3, #8]
 800735e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	4918      	ldr	r1, [pc, #96]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007368:	4313      	orrs	r3, r2
 800736a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0308 	and.w	r3, r3, #8
 8007374:	2b00      	cmp	r3, #0
 8007376:	d009      	beq.n	800738c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007378:	4b13      	ldr	r3, [pc, #76]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	691b      	ldr	r3, [r3, #16]
 8007384:	00db      	lsls	r3, r3, #3
 8007386:	4910      	ldr	r1, [pc, #64]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007388:	4313      	orrs	r3, r2
 800738a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800738c:	f000 f824 	bl	80073d8 <HAL_RCC_GetSysClockFreq>
 8007390:	4602      	mov	r2, r0
 8007392:	4b0d      	ldr	r3, [pc, #52]	; (80073c8 <HAL_RCC_ClockConfig+0x1f0>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	091b      	lsrs	r3, r3, #4
 8007398:	f003 030f 	and.w	r3, r3, #15
 800739c:	490b      	ldr	r1, [pc, #44]	; (80073cc <HAL_RCC_ClockConfig+0x1f4>)
 800739e:	5ccb      	ldrb	r3, [r1, r3]
 80073a0:	f003 031f 	and.w	r3, r3, #31
 80073a4:	fa22 f303 	lsr.w	r3, r2, r3
 80073a8:	4a09      	ldr	r2, [pc, #36]	; (80073d0 <HAL_RCC_ClockConfig+0x1f8>)
 80073aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80073ac:	4b09      	ldr	r3, [pc, #36]	; (80073d4 <HAL_RCC_ClockConfig+0x1fc>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f7fe f89d 	bl	80054f0 <HAL_InitTick>
 80073b6:	4603      	mov	r3, r0
 80073b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80073ba:	7afb      	ldrb	r3, [r7, #11]
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3710      	adds	r7, #16
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}
 80073c4:	40022000 	.word	0x40022000
 80073c8:	40021000 	.word	0x40021000
 80073cc:	0800d484 	.word	0x0800d484
 80073d0:	20000024 	.word	0x20000024
 80073d4:	20000028 	.word	0x20000028

080073d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073d8:	b480      	push	{r7}
 80073da:	b089      	sub	sp, #36	; 0x24
 80073dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	61fb      	str	r3, [r7, #28]
 80073e2:	2300      	movs	r3, #0
 80073e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80073e6:	4b3e      	ldr	r3, [pc, #248]	; (80074e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f003 030c 	and.w	r3, r3, #12
 80073ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80073f0:	4b3b      	ldr	r3, [pc, #236]	; (80074e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	f003 0303 	and.w	r3, r3, #3
 80073f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d005      	beq.n	800740c <HAL_RCC_GetSysClockFreq+0x34>
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	2b0c      	cmp	r3, #12
 8007404:	d121      	bne.n	800744a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d11e      	bne.n	800744a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800740c:	4b34      	ldr	r3, [pc, #208]	; (80074e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f003 0308 	and.w	r3, r3, #8
 8007414:	2b00      	cmp	r3, #0
 8007416:	d107      	bne.n	8007428 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007418:	4b31      	ldr	r3, [pc, #196]	; (80074e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800741a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800741e:	0a1b      	lsrs	r3, r3, #8
 8007420:	f003 030f 	and.w	r3, r3, #15
 8007424:	61fb      	str	r3, [r7, #28]
 8007426:	e005      	b.n	8007434 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007428:	4b2d      	ldr	r3, [pc, #180]	; (80074e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	091b      	lsrs	r3, r3, #4
 800742e:	f003 030f 	and.w	r3, r3, #15
 8007432:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007434:	4a2b      	ldr	r2, [pc, #172]	; (80074e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800743c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d10d      	bne.n	8007460 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007448:	e00a      	b.n	8007460 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	2b04      	cmp	r3, #4
 800744e:	d102      	bne.n	8007456 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007450:	4b25      	ldr	r3, [pc, #148]	; (80074e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007452:	61bb      	str	r3, [r7, #24]
 8007454:	e004      	b.n	8007460 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	2b08      	cmp	r3, #8
 800745a:	d101      	bne.n	8007460 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800745c:	4b23      	ldr	r3, [pc, #140]	; (80074ec <HAL_RCC_GetSysClockFreq+0x114>)
 800745e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	2b0c      	cmp	r3, #12
 8007464:	d134      	bne.n	80074d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007466:	4b1e      	ldr	r3, [pc, #120]	; (80074e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007468:	68db      	ldr	r3, [r3, #12]
 800746a:	f003 0303 	and.w	r3, r3, #3
 800746e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	2b02      	cmp	r3, #2
 8007474:	d003      	beq.n	800747e <HAL_RCC_GetSysClockFreq+0xa6>
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2b03      	cmp	r3, #3
 800747a:	d003      	beq.n	8007484 <HAL_RCC_GetSysClockFreq+0xac>
 800747c:	e005      	b.n	800748a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800747e:	4b1a      	ldr	r3, [pc, #104]	; (80074e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8007480:	617b      	str	r3, [r7, #20]
      break;
 8007482:	e005      	b.n	8007490 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007484:	4b19      	ldr	r3, [pc, #100]	; (80074ec <HAL_RCC_GetSysClockFreq+0x114>)
 8007486:	617b      	str	r3, [r7, #20]
      break;
 8007488:	e002      	b.n	8007490 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	617b      	str	r3, [r7, #20]
      break;
 800748e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007490:	4b13      	ldr	r3, [pc, #76]	; (80074e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	091b      	lsrs	r3, r3, #4
 8007496:	f003 0307 	and.w	r3, r3, #7
 800749a:	3301      	adds	r3, #1
 800749c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800749e:	4b10      	ldr	r3, [pc, #64]	; (80074e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80074a0:	68db      	ldr	r3, [r3, #12]
 80074a2:	0a1b      	lsrs	r3, r3, #8
 80074a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074a8:	697a      	ldr	r2, [r7, #20]
 80074aa:	fb03 f202 	mul.w	r2, r3, r2
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80074b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80074b6:	4b0a      	ldr	r3, [pc, #40]	; (80074e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	0e5b      	lsrs	r3, r3, #25
 80074bc:	f003 0303 	and.w	r3, r3, #3
 80074c0:	3301      	adds	r3, #1
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80074ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80074d0:	69bb      	ldr	r3, [r7, #24]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3724      	adds	r7, #36	; 0x24
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	40021000 	.word	0x40021000
 80074e4:	0800d49c 	.word	0x0800d49c
 80074e8:	00f42400 	.word	0x00f42400
 80074ec:	007a1200 	.word	0x007a1200

080074f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80074f0:	b480      	push	{r7}
 80074f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80074f4:	4b03      	ldr	r3, [pc, #12]	; (8007504 <HAL_RCC_GetHCLKFreq+0x14>)
 80074f6:	681b      	ldr	r3, [r3, #0]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	20000024 	.word	0x20000024

08007508 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800750c:	f7ff fff0 	bl	80074f0 <HAL_RCC_GetHCLKFreq>
 8007510:	4602      	mov	r2, r0
 8007512:	4b06      	ldr	r3, [pc, #24]	; (800752c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007514:	689b      	ldr	r3, [r3, #8]
 8007516:	0a1b      	lsrs	r3, r3, #8
 8007518:	f003 0307 	and.w	r3, r3, #7
 800751c:	4904      	ldr	r1, [pc, #16]	; (8007530 <HAL_RCC_GetPCLK1Freq+0x28>)
 800751e:	5ccb      	ldrb	r3, [r1, r3]
 8007520:	f003 031f 	and.w	r3, r3, #31
 8007524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007528:	4618      	mov	r0, r3
 800752a:	bd80      	pop	{r7, pc}
 800752c:	40021000 	.word	0x40021000
 8007530:	0800d494 	.word	0x0800d494

08007534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007538:	f7ff ffda 	bl	80074f0 <HAL_RCC_GetHCLKFreq>
 800753c:	4602      	mov	r2, r0
 800753e:	4b06      	ldr	r3, [pc, #24]	; (8007558 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	0adb      	lsrs	r3, r3, #11
 8007544:	f003 0307 	and.w	r3, r3, #7
 8007548:	4904      	ldr	r1, [pc, #16]	; (800755c <HAL_RCC_GetPCLK2Freq+0x28>)
 800754a:	5ccb      	ldrb	r3, [r1, r3]
 800754c:	f003 031f 	and.w	r3, r3, #31
 8007550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007554:	4618      	mov	r0, r3
 8007556:	bd80      	pop	{r7, pc}
 8007558:	40021000 	.word	0x40021000
 800755c:	0800d494 	.word	0x0800d494

08007560 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007560:	b480      	push	{r7}
 8007562:	b083      	sub	sp, #12
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	220f      	movs	r2, #15
 800756e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8007570:	4b12      	ldr	r3, [pc, #72]	; (80075bc <HAL_RCC_GetClockConfig+0x5c>)
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	f003 0203 	and.w	r2, r3, #3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800757c:	4b0f      	ldr	r3, [pc, #60]	; (80075bc <HAL_RCC_GetClockConfig+0x5c>)
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007588:	4b0c      	ldr	r3, [pc, #48]	; (80075bc <HAL_RCC_GetClockConfig+0x5c>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007594:	4b09      	ldr	r3, [pc, #36]	; (80075bc <HAL_RCC_GetClockConfig+0x5c>)
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	08db      	lsrs	r3, r3, #3
 800759a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80075a2:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <HAL_RCC_GetClockConfig+0x60>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f003 0207 	and.w	r2, r3, #7
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	601a      	str	r2, [r3, #0]
}
 80075ae:	bf00      	nop
 80075b0:	370c      	adds	r7, #12
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	40021000 	.word	0x40021000
 80075c0:	40022000 	.word	0x40022000

080075c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b086      	sub	sp, #24
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80075cc:	2300      	movs	r3, #0
 80075ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80075d0:	4b2a      	ldr	r3, [pc, #168]	; (800767c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80075dc:	f7ff f93c 	bl	8006858 <HAL_PWREx_GetVoltageRange>
 80075e0:	6178      	str	r0, [r7, #20]
 80075e2:	e014      	b.n	800760e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80075e4:	4b25      	ldr	r3, [pc, #148]	; (800767c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075e8:	4a24      	ldr	r2, [pc, #144]	; (800767c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ee:	6593      	str	r3, [r2, #88]	; 0x58
 80075f0:	4b22      	ldr	r3, [pc, #136]	; (800767c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80075f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80075fc:	f7ff f92c 	bl	8006858 <HAL_PWREx_GetVoltageRange>
 8007600:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007602:	4b1e      	ldr	r3, [pc, #120]	; (800767c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007606:	4a1d      	ldr	r2, [pc, #116]	; (800767c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800760c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007614:	d10b      	bne.n	800762e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2b80      	cmp	r3, #128	; 0x80
 800761a:	d919      	bls.n	8007650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2ba0      	cmp	r3, #160	; 0xa0
 8007620:	d902      	bls.n	8007628 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007622:	2302      	movs	r3, #2
 8007624:	613b      	str	r3, [r7, #16]
 8007626:	e013      	b.n	8007650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007628:	2301      	movs	r3, #1
 800762a:	613b      	str	r3, [r7, #16]
 800762c:	e010      	b.n	8007650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b80      	cmp	r3, #128	; 0x80
 8007632:	d902      	bls.n	800763a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007634:	2303      	movs	r3, #3
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	e00a      	b.n	8007650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b80      	cmp	r3, #128	; 0x80
 800763e:	d102      	bne.n	8007646 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007640:	2302      	movs	r3, #2
 8007642:	613b      	str	r3, [r7, #16]
 8007644:	e004      	b.n	8007650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b70      	cmp	r3, #112	; 0x70
 800764a:	d101      	bne.n	8007650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800764c:	2301      	movs	r3, #1
 800764e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007650:	4b0b      	ldr	r3, [pc, #44]	; (8007680 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f023 0207 	bic.w	r2, r3, #7
 8007658:	4909      	ldr	r1, [pc, #36]	; (8007680 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	4313      	orrs	r3, r2
 800765e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007660:	4b07      	ldr	r3, [pc, #28]	; (8007680 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0307 	and.w	r3, r3, #7
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	429a      	cmp	r2, r3
 800766c:	d001      	beq.n	8007672 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e000      	b.n	8007674 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3718      	adds	r7, #24
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}
 800767c:	40021000 	.word	0x40021000
 8007680:	40022000 	.word	0x40022000

08007684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b086      	sub	sp, #24
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800768c:	2300      	movs	r3, #0
 800768e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007690:	2300      	movs	r3, #0
 8007692:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800769c:	2b00      	cmp	r3, #0
 800769e:	d031      	beq.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80076a8:	d01a      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80076aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80076ae:	d814      	bhi.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d009      	beq.n	80076c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80076b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076b8:	d10f      	bne.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80076ba:	4b5d      	ldr	r3, [pc, #372]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80076bc:	68db      	ldr	r3, [r3, #12]
 80076be:	4a5c      	ldr	r2, [pc, #368]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80076c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80076c6:	e00c      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	3304      	adds	r3, #4
 80076cc:	2100      	movs	r1, #0
 80076ce:	4618      	mov	r0, r3
 80076d0:	f000 f9ce 	bl	8007a70 <RCCEx_PLLSAI1_Config>
 80076d4:	4603      	mov	r3, r0
 80076d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80076d8:	e003      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	74fb      	strb	r3, [r7, #19]
      break;
 80076de:	e000      	b.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80076e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076e2:	7cfb      	ldrb	r3, [r7, #19]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d10b      	bne.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80076e8:	4b51      	ldr	r3, [pc, #324]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80076ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076f6:	494e      	ldr	r1, [pc, #312]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80076f8:	4313      	orrs	r3, r2
 80076fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80076fe:	e001      	b.n	8007704 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007700:	7cfb      	ldrb	r3, [r7, #19]
 8007702:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800770c:	2b00      	cmp	r3, #0
 800770e:	f000 809e 	beq.w	800784e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007712:	2300      	movs	r3, #0
 8007714:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007716:	4b46      	ldr	r3, [pc, #280]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800771a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d101      	bne.n	8007726 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007722:	2301      	movs	r3, #1
 8007724:	e000      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007726:	2300      	movs	r3, #0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00d      	beq.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800772c:	4b40      	ldr	r3, [pc, #256]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800772e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007730:	4a3f      	ldr	r2, [pc, #252]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007736:	6593      	str	r3, [r2, #88]	; 0x58
 8007738:	4b3d      	ldr	r3, [pc, #244]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800773a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800773c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007740:	60bb      	str	r3, [r7, #8]
 8007742:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007744:	2301      	movs	r3, #1
 8007746:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007748:	4b3a      	ldr	r3, [pc, #232]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a39      	ldr	r2, [pc, #228]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800774e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007752:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007754:	f7fe f8f8 	bl	8005948 <HAL_GetTick>
 8007758:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800775a:	e009      	b.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800775c:	f7fe f8f4 	bl	8005948 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b02      	cmp	r3, #2
 8007768:	d902      	bls.n	8007770 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800776a:	2303      	movs	r3, #3
 800776c:	74fb      	strb	r3, [r7, #19]
        break;
 800776e:	e005      	b.n	800777c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007770:	4b30      	ldr	r3, [pc, #192]	; (8007834 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0ef      	beq.n	800775c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800777c:	7cfb      	ldrb	r3, [r7, #19]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d15a      	bne.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007782:	4b2b      	ldr	r3, [pc, #172]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800778c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d01e      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007798:	697a      	ldr	r2, [r7, #20]
 800779a:	429a      	cmp	r2, r3
 800779c:	d019      	beq.n	80077d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800779e:	4b24      	ldr	r3, [pc, #144]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80077a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80077aa:	4b21      	ldr	r3, [pc, #132]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80077ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077b0:	4a1f      	ldr	r2, [pc, #124]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80077b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80077ba:	4b1d      	ldr	r3, [pc, #116]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80077bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077c0:	4a1b      	ldr	r2, [pc, #108]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80077c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80077ca:	4a19      	ldr	r2, [pc, #100]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	f003 0301 	and.w	r3, r3, #1
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d016      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077dc:	f7fe f8b4 	bl	8005948 <HAL_GetTick>
 80077e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077e2:	e00b      	b.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077e4:	f7fe f8b0 	bl	8005948 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d902      	bls.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80077f6:	2303      	movs	r3, #3
 80077f8:	74fb      	strb	r3, [r7, #19]
            break;
 80077fa:	e006      	b.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80077fc:	4b0c      	ldr	r3, [pc, #48]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80077fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007802:	f003 0302 	and.w	r3, r3, #2
 8007806:	2b00      	cmp	r3, #0
 8007808:	d0ec      	beq.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800780a:	7cfb      	ldrb	r3, [r7, #19]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d10b      	bne.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007810:	4b07      	ldr	r3, [pc, #28]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007816:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800781e:	4904      	ldr	r1, [pc, #16]	; (8007830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007820:	4313      	orrs	r3, r2
 8007822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007826:	e009      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007828:	7cfb      	ldrb	r3, [r7, #19]
 800782a:	74bb      	strb	r3, [r7, #18]
 800782c:	e006      	b.n	800783c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800782e:	bf00      	nop
 8007830:	40021000 	.word	0x40021000
 8007834:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007838:	7cfb      	ldrb	r3, [r7, #19]
 800783a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800783c:	7c7b      	ldrb	r3, [r7, #17]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d105      	bne.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007842:	4b8a      	ldr	r3, [pc, #552]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007846:	4a89      	ldr	r2, [pc, #548]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800784c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d00a      	beq.n	8007870 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800785a:	4b84      	ldr	r3, [pc, #528]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800785c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007860:	f023 0203 	bic.w	r2, r3, #3
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a1b      	ldr	r3, [r3, #32]
 8007868:	4980      	ldr	r1, [pc, #512]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800786a:	4313      	orrs	r3, r2
 800786c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00a      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800787c:	4b7b      	ldr	r3, [pc, #492]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800787e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007882:	f023 020c 	bic.w	r2, r3, #12
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	4978      	ldr	r1, [pc, #480]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800788c:	4313      	orrs	r3, r2
 800788e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f003 0320 	and.w	r3, r3, #32
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800789e:	4b73      	ldr	r3, [pc, #460]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80078a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ac:	496f      	ldr	r1, [pc, #444]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80078ae:	4313      	orrs	r3, r2
 80078b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00a      	beq.n	80078d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80078c0:	4b6a      	ldr	r3, [pc, #424]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80078c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078c6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ce:	4967      	ldr	r1, [pc, #412]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80078d0:	4313      	orrs	r3, r2
 80078d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80078e2:	4b62      	ldr	r3, [pc, #392]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80078e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f0:	495e      	ldr	r1, [pc, #376]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80078f2:	4313      	orrs	r3, r2
 80078f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007904:	4b59      	ldr	r3, [pc, #356]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800790a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007912:	4956      	ldr	r1, [pc, #344]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007914:	4313      	orrs	r3, r2
 8007916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007926:	4b51      	ldr	r3, [pc, #324]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800792c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007934:	494d      	ldr	r1, [pc, #308]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007936:	4313      	orrs	r3, r2
 8007938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007944:	2b00      	cmp	r3, #0
 8007946:	d028      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007948:	4b48      	ldr	r3, [pc, #288]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800794a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800794e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007956:	4945      	ldr	r1, [pc, #276]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007958:	4313      	orrs	r3, r2
 800795a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007966:	d106      	bne.n	8007976 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007968:	4b40      	ldr	r3, [pc, #256]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800796a:	68db      	ldr	r3, [r3, #12]
 800796c:	4a3f      	ldr	r2, [pc, #252]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800796e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007972:	60d3      	str	r3, [r2, #12]
 8007974:	e011      	b.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800797e:	d10c      	bne.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	3304      	adds	r3, #4
 8007984:	2101      	movs	r1, #1
 8007986:	4618      	mov	r0, r3
 8007988:	f000 f872 	bl	8007a70 <RCCEx_PLLSAI1_Config>
 800798c:	4603      	mov	r3, r0
 800798e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007990:	7cfb      	ldrb	r3, [r7, #19]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d001      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007996:	7cfb      	ldrb	r3, [r7, #19]
 8007998:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d028      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80079a6:	4b31      	ldr	r3, [pc, #196]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80079a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b4:	492d      	ldr	r1, [pc, #180]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80079b6:	4313      	orrs	r3, r2
 80079b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079c4:	d106      	bne.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80079c6:	4b29      	ldr	r3, [pc, #164]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	4a28      	ldr	r2, [pc, #160]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80079cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80079d0:	60d3      	str	r3, [r2, #12]
 80079d2:	e011      	b.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80079dc:	d10c      	bne.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3304      	adds	r3, #4
 80079e2:	2101      	movs	r1, #1
 80079e4:	4618      	mov	r0, r3
 80079e6:	f000 f843 	bl	8007a70 <RCCEx_PLLSAI1_Config>
 80079ea:	4603      	mov	r3, r0
 80079ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80079ee:	7cfb      	ldrb	r3, [r7, #19]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80079f4:	7cfb      	ldrb	r3, [r7, #19]
 80079f6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d01c      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007a04:	4b19      	ldr	r3, [pc, #100]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a12:	4916      	ldr	r1, [pc, #88]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007a14:	4313      	orrs	r3, r2
 8007a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007a22:	d10c      	bne.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	3304      	adds	r3, #4
 8007a28:	2102      	movs	r1, #2
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 f820 	bl	8007a70 <RCCEx_PLLSAI1_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007a34:	7cfb      	ldrb	r3, [r7, #19]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8007a3a:	7cfb      	ldrb	r3, [r7, #19]
 8007a3c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d00a      	beq.n	8007a60 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a4a:	4b08      	ldr	r3, [pc, #32]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a50:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a58:	4904      	ldr	r1, [pc, #16]	; (8007a6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007a60:	7cbb      	ldrb	r3, [r7, #18]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3718      	adds	r7, #24
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	40021000 	.word	0x40021000

08007a70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b084      	sub	sp, #16
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a7e:	4b74      	ldr	r3, [pc, #464]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a80:	68db      	ldr	r3, [r3, #12]
 8007a82:	f003 0303 	and.w	r3, r3, #3
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d018      	beq.n	8007abc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007a8a:	4b71      	ldr	r3, [pc, #452]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	f003 0203 	and.w	r2, r3, #3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d10d      	bne.n	8007ab6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
       ||
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d009      	beq.n	8007ab6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007aa2:	4b6b      	ldr	r3, [pc, #428]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007aa4:	68db      	ldr	r3, [r3, #12]
 8007aa6:	091b      	lsrs	r3, r3, #4
 8007aa8:	f003 0307 	and.w	r3, r3, #7
 8007aac:	1c5a      	adds	r2, r3, #1
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
       ||
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d047      	beq.n	8007b46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	73fb      	strb	r3, [r7, #15]
 8007aba:	e044      	b.n	8007b46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2b03      	cmp	r3, #3
 8007ac2:	d018      	beq.n	8007af6 <RCCEx_PLLSAI1_Config+0x86>
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d825      	bhi.n	8007b14 <RCCEx_PLLSAI1_Config+0xa4>
 8007ac8:	2b01      	cmp	r3, #1
 8007aca:	d002      	beq.n	8007ad2 <RCCEx_PLLSAI1_Config+0x62>
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d009      	beq.n	8007ae4 <RCCEx_PLLSAI1_Config+0x74>
 8007ad0:	e020      	b.n	8007b14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007ad2:	4b5f      	ldr	r3, [pc, #380]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d11d      	bne.n	8007b1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ae2:	e01a      	b.n	8007b1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ae4:	4b5a      	ldr	r3, [pc, #360]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d116      	bne.n	8007b1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007af0:	2301      	movs	r3, #1
 8007af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007af4:	e013      	b.n	8007b1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007af6:	4b56      	ldr	r3, [pc, #344]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10f      	bne.n	8007b22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007b02:	4b53      	ldr	r3, [pc, #332]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d109      	bne.n	8007b22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007b12:	e006      	b.n	8007b22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007b14:	2301      	movs	r3, #1
 8007b16:	73fb      	strb	r3, [r7, #15]
      break;
 8007b18:	e004      	b.n	8007b24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007b1a:	bf00      	nop
 8007b1c:	e002      	b.n	8007b24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007b1e:	bf00      	nop
 8007b20:	e000      	b.n	8007b24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007b22:	bf00      	nop
    }

    if(status == HAL_OK)
 8007b24:	7bfb      	ldrb	r3, [r7, #15]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10d      	bne.n	8007b46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007b2a:	4b49      	ldr	r3, [pc, #292]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6819      	ldr	r1, [r3, #0]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	685b      	ldr	r3, [r3, #4]
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	430b      	orrs	r3, r1
 8007b40:	4943      	ldr	r1, [pc, #268]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b42:	4313      	orrs	r3, r2
 8007b44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d17c      	bne.n	8007c46 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007b4c:	4b40      	ldr	r3, [pc, #256]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a3f      	ldr	r2, [pc, #252]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b58:	f7fd fef6 	bl	8005948 <HAL_GetTick>
 8007b5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b5e:	e009      	b.n	8007b74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b60:	f7fd fef2 	bl	8005948 <HAL_GetTick>
 8007b64:	4602      	mov	r2, r0
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d902      	bls.n	8007b74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007b6e:	2303      	movs	r3, #3
 8007b70:	73fb      	strb	r3, [r7, #15]
        break;
 8007b72:	e005      	b.n	8007b80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b74:	4b36      	ldr	r3, [pc, #216]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d1ef      	bne.n	8007b60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d15f      	bne.n	8007c46 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b86:	683b      	ldr	r3, [r7, #0]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d110      	bne.n	8007bae <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b8c:	4b30      	ldr	r3, [pc, #192]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007b94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6892      	ldr	r2, [r2, #8]
 8007b9c:	0211      	lsls	r1, r2, #8
 8007b9e:	687a      	ldr	r2, [r7, #4]
 8007ba0:	68d2      	ldr	r2, [r2, #12]
 8007ba2:	06d2      	lsls	r2, r2, #27
 8007ba4:	430a      	orrs	r2, r1
 8007ba6:	492a      	ldr	r1, [pc, #168]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	610b      	str	r3, [r1, #16]
 8007bac:	e027      	b.n	8007bfe <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d112      	bne.n	8007bda <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bb4:	4b26      	ldr	r3, [pc, #152]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007bbc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	6892      	ldr	r2, [r2, #8]
 8007bc4:	0211      	lsls	r1, r2, #8
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6912      	ldr	r2, [r2, #16]
 8007bca:	0852      	lsrs	r2, r2, #1
 8007bcc:	3a01      	subs	r2, #1
 8007bce:	0552      	lsls	r2, r2, #21
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	491f      	ldr	r1, [pc, #124]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	610b      	str	r3, [r1, #16]
 8007bd8:	e011      	b.n	8007bfe <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bda:	4b1d      	ldr	r3, [pc, #116]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007be2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	6892      	ldr	r2, [r2, #8]
 8007bea:	0211      	lsls	r1, r2, #8
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	6952      	ldr	r2, [r2, #20]
 8007bf0:	0852      	lsrs	r2, r2, #1
 8007bf2:	3a01      	subs	r2, #1
 8007bf4:	0652      	lsls	r2, r2, #25
 8007bf6:	430a      	orrs	r2, r1
 8007bf8:	4915      	ldr	r1, [pc, #84]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007bfe:	4b14      	ldr	r3, [pc, #80]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	4a13      	ldr	r2, [pc, #76]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c04:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007c08:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c0a:	f7fd fe9d 	bl	8005948 <HAL_GetTick>
 8007c0e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c10:	e009      	b.n	8007c26 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007c12:	f7fd fe99 	bl	8005948 <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	2b02      	cmp	r3, #2
 8007c1e:	d902      	bls.n	8007c26 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007c20:	2303      	movs	r3, #3
 8007c22:	73fb      	strb	r3, [r7, #15]
          break;
 8007c24:	e005      	b.n	8007c32 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c26:	4b0a      	ldr	r3, [pc, #40]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d0ef      	beq.n	8007c12 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007c32:	7bfb      	ldrb	r3, [r7, #15]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d106      	bne.n	8007c46 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007c38:	4b05      	ldr	r3, [pc, #20]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c3a:	691a      	ldr	r2, [r3, #16]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	4903      	ldr	r1, [pc, #12]	; (8007c50 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	bd80      	pop	{r7, pc}
 8007c50:	40021000 	.word	0x40021000

08007c54 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d06c      	beq.n	8007d40 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d106      	bne.n	8007c80 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7fd fa92 	bl	80051a4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	22ca      	movs	r2, #202	; 0xca
 8007c8e:	625a      	str	r2, [r3, #36]	; 0x24
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	2253      	movs	r2, #83	; 0x53
 8007c96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fb2d 	bl	80082f8 <RTC_EnterInitMode>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d14b      	bne.n	8007d40 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	6812      	ldr	r2, [r2, #0]
 8007cb2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007cb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cba:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	6899      	ldr	r1, [r3, #8]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	431a      	orrs	r2, r3
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	699b      	ldr	r3, [r3, #24]
 8007cd0:	431a      	orrs	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	68d2      	ldr	r2, [r2, #12]
 8007ce2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	6919      	ldr	r1, [r3, #16]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	041a      	lsls	r2, r3, #16
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fb31 	bl	8008360 <RTC_ExitInitMode>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007d02:	7bfb      	ldrb	r3, [r7, #15]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d11b      	bne.n	8007d40 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f022 0203 	bic.w	r2, r2, #3
 8007d16:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	69da      	ldr	r2, [r3, #28]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	431a      	orrs	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	22ff      	movs	r2, #255	; 0xff
 8007d36:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2201      	movs	r2, #1
 8007d3c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}

08007d4a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007d4a:	b590      	push	{r4, r7, lr}
 8007d4c:	b087      	sub	sp, #28
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	60f8      	str	r0, [r7, #12]
 8007d52:	60b9      	str	r1, [r7, #8]
 8007d54:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d101      	bne.n	8007d64 <HAL_RTC_SetTime+0x1a>
 8007d60:	2302      	movs	r3, #2
 8007d62:	e08b      	b.n	8007e7c <HAL_RTC_SetTime+0x132>
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	22ca      	movs	r2, #202	; 0xca
 8007d7a:	625a      	str	r2, [r3, #36]	; 0x24
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2253      	movs	r2, #83	; 0x53
 8007d82:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f000 fab7 	bl	80082f8 <RTC_EnterInitMode>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007d8e:	7cfb      	ldrb	r3, [r7, #19]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d163      	bne.n	8007e5c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d126      	bne.n	8007de8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d102      	bne.n	8007dae <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	2200      	movs	r2, #0
 8007dac:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	4618      	mov	r0, r3
 8007db4:	f000 fb12 	bl	80083dc <RTC_ByteToBcd2>
 8007db8:	4603      	mov	r3, r0
 8007dba:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	785b      	ldrb	r3, [r3, #1]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f000 fb0b 	bl	80083dc <RTC_ByteToBcd2>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007dca:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	789b      	ldrb	r3, [r3, #2]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 fb03 	bl	80083dc <RTC_ByteToBcd2>
 8007dd6:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007dd8:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	78db      	ldrb	r3, [r3, #3]
 8007de0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007de2:	4313      	orrs	r3, r2
 8007de4:	617b      	str	r3, [r7, #20]
 8007de6:	e018      	b.n	8007e1a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	689b      	ldr	r3, [r3, #8]
 8007dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d102      	bne.n	8007dfc <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	785b      	ldrb	r3, [r3, #1]
 8007e06:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007e08:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007e0a:	68ba      	ldr	r2, [r7, #8]
 8007e0c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007e0e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	78db      	ldrb	r3, [r3, #3]
 8007e14:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007e16:	4313      	orrs	r3, r2
 8007e18:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007e24:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007e28:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	689a      	ldr	r2, [r3, #8]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007e38:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	6899      	ldr	r1, [r3, #8]
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	68da      	ldr	r2, [r3, #12]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	691b      	ldr	r3, [r3, #16]
 8007e48:	431a      	orrs	r2, r3
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f000 fa84 	bl	8008360 <RTC_ExitInitMode>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	22ff      	movs	r2, #255	; 0xff
 8007e62:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007e64:	7cfb      	ldrb	r3, [r7, #19]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d103      	bne.n	8007e72 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007e7a:	7cfb      	ldrb	r3, [r7, #19]
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	371c      	adds	r7, #28
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd90      	pop	{r4, r7, pc}

08007e84 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007e84:	b590      	push	{r4, r7, lr}
 8007e86:	b087      	sub	sp, #28
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e96:	2b01      	cmp	r3, #1
 8007e98:	d101      	bne.n	8007e9e <HAL_RTC_SetDate+0x1a>
 8007e9a:	2302      	movs	r3, #2
 8007e9c:	e075      	b.n	8007f8a <HAL_RTC_SetDate+0x106>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2201      	movs	r2, #1
 8007ea2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	2202      	movs	r2, #2
 8007eaa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d10e      	bne.n	8007ed2 <HAL_RTC_SetDate+0x4e>
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	785b      	ldrb	r3, [r3, #1]
 8007eb8:	f003 0310 	and.w	r3, r3, #16
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d008      	beq.n	8007ed2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	785b      	ldrb	r3, [r3, #1]
 8007ec4:	f023 0310 	bic.w	r3, r3, #16
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	330a      	adds	r3, #10
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d11c      	bne.n	8007f12 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	78db      	ldrb	r3, [r3, #3]
 8007edc:	4618      	mov	r0, r3
 8007ede:	f000 fa7d 	bl	80083dc <RTC_ByteToBcd2>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	785b      	ldrb	r3, [r3, #1]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fa76 	bl	80083dc <RTC_ByteToBcd2>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007ef4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007ef6:	68bb      	ldr	r3, [r7, #8]
 8007ef8:	789b      	ldrb	r3, [r3, #2]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f000 fa6e 	bl	80083dc <RTC_ByteToBcd2>
 8007f00:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007f02:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	617b      	str	r3, [r7, #20]
 8007f10:	e00e      	b.n	8007f30 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	78db      	ldrb	r3, [r3, #3]
 8007f16:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	785b      	ldrb	r3, [r3, #1]
 8007f1c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007f1e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007f20:	68ba      	ldr	r2, [r7, #8]
 8007f22:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007f24:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007f2c:	4313      	orrs	r3, r2
 8007f2e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	22ca      	movs	r2, #202	; 0xca
 8007f36:	625a      	str	r2, [r3, #36]	; 0x24
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	2253      	movs	r2, #83	; 0x53
 8007f3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	f000 f9d9 	bl	80082f8 <RTC_EnterInitMode>
 8007f46:	4603      	mov	r3, r0
 8007f48:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007f4a:	7cfb      	ldrb	r3, [r7, #19]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10c      	bne.n	8007f6a <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007f5a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f5e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f000 f9fd 	bl	8008360 <RTC_ExitInitMode>
 8007f66:	4603      	mov	r3, r0
 8007f68:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	22ff      	movs	r2, #255	; 0xff
 8007f70:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007f72:	7cfb      	ldrb	r3, [r7, #19]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d103      	bne.n	8007f80 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8007f88:	7cfb      	ldrb	r3, [r7, #19]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	371c      	adds	r7, #28
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd90      	pop	{r4, r7, pc}
	...

08007f94 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007f94:	b590      	push	{r4, r7, lr}
 8007f96:	b089      	sub	sp, #36	; 0x24
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d101      	bne.n	8007fae <HAL_RTC_SetAlarm_IT+0x1a>
 8007faa:	2302      	movs	r3, #2
 8007fac:	e127      	b.n	80081fe <HAL_RTC_SetAlarm_IT+0x26a>
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	2202      	movs	r2, #2
 8007fba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if (Format == RTC_FORMAT_BIN)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d137      	bne.n	8008034 <HAL_RTC_SetAlarm_IT+0xa0>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	689b      	ldr	r3, [r3, #8]
 8007fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d102      	bne.n	8007fd8 <HAL_RTC_SetAlarm_IT+0x44>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 f9fd 	bl	80083dc <RTC_ByteToBcd2>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	785b      	ldrb	r3, [r3, #1]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f000 f9f6 	bl	80083dc <RTC_ByteToBcd2>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8007ff4:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	789b      	ldrb	r3, [r3, #2]
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f000 f9ee 	bl	80083dc <RTC_ByteToBcd2>
 8008000:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8008002:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	78db      	ldrb	r3, [r3, #3]
 800800a:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800800c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f9e0 	bl	80083dc <RTC_ByteToBcd2>
 800801c:	4603      	mov	r3, r0
 800801e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8008020:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008028:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800802e:	4313      	orrs	r3, r2
 8008030:	61fb      	str	r3, [r7, #28]
 8008032:	e023      	b.n	800807c <HAL_RTC_SetAlarm_IT+0xe8>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	689b      	ldr	r3, [r3, #8]
 800803a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800803e:	2b00      	cmp	r3, #0
 8008040:	d102      	bne.n	8008048 <HAL_RTC_SetAlarm_IT+0xb4>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	2200      	movs	r2, #0
 8008046:	70da      	strb	r2, [r3, #3]
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

#endif /* USE_FULL_ASSERT */
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	785b      	ldrb	r3, [r3, #1]
 8008052:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008054:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008056:	68ba      	ldr	r2, [r7, #8]
 8008058:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800805a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	78db      	ldrb	r3, [r3, #3]
 8008060:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8008062:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800806a:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800806c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8008072:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8008078:	4313      	orrs	r3, r2
 800807a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	685a      	ldr	r2, [r3, #4]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	69db      	ldr	r3, [r3, #28]
 8008084:	4313      	orrs	r3, r2
 8008086:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	22ca      	movs	r2, #202	; 0xca
 800808e:	625a      	str	r2, [r3, #36]	; 0x24
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2253      	movs	r2, #83	; 0x53
 8008096:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080a0:	d14a      	bne.n	8008138 <HAL_RTC_SetAlarm_IT+0x1a4>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689a      	ldr	r2, [r3, #8]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080b0:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	68db      	ldr	r3, [r3, #12]
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80080c2:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRAWF)
    uint32_t tickstart = HAL_GetTick();
 80080c4:	f7fd fc40 	bl	8005948 <HAL_GetTick>
 80080c8:	6138      	str	r0, [r7, #16]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80080ca:	e015      	b.n	80080f8 <HAL_RTC_SetAlarm_IT+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80080cc:	f7fd fc3c 	bl	8005948 <HAL_GetTick>
 80080d0:	4602      	mov	r2, r0
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	1ad3      	subs	r3, r2, r3
 80080d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80080da:	d90d      	bls.n	80080f8 <HAL_RTC_SetAlarm_IT+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	22ff      	movs	r2, #255	; 0xff
 80080e2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2203      	movs	r2, #3
 80080e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 80080f4:	2303      	movs	r3, #3
 80080f6:	e082      	b.n	80081fe <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0e2      	beq.n	80080cc <HAL_RTC_SetAlarm_IT+0x138>
      }
    }
#endif

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	69fa      	ldr	r2, [r7, #28]
 800810c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	689a      	ldr	r2, [r3, #8]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008124:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008134:	609a      	str	r2, [r3, #8]
 8008136:	e049      	b.n	80081cc <HAL_RTC_SetAlarm_IT+0x238>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	689a      	ldr	r2, [r3, #8]
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008146:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	68db      	ldr	r3, [r3, #12]
 800814e:	b2da      	uxtb	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f462 7220 	orn	r2, r2, #640	; 0x280
 8008158:	60da      	str	r2, [r3, #12]

#if defined (RTC_FLAG_ALRBWF)
    uint32_t tickstart = HAL_GetTick();
 800815a:	f7fd fbf5 	bl	8005948 <HAL_GetTick>
 800815e:	6178      	str	r0, [r7, #20]
    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 8008160:	e015      	b.n	800818e <HAL_RTC_SetAlarm_IT+0x1fa>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008162:	f7fd fbf1 	bl	8005948 <HAL_GetTick>
 8008166:	4602      	mov	r2, r0
 8008168:	697b      	ldr	r3, [r7, #20]
 800816a:	1ad3      	subs	r3, r2, r3
 800816c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008170:	d90d      	bls.n	800818e <HAL_RTC_SetAlarm_IT+0x1fa>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	22ff      	movs	r2, #255	; 0xff
 8008178:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2203      	movs	r2, #3
 800817e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2200      	movs	r2, #0
 8008186:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800818a:	2303      	movs	r3, #3
 800818c:	e037      	b.n	80081fe <HAL_RTC_SetAlarm_IT+0x26a>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	68db      	ldr	r3, [r3, #12]
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d0e2      	beq.n	8008162 <HAL_RTC_SetAlarm_IT+0x1ce>
      }
    }
#endif

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	69fa      	ldr	r2, [r7, #28]
 80081a2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	69ba      	ldr	r2, [r7, #24]
 80081aa:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80081ba:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	689a      	ldr	r2, [r3, #8]
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80081ca:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80081cc:	4b0e      	ldr	r3, [pc, #56]	; (8008208 <HAL_RTC_SetAlarm_IT+0x274>)
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	4a0d      	ldr	r2, [pc, #52]	; (8008208 <HAL_RTC_SetAlarm_IT+0x274>)
 80081d2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081d6:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 80081d8:	4b0b      	ldr	r3, [pc, #44]	; (8008208 <HAL_RTC_SetAlarm_IT+0x274>)
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	4a0a      	ldr	r2, [pc, #40]	; (8008208 <HAL_RTC_SetAlarm_IT+0x274>)
 80081de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80081e2:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	22ff      	movs	r2, #255	; 0xff
 80081ea:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80081fc:	2300      	movs	r3, #0
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3724      	adds	r7, #36	; 0x24
 8008202:	46bd      	mov	sp, r7
 8008204:	bd90      	pop	{r4, r7, pc}
 8008206:	bf00      	nop
 8008208:	40010400 	.word	0x40010400

0800820c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b082      	sub	sp, #8
 8008210:	af00      	add	r7, sp, #0
 8008212:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8008214:	4b1f      	ldr	r3, [pc, #124]	; (8008294 <HAL_RTC_AlarmIRQHandler+0x88>)
 8008216:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800821a:	615a      	str	r2, [r3, #20]
  }

#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	689b      	ldr	r3, [r3, #8]
 8008222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d012      	beq.n	8008250 <HAL_RTC_AlarmIRQHandler+0x44>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	68db      	ldr	r3, [r3, #12]
 8008230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00b      	beq.n	8008250 <HAL_RTC_AlarmIRQHandler+0x44>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68db      	ldr	r3, [r3, #12]
 800823e:	b2da      	uxtb	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8008248:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f824 	bl	8008298 <HAL_RTC_AlarmAEventCallback>
#endif
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800825a:	2b00      	cmp	r3, #0
 800825c:	d012      	beq.n	8008284 <HAL_RTC_AlarmIRQHandler+0x78>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008268:	2b00      	cmp	r3, #0
 800826a:	d00b      	beq.n	8008284 <HAL_RTC_AlarmIRQHandler+0x78>
    {
      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68db      	ldr	r3, [r3, #12]
 8008272:	b2da      	uxtb	r2, r3
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	f462 7220 	orn	r2, r2, #640	; 0x280
 800827c:	60da      	str	r2, [r3, #12]

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 f8cc 	bl	800841c <HAL_RTCEx_AlarmBEventCallback>
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800828c:	bf00      	nop
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}
 8008294:	40010400 	.word	0x40010400

08008298 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80082a0:	bf00      	nop
 80082a2:	370c      	adds	r7, #12
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	68da      	ldr	r2, [r3, #12]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80082c2:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80082c4:	f7fd fb40 	bl	8005948 <HAL_GetTick>
 80082c8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80082ca:	e009      	b.n	80082e0 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80082cc:	f7fd fb3c 	bl	8005948 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082da:	d901      	bls.n	80082e0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80082dc:	2303      	movs	r3, #3
 80082de:	e007      	b.n	80082f0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	68db      	ldr	r3, [r3, #12]
 80082e6:	f003 0320 	and.w	r3, r3, #32
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0ee      	beq.n	80082cc <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}

080082f8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	b084      	sub	sp, #16
 80082fc:	af00      	add	r7, sp, #0
 80082fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800830e:	2b00      	cmp	r3, #0
 8008310:	d120      	bne.n	8008354 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f04f 32ff 	mov.w	r2, #4294967295
 800831a:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800831c:	f7fd fb14 	bl	8005948 <HAL_GetTick>
 8008320:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008322:	e00d      	b.n	8008340 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008324:	f7fd fb10 	bl	8005948 <HAL_GetTick>
 8008328:	4602      	mov	r2, r0
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	1ad3      	subs	r3, r2, r3
 800832e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008332:	d905      	bls.n	8008340 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008334:	2303      	movs	r3, #3
 8008336:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2203      	movs	r2, #3
 800833c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	68db      	ldr	r3, [r3, #12]
 8008346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800834a:	2b00      	cmp	r3, #0
 800834c:	d102      	bne.n	8008354 <RTC_EnterInitMode+0x5c>
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	2b03      	cmp	r3, #3
 8008352:	d1e7      	bne.n	8008324 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008354:	7bfb      	ldrb	r3, [r7, #15]
}
 8008356:	4618      	mov	r0, r3
 8008358:	3710      	adds	r7, #16
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
	...

08008360 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800836c:	4b1a      	ldr	r3, [pc, #104]	; (80083d8 <RTC_ExitInitMode+0x78>)
 800836e:	68db      	ldr	r3, [r3, #12]
 8008370:	4a19      	ldr	r2, [pc, #100]	; (80083d8 <RTC_ExitInitMode+0x78>)
 8008372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008376:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008378:	4b17      	ldr	r3, [pc, #92]	; (80083d8 <RTC_ExitInitMode+0x78>)
 800837a:	689b      	ldr	r3, [r3, #8]
 800837c:	f003 0320 	and.w	r3, r3, #32
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10c      	bne.n	800839e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f7ff ff91 	bl	80082ac <HAL_RTC_WaitForSynchro>
 800838a:	4603      	mov	r3, r0
 800838c:	2b00      	cmp	r3, #0
 800838e:	d01e      	beq.n	80083ce <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2203      	movs	r2, #3
 8008394:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	73fb      	strb	r3, [r7, #15]
 800839c:	e017      	b.n	80083ce <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800839e:	4b0e      	ldr	r3, [pc, #56]	; (80083d8 <RTC_ExitInitMode+0x78>)
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	4a0d      	ldr	r2, [pc, #52]	; (80083d8 <RTC_ExitInitMode+0x78>)
 80083a4:	f023 0320 	bic.w	r3, r3, #32
 80083a8:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff ff7e 	bl	80082ac <HAL_RTC_WaitForSynchro>
 80083b0:	4603      	mov	r3, r0
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d005      	beq.n	80083c2 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2203      	movs	r2, #3
 80083ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80083be:	2303      	movs	r3, #3
 80083c0:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80083c2:	4b05      	ldr	r3, [pc, #20]	; (80083d8 <RTC_ExitInitMode+0x78>)
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	4a04      	ldr	r2, [pc, #16]	; (80083d8 <RTC_ExitInitMode+0x78>)
 80083c8:	f043 0320 	orr.w	r3, r3, #32
 80083cc:	6093      	str	r3, [r2, #8]
  }

  return status;
 80083ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3710      	adds	r7, #16
 80083d4:	46bd      	mov	sp, r7
 80083d6:	bd80      	pop	{r7, pc}
 80083d8:	40002800 	.word	0x40002800

080083dc <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80083dc:	b480      	push	{r7}
 80083de:	b085      	sub	sp, #20
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	4603      	mov	r3, r0
 80083e4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80083e6:	2300      	movs	r3, #0
 80083e8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80083ea:	79fb      	ldrb	r3, [r7, #7]
 80083ec:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80083ee:	e005      	b.n	80083fc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	3301      	adds	r3, #1
 80083f4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80083f6:	7afb      	ldrb	r3, [r7, #11]
 80083f8:	3b0a      	subs	r3, #10
 80083fa:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80083fc:	7afb      	ldrb	r3, [r7, #11]
 80083fe:	2b09      	cmp	r3, #9
 8008400:	d8f6      	bhi.n	80083f0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	b2db      	uxtb	r3, r3
 8008406:	011b      	lsls	r3, r3, #4
 8008408:	b2da      	uxtb	r2, r3
 800840a:	7afb      	ldrb	r3, [r7, #11]
 800840c:	4313      	orrs	r3, r2
 800840e:	b2db      	uxtb	r3, r3
}
 8008410:	4618      	mov	r0, r3
 8008412:	3714      	adds	r7, #20
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8008424:	bf00      	nop
 8008426:	370c      	adds	r7, #12
 8008428:	46bd      	mov	sp, r7
 800842a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842e:	4770      	bx	lr

08008430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d101      	bne.n	8008442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800843e:	2301      	movs	r3, #1
 8008440:	e049      	b.n	80084d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d106      	bne.n	800845c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7fc fedc 	bl	8005214 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	3304      	adds	r3, #4
 800846c:	4619      	mov	r1, r3
 800846e:	4610      	mov	r0, r2
 8008470:	f000 fbc6 	bl	8008c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2201      	movs	r2, #1
 8008480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2201      	movs	r2, #1
 8008488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2201      	movs	r2, #1
 8008490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2201      	movs	r2, #1
 80084c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
	...

080084e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b085      	sub	sp, #20
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ee:	b2db      	uxtb	r3, r3
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d001      	beq.n	80084f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e03b      	b.n	8008570 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68da      	ldr	r2, [r3, #12]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f042 0201 	orr.w	r2, r2, #1
 800850e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a19      	ldr	r2, [pc, #100]	; (800857c <HAL_TIM_Base_Start_IT+0x9c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d009      	beq.n	800852e <HAL_TIM_Base_Start_IT+0x4e>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008522:	d004      	beq.n	800852e <HAL_TIM_Base_Start_IT+0x4e>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a15      	ldr	r2, [pc, #84]	; (8008580 <HAL_TIM_Base_Start_IT+0xa0>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d115      	bne.n	800855a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	689a      	ldr	r2, [r3, #8]
 8008534:	4b13      	ldr	r3, [pc, #76]	; (8008584 <HAL_TIM_Base_Start_IT+0xa4>)
 8008536:	4013      	ands	r3, r2
 8008538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2b06      	cmp	r3, #6
 800853e:	d015      	beq.n	800856c <HAL_TIM_Base_Start_IT+0x8c>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008546:	d011      	beq.n	800856c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	681a      	ldr	r2, [r3, #0]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f042 0201 	orr.w	r2, r2, #1
 8008556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008558:	e008      	b.n	800856c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	681a      	ldr	r2, [r3, #0]
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f042 0201 	orr.w	r2, r2, #1
 8008568:	601a      	str	r2, [r3, #0]
 800856a:	e000      	b.n	800856e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800856c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	40012c00 	.word	0x40012c00
 8008580:	40014000 	.word	0x40014000
 8008584:	00010007 	.word	0x00010007

08008588 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68da      	ldr	r2, [r3, #12]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	f022 0201 	bic.w	r2, r2, #1
 800859e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	6a1a      	ldr	r2, [r3, #32]
 80085a6:	f241 1311 	movw	r3, #4369	; 0x1111
 80085aa:	4013      	ands	r3, r2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d10f      	bne.n	80085d0 <HAL_TIM_Base_Stop_IT+0x48>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6a1a      	ldr	r2, [r3, #32]
 80085b6:	f240 4344 	movw	r3, #1092	; 0x444
 80085ba:	4013      	ands	r3, r2
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d107      	bne.n	80085d0 <HAL_TIM_Base_Stop_IT+0x48>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681a      	ldr	r2, [r3, #0]
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	f022 0201 	bic.w	r2, r2, #1
 80085ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2201      	movs	r2, #1
 80085d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	370c      	adds	r7, #12
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr

080085e6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80085e6:	b580      	push	{r7, lr}
 80085e8:	b082      	sub	sp, #8
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d101      	bne.n	80085f8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	e049      	b.n	800868c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085fe:	b2db      	uxtb	r3, r3
 8008600:	2b00      	cmp	r3, #0
 8008602:	d106      	bne.n	8008612 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 f841 	bl	8008694 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2202      	movs	r2, #2
 8008616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	3304      	adds	r3, #4
 8008622:	4619      	mov	r1, r3
 8008624:	4610      	mov	r0, r2
 8008626:	f000 faeb 	bl	8008c00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	2201      	movs	r2, #1
 8008646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	2201      	movs	r2, #1
 800864e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2201      	movs	r2, #1
 800866e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2201      	movs	r2, #1
 8008686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800868a:	2300      	movs	r3, #0
}
 800868c:	4618      	mov	r0, r3
 800868e:	3708      	adds	r7, #8
 8008690:	46bd      	mov	sp, r7
 8008692:	bd80      	pop	{r7, pc}

08008694 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b082      	sub	sp, #8
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	f003 0302 	and.w	r3, r3, #2
 80086ba:	2b02      	cmp	r3, #2
 80086bc:	d122      	bne.n	8008704 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f003 0302 	and.w	r3, r3, #2
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d11b      	bne.n	8008704 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f06f 0202 	mvn.w	r2, #2
 80086d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2201      	movs	r2, #1
 80086da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	f003 0303 	and.w	r3, r3, #3
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa6a 	bl	8008bc4 <HAL_TIM_IC_CaptureCallback>
 80086f0:	e005      	b.n	80086fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa5c 	bl	8008bb0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fa6d 	bl	8008bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f003 0304 	and.w	r3, r3, #4
 800870e:	2b04      	cmp	r3, #4
 8008710:	d122      	bne.n	8008758 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f003 0304 	and.w	r3, r3, #4
 800871c:	2b04      	cmp	r3, #4
 800871e:	d11b      	bne.n	8008758 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f06f 0204 	mvn.w	r2, #4
 8008728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2202      	movs	r2, #2
 800872e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fa40 	bl	8008bc4 <HAL_TIM_IC_CaptureCallback>
 8008744:	e005      	b.n	8008752 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fa32 	bl	8008bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800874c:	6878      	ldr	r0, [r7, #4]
 800874e:	f000 fa43 	bl	8008bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	f003 0308 	and.w	r3, r3, #8
 8008762:	2b08      	cmp	r3, #8
 8008764:	d122      	bne.n	80087ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	f003 0308 	and.w	r3, r3, #8
 8008770:	2b08      	cmp	r3, #8
 8008772:	d11b      	bne.n	80087ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f06f 0208 	mvn.w	r2, #8
 800877c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2204      	movs	r2, #4
 8008782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	f003 0303 	and.w	r3, r3, #3
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f000 fa16 	bl	8008bc4 <HAL_TIM_IC_CaptureCallback>
 8008798:	e005      	b.n	80087a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 fa08 	bl	8008bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a0:	6878      	ldr	r0, [r7, #4]
 80087a2:	f000 fa19 	bl	8008bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	691b      	ldr	r3, [r3, #16]
 80087b2:	f003 0310 	and.w	r3, r3, #16
 80087b6:	2b10      	cmp	r3, #16
 80087b8:	d122      	bne.n	8008800 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68db      	ldr	r3, [r3, #12]
 80087c0:	f003 0310 	and.w	r3, r3, #16
 80087c4:	2b10      	cmp	r3, #16
 80087c6:	d11b      	bne.n	8008800 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f06f 0210 	mvn.w	r2, #16
 80087d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2208      	movs	r2, #8
 80087d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	69db      	ldr	r3, [r3, #28]
 80087de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f000 f9ec 	bl	8008bc4 <HAL_TIM_IC_CaptureCallback>
 80087ec:	e005      	b.n	80087fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f9de 	bl	8008bb0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f000 f9ef 	bl	8008bd8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2200      	movs	r2, #0
 80087fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b01      	cmp	r3, #1
 800880c:	d10e      	bne.n	800882c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	f003 0301 	and.w	r3, r3, #1
 8008818:	2b01      	cmp	r3, #1
 800881a:	d107      	bne.n	800882c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f06f 0201 	mvn.w	r2, #1
 8008824:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7fc fc44 	bl	80050b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008836:	2b80      	cmp	r3, #128	; 0x80
 8008838:	d10e      	bne.n	8008858 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008844:	2b80      	cmp	r3, #128	; 0x80
 8008846:	d107      	bne.n	8008858 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f000 fc4e 	bl	80090f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008866:	d10e      	bne.n	8008886 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008872:	2b80      	cmp	r3, #128	; 0x80
 8008874:	d107      	bne.n	8008886 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800887e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fc41 	bl	8009108 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008890:	2b40      	cmp	r3, #64	; 0x40
 8008892:	d10e      	bne.n	80088b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800889e:	2b40      	cmp	r3, #64	; 0x40
 80088a0:	d107      	bne.n	80088b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 f99d 	bl	8008bec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	691b      	ldr	r3, [r3, #16]
 80088b8:	f003 0320 	and.w	r3, r3, #32
 80088bc:	2b20      	cmp	r3, #32
 80088be:	d10e      	bne.n	80088de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	f003 0320 	and.w	r3, r3, #32
 80088ca:	2b20      	cmp	r3, #32
 80088cc:	d107      	bne.n	80088de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f06f 0220 	mvn.w	r2, #32
 80088d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 fc01 	bl	80090e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088de:	bf00      	nop
 80088e0:	3708      	adds	r7, #8
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}

080088e6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80088e6:	b580      	push	{r7, lr}
 80088e8:	b086      	sub	sp, #24
 80088ea:	af00      	add	r7, sp, #0
 80088ec:	60f8      	str	r0, [r7, #12]
 80088ee:	60b9      	str	r1, [r7, #8]
 80088f0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088f2:	2300      	movs	r3, #0
 80088f4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088fc:	2b01      	cmp	r3, #1
 80088fe:	d101      	bne.n	8008904 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008900:	2302      	movs	r3, #2
 8008902:	e088      	b.n	8008a16 <HAL_TIM_IC_ConfigChannel+0x130>
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d11b      	bne.n	800894a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	6818      	ldr	r0, [r3, #0]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	6819      	ldr	r1, [r3, #0]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	685a      	ldr	r2, [r3, #4]
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	f000 f9d1 	bl	8008cc8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	699a      	ldr	r2, [r3, #24]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f022 020c 	bic.w	r2, r2, #12
 8008934:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	6999      	ldr	r1, [r3, #24]
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	689a      	ldr	r2, [r3, #8]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	430a      	orrs	r2, r1
 8008946:	619a      	str	r2, [r3, #24]
 8008948:	e060      	b.n	8008a0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b04      	cmp	r3, #4
 800894e:	d11c      	bne.n	800898a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	6818      	ldr	r0, [r3, #0]
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	6819      	ldr	r1, [r3, #0]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	68db      	ldr	r3, [r3, #12]
 8008960:	f000 fa37 	bl	8008dd2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	699a      	ldr	r2, [r3, #24]
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008972:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	6999      	ldr	r1, [r3, #24]
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	021a      	lsls	r2, r3, #8
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	430a      	orrs	r2, r1
 8008986:	619a      	str	r2, [r3, #24]
 8008988:	e040      	b.n	8008a0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b08      	cmp	r3, #8
 800898e:	d11b      	bne.n	80089c8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6818      	ldr	r0, [r3, #0]
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	6819      	ldr	r1, [r3, #0]
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	f000 fa84 	bl	8008eac <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	69da      	ldr	r2, [r3, #28]
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f022 020c 	bic.w	r2, r2, #12
 80089b2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	69d9      	ldr	r1, [r3, #28]
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	689a      	ldr	r2, [r3, #8]
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	430a      	orrs	r2, r1
 80089c4:	61da      	str	r2, [r3, #28]
 80089c6:	e021      	b.n	8008a0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2b0c      	cmp	r3, #12
 80089cc:	d11c      	bne.n	8008a08 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	6818      	ldr	r0, [r3, #0]
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	6819      	ldr	r1, [r3, #0]
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	68db      	ldr	r3, [r3, #12]
 80089de:	f000 faa1 	bl	8008f24 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	69da      	ldr	r2, [r3, #28]
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80089f0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	69d9      	ldr	r1, [r3, #28]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	021a      	lsls	r2, r3, #8
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	430a      	orrs	r2, r1
 8008a04:	61da      	str	r2, [r3, #28]
 8008a06:	e001      	b.n	8008a0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3718      	adds	r7, #24
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d101      	bne.n	8008a3a <HAL_TIM_ConfigClockSource+0x1c>
 8008a36:	2302      	movs	r3, #2
 8008a38:	e0b6      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x18a>
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	2202      	movs	r2, #2
 8008a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	689b      	ldr	r3, [r3, #8]
 8008a50:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a58:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008a5c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a64:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a76:	d03e      	beq.n	8008af6 <HAL_TIM_ConfigClockSource+0xd8>
 8008a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a7c:	f200 8087 	bhi.w	8008b8e <HAL_TIM_ConfigClockSource+0x170>
 8008a80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a84:	f000 8086 	beq.w	8008b94 <HAL_TIM_ConfigClockSource+0x176>
 8008a88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a8c:	d87f      	bhi.n	8008b8e <HAL_TIM_ConfigClockSource+0x170>
 8008a8e:	2b70      	cmp	r3, #112	; 0x70
 8008a90:	d01a      	beq.n	8008ac8 <HAL_TIM_ConfigClockSource+0xaa>
 8008a92:	2b70      	cmp	r3, #112	; 0x70
 8008a94:	d87b      	bhi.n	8008b8e <HAL_TIM_ConfigClockSource+0x170>
 8008a96:	2b60      	cmp	r3, #96	; 0x60
 8008a98:	d050      	beq.n	8008b3c <HAL_TIM_ConfigClockSource+0x11e>
 8008a9a:	2b60      	cmp	r3, #96	; 0x60
 8008a9c:	d877      	bhi.n	8008b8e <HAL_TIM_ConfigClockSource+0x170>
 8008a9e:	2b50      	cmp	r3, #80	; 0x50
 8008aa0:	d03c      	beq.n	8008b1c <HAL_TIM_ConfigClockSource+0xfe>
 8008aa2:	2b50      	cmp	r3, #80	; 0x50
 8008aa4:	d873      	bhi.n	8008b8e <HAL_TIM_ConfigClockSource+0x170>
 8008aa6:	2b40      	cmp	r3, #64	; 0x40
 8008aa8:	d058      	beq.n	8008b5c <HAL_TIM_ConfigClockSource+0x13e>
 8008aaa:	2b40      	cmp	r3, #64	; 0x40
 8008aac:	d86f      	bhi.n	8008b8e <HAL_TIM_ConfigClockSource+0x170>
 8008aae:	2b30      	cmp	r3, #48	; 0x30
 8008ab0:	d064      	beq.n	8008b7c <HAL_TIM_ConfigClockSource+0x15e>
 8008ab2:	2b30      	cmp	r3, #48	; 0x30
 8008ab4:	d86b      	bhi.n	8008b8e <HAL_TIM_ConfigClockSource+0x170>
 8008ab6:	2b20      	cmp	r3, #32
 8008ab8:	d060      	beq.n	8008b7c <HAL_TIM_ConfigClockSource+0x15e>
 8008aba:	2b20      	cmp	r3, #32
 8008abc:	d867      	bhi.n	8008b8e <HAL_TIM_ConfigClockSource+0x170>
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d05c      	beq.n	8008b7c <HAL_TIM_ConfigClockSource+0x15e>
 8008ac2:	2b10      	cmp	r3, #16
 8008ac4:	d05a      	beq.n	8008b7c <HAL_TIM_ConfigClockSource+0x15e>
 8008ac6:	e062      	b.n	8008b8e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6818      	ldr	r0, [r3, #0]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	6899      	ldr	r1, [r3, #8]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
 8008ad8:	f000 fa7c 	bl	8008fd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008aea:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	68ba      	ldr	r2, [r7, #8]
 8008af2:	609a      	str	r2, [r3, #8]
      break;
 8008af4:	e04f      	b.n	8008b96 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6818      	ldr	r0, [r3, #0]
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	6899      	ldr	r1, [r3, #8]
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	685a      	ldr	r2, [r3, #4]
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	f000 fa65 	bl	8008fd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	689a      	ldr	r2, [r3, #8]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b18:	609a      	str	r2, [r3, #8]
      break;
 8008b1a:	e03c      	b.n	8008b96 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6818      	ldr	r0, [r3, #0]
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	6859      	ldr	r1, [r3, #4]
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	68db      	ldr	r3, [r3, #12]
 8008b28:	461a      	mov	r2, r3
 8008b2a:	f000 f923 	bl	8008d74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	2150      	movs	r1, #80	; 0x50
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 fa32 	bl	8008f9e <TIM_ITRx_SetConfig>
      break;
 8008b3a:	e02c      	b.n	8008b96 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6818      	ldr	r0, [r3, #0]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	6859      	ldr	r1, [r3, #4]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	461a      	mov	r2, r3
 8008b4a:	f000 f97f 	bl	8008e4c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	2160      	movs	r1, #96	; 0x60
 8008b54:	4618      	mov	r0, r3
 8008b56:	f000 fa22 	bl	8008f9e <TIM_ITRx_SetConfig>
      break;
 8008b5a:	e01c      	b.n	8008b96 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6818      	ldr	r0, [r3, #0]
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	6859      	ldr	r1, [r3, #4]
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	461a      	mov	r2, r3
 8008b6a:	f000 f903 	bl	8008d74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	2140      	movs	r1, #64	; 0x40
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 fa12 	bl	8008f9e <TIM_ITRx_SetConfig>
      break;
 8008b7a:	e00c      	b.n	8008b96 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4619      	mov	r1, r3
 8008b86:	4610      	mov	r0, r2
 8008b88:	f000 fa09 	bl	8008f9e <TIM_ITRx_SetConfig>
      break;
 8008b8c:	e003      	b.n	8008b96 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	73fb      	strb	r3, [r7, #15]
      break;
 8008b92:	e000      	b.n	8008b96 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8008b94:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2201      	movs	r2, #1
 8008b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ba8:	4618      	mov	r0, r3
 8008baa:	3710      	adds	r7, #16
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr

08008c00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]
 8008c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a2a      	ldr	r2, [pc, #168]	; (8008cbc <TIM_Base_SetConfig+0xbc>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d003      	beq.n	8008c20 <TIM_Base_SetConfig+0x20>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c1e:	d108      	bne.n	8008c32 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	685b      	ldr	r3, [r3, #4]
 8008c2c:	68fa      	ldr	r2, [r7, #12]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a21      	ldr	r2, [pc, #132]	; (8008cbc <TIM_Base_SetConfig+0xbc>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d00b      	beq.n	8008c52 <TIM_Base_SetConfig+0x52>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c40:	d007      	beq.n	8008c52 <TIM_Base_SetConfig+0x52>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a1e      	ldr	r2, [pc, #120]	; (8008cc0 <TIM_Base_SetConfig+0xc0>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d003      	beq.n	8008c52 <TIM_Base_SetConfig+0x52>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a1d      	ldr	r2, [pc, #116]	; (8008cc4 <TIM_Base_SetConfig+0xc4>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d108      	bne.n	8008c64 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	68db      	ldr	r3, [r3, #12]
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	4313      	orrs	r3, r2
 8008c62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	68fa      	ldr	r2, [r7, #12]
 8008c76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	689a      	ldr	r2, [r3, #8]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	681a      	ldr	r2, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a0c      	ldr	r2, [pc, #48]	; (8008cbc <TIM_Base_SetConfig+0xbc>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d007      	beq.n	8008ca0 <TIM_Base_SetConfig+0xa0>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	4a0b      	ldr	r2, [pc, #44]	; (8008cc0 <TIM_Base_SetConfig+0xc0>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d003      	beq.n	8008ca0 <TIM_Base_SetConfig+0xa0>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a0a      	ldr	r2, [pc, #40]	; (8008cc4 <TIM_Base_SetConfig+0xc4>)
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	d103      	bne.n	8008ca8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	691a      	ldr	r2, [r3, #16]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	615a      	str	r2, [r3, #20]
}
 8008cae:	bf00      	nop
 8008cb0:	3714      	adds	r7, #20
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb8:	4770      	bx	lr
 8008cba:	bf00      	nop
 8008cbc:	40012c00 	.word	0x40012c00
 8008cc0:	40014000 	.word	0x40014000
 8008cc4:	40014400 	.word	0x40014400

08008cc8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b087      	sub	sp, #28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
 8008cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6a1b      	ldr	r3, [r3, #32]
 8008cda:	f023 0201 	bic.w	r2, r3, #1
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6a1b      	ldr	r3, [r3, #32]
 8008cec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	4a1e      	ldr	r2, [pc, #120]	; (8008d6c <TIM_TI1_SetConfig+0xa4>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d007      	beq.n	8008d06 <TIM_TI1_SetConfig+0x3e>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cfc:	d003      	beq.n	8008d06 <TIM_TI1_SetConfig+0x3e>
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	4a1b      	ldr	r2, [pc, #108]	; (8008d70 <TIM_TI1_SetConfig+0xa8>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d101      	bne.n	8008d0a <TIM_TI1_SetConfig+0x42>
 8008d06:	2301      	movs	r3, #1
 8008d08:	e000      	b.n	8008d0c <TIM_TI1_SetConfig+0x44>
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d008      	beq.n	8008d22 <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f023 0303 	bic.w	r3, r3, #3
 8008d16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008d18:	697a      	ldr	r2, [r7, #20]
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	617b      	str	r3, [r7, #20]
 8008d20:	e003      	b.n	8008d2a <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f043 0301 	orr.w	r3, r3, #1
 8008d28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d2a:	697b      	ldr	r3, [r7, #20]
 8008d2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	011b      	lsls	r3, r3, #4
 8008d36:	b2db      	uxtb	r3, r3
 8008d38:	697a      	ldr	r2, [r7, #20]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008d3e:	693b      	ldr	r3, [r7, #16]
 8008d40:	f023 030a 	bic.w	r3, r3, #10
 8008d44:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008d46:	68bb      	ldr	r3, [r7, #8]
 8008d48:	f003 030a 	and.w	r3, r3, #10
 8008d4c:	693a      	ldr	r2, [r7, #16]
 8008d4e:	4313      	orrs	r3, r2
 8008d50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	693a      	ldr	r2, [r7, #16]
 8008d5c:	621a      	str	r2, [r3, #32]
}
 8008d5e:	bf00      	nop
 8008d60:	371c      	adds	r7, #28
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	40012c00 	.word	0x40012c00
 8008d70:	40014000 	.word	0x40014000

08008d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b087      	sub	sp, #28
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	60b9      	str	r1, [r7, #8]
 8008d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6a1b      	ldr	r3, [r3, #32]
 8008d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	6a1b      	ldr	r3, [r3, #32]
 8008d8a:	f023 0201 	bic.w	r2, r3, #1
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	699b      	ldr	r3, [r3, #24]
 8008d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	011b      	lsls	r3, r3, #4
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f023 030a 	bic.w	r3, r3, #10
 8008db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008db2:	697a      	ldr	r2, [r7, #20]
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	693a      	ldr	r2, [r7, #16]
 8008dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	697a      	ldr	r2, [r7, #20]
 8008dc4:	621a      	str	r2, [r3, #32]
}
 8008dc6:	bf00      	nop
 8008dc8:	371c      	adds	r7, #28
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr

08008dd2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b087      	sub	sp, #28
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	60f8      	str	r0, [r7, #12]
 8008dda:	60b9      	str	r1, [r7, #8]
 8008ddc:	607a      	str	r2, [r7, #4]
 8008dde:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	6a1b      	ldr	r3, [r3, #32]
 8008de4:	f023 0210 	bic.w	r2, r3, #16
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	699b      	ldr	r3, [r3, #24]
 8008df0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6a1b      	ldr	r3, [r3, #32]
 8008df6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	021b      	lsls	r3, r3, #8
 8008e04:	697a      	ldr	r2, [r7, #20]
 8008e06:	4313      	orrs	r3, r2
 8008e08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	031b      	lsls	r3, r3, #12
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	697a      	ldr	r2, [r7, #20]
 8008e1a:	4313      	orrs	r3, r2
 8008e1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	011b      	lsls	r3, r3, #4
 8008e2a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	697a      	ldr	r2, [r7, #20]
 8008e38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	621a      	str	r2, [r3, #32]
}
 8008e40:	bf00      	nop
 8008e42:	371c      	adds	r7, #28
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b087      	sub	sp, #28
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6a1b      	ldr	r3, [r3, #32]
 8008e5c:	f023 0210 	bic.w	r2, r3, #16
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	031b      	lsls	r3, r3, #12
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	011b      	lsls	r3, r3, #4
 8008e8e:	693a      	ldr	r2, [r7, #16]
 8008e90:	4313      	orrs	r3, r2
 8008e92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	621a      	str	r2, [r3, #32]
}
 8008ea0:	bf00      	nop
 8008ea2:	371c      	adds	r7, #28
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b087      	sub	sp, #28
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
 8008eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	69db      	ldr	r3, [r3, #28]
 8008eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6a1b      	ldr	r3, [r3, #32]
 8008ed0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f023 0303 	bic.w	r3, r3, #3
 8008ed8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008eda:	697a      	ldr	r2, [r7, #20]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ee8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	011b      	lsls	r3, r3, #4
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008efc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	021b      	lsls	r3, r3, #8
 8008f02:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008f06:	693a      	ldr	r2, [r7, #16]
 8008f08:	4313      	orrs	r3, r2
 8008f0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	697a      	ldr	r2, [r7, #20]
 8008f10:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	693a      	ldr	r2, [r7, #16]
 8008f16:	621a      	str	r2, [r3, #32]
}
 8008f18:	bf00      	nop
 8008f1a:	371c      	adds	r7, #28
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b087      	sub	sp, #28
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	60f8      	str	r0, [r7, #12]
 8008f2c:	60b9      	str	r1, [r7, #8]
 8008f2e:	607a      	str	r2, [r7, #4]
 8008f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	6a1b      	ldr	r3, [r3, #32]
 8008f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	69db      	ldr	r3, [r3, #28]
 8008f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6a1b      	ldr	r3, [r3, #32]
 8008f48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	021b      	lsls	r3, r3, #8
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f62:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	031b      	lsls	r3, r3, #12
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	697a      	ldr	r2, [r7, #20]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008f76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	031b      	lsls	r3, r3, #12
 8008f7c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	693a      	ldr	r2, [r7, #16]
 8008f90:	621a      	str	r2, [r3, #32]
}
 8008f92:	bf00      	nop
 8008f94:	371c      	adds	r7, #28
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f9e:	b480      	push	{r7}
 8008fa0:	b085      	sub	sp, #20
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	689b      	ldr	r3, [r3, #8]
 8008fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fb6:	683a      	ldr	r2, [r7, #0]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	f043 0307 	orr.w	r3, r3, #7
 8008fc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	609a      	str	r2, [r3, #8]
}
 8008fc8:	bf00      	nop
 8008fca:	3714      	adds	r7, #20
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd2:	4770      	bx	lr

08008fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b087      	sub	sp, #28
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	60f8      	str	r0, [r7, #12]
 8008fdc:	60b9      	str	r1, [r7, #8]
 8008fde:	607a      	str	r2, [r7, #4]
 8008fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	021a      	lsls	r2, r3, #8
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	431a      	orrs	r2, r3
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	4313      	orrs	r3, r2
 8009000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	609a      	str	r2, [r3, #8]
}
 8009008:	bf00      	nop
 800900a:	371c      	adds	r7, #28
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009014:	b480      	push	{r7}
 8009016:	b085      	sub	sp, #20
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009024:	2b01      	cmp	r3, #1
 8009026:	d101      	bne.n	800902c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009028:	2302      	movs	r3, #2
 800902a:	e04f      	b.n	80090cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2201      	movs	r2, #1
 8009030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2202      	movs	r2, #2
 8009038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	689b      	ldr	r3, [r3, #8]
 800904a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a21      	ldr	r2, [pc, #132]	; (80090d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d108      	bne.n	8009068 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800905c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	4313      	orrs	r3, r2
 8009066:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800906e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009070:	683b      	ldr	r3, [r7, #0]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68fa      	ldr	r2, [r7, #12]
 8009076:	4313      	orrs	r3, r2
 8009078:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	4a14      	ldr	r2, [pc, #80]	; (80090d8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d009      	beq.n	80090a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009094:	d004      	beq.n	80090a0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	4a10      	ldr	r2, [pc, #64]	; (80090dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d10c      	bne.n	80090ba <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	689b      	ldr	r3, [r3, #8]
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	40012c00 	.word	0x40012c00
 80090dc:	40014000 	.word	0x40014000

080090e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090fc:	bf00      	nop
 80090fe:	370c      	adds	r7, #12
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr

08009108 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009108:	b480      	push	{r7}
 800910a:	b083      	sub	sp, #12
 800910c:	af00      	add	r7, sp, #0
 800910e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009110:	bf00      	nop
 8009112:	370c      	adds	r7, #12
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b082      	sub	sp, #8
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d101      	bne.n	800912e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e040      	b.n	80091b0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7fc f8b0 	bl	80052a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	2224      	movs	r2, #36	; 0x24
 8009148:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	681a      	ldr	r2, [r3, #0]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f022 0201 	bic.w	r2, r2, #1
 8009158:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fc7a 	bl	8009a54 <UART_SetConfig>
 8009160:	4603      	mov	r3, r0
 8009162:	2b01      	cmp	r3, #1
 8009164:	d101      	bne.n	800916a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e022      	b.n	80091b0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916e:	2b00      	cmp	r3, #0
 8009170:	d002      	beq.n	8009178 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fe9a 	bl	8009eac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009186:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	689a      	ldr	r2, [r3, #8]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009196:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f042 0201 	orr.w	r2, r2, #1
 80091a6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 ff21 	bl	8009ff0 <UART_CheckIdleState>
 80091ae:	4603      	mov	r3, r0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08a      	sub	sp, #40	; 0x28
 80091bc:	af02      	add	r7, sp, #8
 80091be:	60f8      	str	r0, [r7, #12]
 80091c0:	60b9      	str	r1, [r7, #8]
 80091c2:	603b      	str	r3, [r7, #0]
 80091c4:	4613      	mov	r3, r2
 80091c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091cc:	2b20      	cmp	r3, #32
 80091ce:	f040 8082 	bne.w	80092d6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80091d2:	68bb      	ldr	r3, [r7, #8]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d002      	beq.n	80091de <HAL_UART_Transmit+0x26>
 80091d8:	88fb      	ldrh	r3, [r7, #6]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d101      	bne.n	80091e2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	e07a      	b.n	80092d8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d101      	bne.n	80091f0 <HAL_UART_Transmit+0x38>
 80091ec:	2302      	movs	r3, #2
 80091ee:	e073      	b.n	80092d8 <HAL_UART_Transmit+0x120>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2201      	movs	r2, #1
 80091f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2221      	movs	r2, #33	; 0x21
 8009204:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009206:	f7fc fb9f 	bl	8005948 <HAL_GetTick>
 800920a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	88fa      	ldrh	r2, [r7, #6]
 8009210:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	88fa      	ldrh	r2, [r7, #6]
 8009218:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009224:	d108      	bne.n	8009238 <HAL_UART_Transmit+0x80>
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	691b      	ldr	r3, [r3, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d104      	bne.n	8009238 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800922e:	2300      	movs	r3, #0
 8009230:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	61bb      	str	r3, [r7, #24]
 8009236:	e003      	b.n	8009240 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800923c:	2300      	movs	r3, #0
 800923e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	2200      	movs	r2, #0
 8009244:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009248:	e02d      	b.n	80092a6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	9300      	str	r3, [sp, #0]
 800924e:	697b      	ldr	r3, [r7, #20]
 8009250:	2200      	movs	r2, #0
 8009252:	2180      	movs	r1, #128	; 0x80
 8009254:	68f8      	ldr	r0, [r7, #12]
 8009256:	f000 ff14 	bl	800a082 <UART_WaitOnFlagUntilTimeout>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d001      	beq.n	8009264 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	e039      	b.n	80092d8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d10b      	bne.n	8009282 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800926a:	69bb      	ldr	r3, [r7, #24]
 800926c:	881a      	ldrh	r2, [r3, #0]
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009276:	b292      	uxth	r2, r2
 8009278:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800927a:	69bb      	ldr	r3, [r7, #24]
 800927c:	3302      	adds	r3, #2
 800927e:	61bb      	str	r3, [r7, #24]
 8009280:	e008      	b.n	8009294 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	781a      	ldrb	r2, [r3, #0]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	b292      	uxth	r2, r2
 800928c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800928e:	69fb      	ldr	r3, [r7, #28]
 8009290:	3301      	adds	r3, #1
 8009292:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800929a:	b29b      	uxth	r3, r3
 800929c:	3b01      	subs	r3, #1
 800929e:	b29a      	uxth	r2, r3
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80092ac:	b29b      	uxth	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d1cb      	bne.n	800924a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	2200      	movs	r2, #0
 80092ba:	2140      	movs	r1, #64	; 0x40
 80092bc:	68f8      	ldr	r0, [r7, #12]
 80092be:	f000 fee0 	bl	800a082 <UART_WaitOnFlagUntilTimeout>
 80092c2:	4603      	mov	r3, r0
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80092c8:	2303      	movs	r3, #3
 80092ca:	e005      	b.n	80092d8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2220      	movs	r2, #32
 80092d0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80092d2:	2300      	movs	r3, #0
 80092d4:	e000      	b.n	80092d8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80092d6:	2302      	movs	r3, #2
  }
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3720      	adds	r7, #32
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b09a      	sub	sp, #104	; 0x68
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
#else
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	64bb      	str	r3, [r7, #72]	; 0x48
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80092f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092fc:	667b      	str	r3, [r7, #100]	; 0x64
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009306:	657b      	str	r3, [r7, #84]	; 0x54
 8009308:	653a      	str	r2, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800930c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e6      	bne.n	80092e8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3308      	adds	r3, #8
 8009320:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009324:	e853 3f00 	ldrex	r3, [r3]
 8009328:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932c:	f023 0301 	bic.w	r3, r3, #1
 8009330:	663b      	str	r3, [r7, #96]	; 0x60
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3308      	adds	r3, #8
 8009338:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800933a:	643a      	str	r2, [r7, #64]	; 0x40
 800933c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009340:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009342:	e841 2300 	strex	r3, r2, [r1]
 8009346:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1e5      	bne.n	800931a <HAL_UART_AbortReceive+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009352:	2b01      	cmp	r3, #1
 8009354:	d118      	bne.n	8009388 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	e853 3f00 	ldrex	r3, [r3]
 8009362:	61fb      	str	r3, [r7, #28]
   return(result);
 8009364:	69fb      	ldr	r3, [r7, #28]
 8009366:	f023 0310 	bic.w	r3, r3, #16
 800936a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	461a      	mov	r2, r3
 8009372:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009374:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009376:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009378:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800937a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800937c:	e841 2300 	strex	r3, r2, [r1]
 8009380:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009384:	2b00      	cmp	r3, #0
 8009386:	d1e6      	bne.n	8009356 <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009392:	2b40      	cmp	r3, #64	; 0x40
 8009394:	d137      	bne.n	8009406 <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	3308      	adds	r3, #8
 800939c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	e853 3f00 	ldrex	r3, [r3]
 80093a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	3308      	adds	r3, #8
 80093b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093b6:	61ba      	str	r2, [r7, #24]
 80093b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ba:	6979      	ldr	r1, [r7, #20]
 80093bc:	69ba      	ldr	r2, [r7, #24]
 80093be:	e841 2300 	strex	r3, r2, [r1]
 80093c2:	613b      	str	r3, [r7, #16]
   return(result);
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1e5      	bne.n	8009396 <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d019      	beq.n	8009406 <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d6:	2200      	movs	r2, #0
 80093d8:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fc fcdc 	bl	8005d9c <HAL_DMA_Abort>
 80093e4:	4603      	mov	r3, r0
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d00d      	beq.n	8009406 <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fc fe02 	bl	8005ff8 <HAL_DMA_GetError>
 80093f4:	4603      	mov	r3, r0
 80093f6:	2b20      	cmp	r3, #32
 80093f8:	d105      	bne.n	8009406 <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2210      	movs	r2, #16
 80093fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009402:	2303      	movs	r3, #3
 8009404:	e018      	b.n	8009438 <HAL_UART_AbortReceive+0x158>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	220f      	movs	r2, #15
 8009414:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	8b1b      	ldrh	r3, [r3, #24]
 800941c:	b29a      	uxth	r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f042 0208 	orr.w	r2, r2, #8
 8009426:	b292      	uxth	r2, r2
 8009428:	831a      	strh	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2220      	movs	r2, #32
 800942e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	661a      	str	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	3768      	adds	r7, #104	; 0x68
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b0ba      	sub	sp, #232	; 0xe8
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	69db      	ldr	r3, [r3, #28]
 800944e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	689b      	ldr	r3, [r3, #8]
 8009462:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009466:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800946a:	f640 030f 	movw	r3, #2063	; 0x80f
 800946e:	4013      	ands	r3, r2
 8009470:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009474:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009478:	2b00      	cmp	r3, #0
 800947a:	d115      	bne.n	80094a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800947c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009480:	f003 0320 	and.w	r3, r3, #32
 8009484:	2b00      	cmp	r3, #0
 8009486:	d00f      	beq.n	80094a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800948c:	f003 0320 	and.w	r3, r3, #32
 8009490:	2b00      	cmp	r3, #0
 8009492:	d009      	beq.n	80094a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 82a6 	beq.w	80099ea <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80094a2:	6878      	ldr	r0, [r7, #4]
 80094a4:	4798      	blx	r3
      }
      return;
 80094a6:	e2a0      	b.n	80099ea <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80094a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 8117 	beq.w	80096e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80094b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80094b6:	f003 0301 	and.w	r3, r3, #1
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d106      	bne.n	80094cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80094be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80094c2:	4b85      	ldr	r3, [pc, #532]	; (80096d8 <HAL_UART_IRQHandler+0x298>)
 80094c4:	4013      	ands	r3, r2
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	f000 810a 	beq.w	80096e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80094cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094d0:	f003 0301 	and.w	r3, r3, #1
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d011      	beq.n	80094fc <HAL_UART_IRQHandler+0xbc>
 80094d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d00b      	beq.n	80094fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	2201      	movs	r2, #1
 80094ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094f2:	f043 0201 	orr.w	r2, r3, #1
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80094fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009500:	f003 0302 	and.w	r3, r3, #2
 8009504:	2b00      	cmp	r3, #0
 8009506:	d011      	beq.n	800952c <HAL_UART_IRQHandler+0xec>
 8009508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	d00b      	beq.n	800952c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2202      	movs	r2, #2
 800951a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009522:	f043 0204 	orr.w	r2, r3, #4
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800952c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009530:	f003 0304 	and.w	r3, r3, #4
 8009534:	2b00      	cmp	r3, #0
 8009536:	d011      	beq.n	800955c <HAL_UART_IRQHandler+0x11c>
 8009538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00b      	beq.n	800955c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	2204      	movs	r2, #4
 800954a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009552:	f043 0202 	orr.w	r2, r3, #2
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800955c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009560:	f003 0308 	and.w	r3, r3, #8
 8009564:	2b00      	cmp	r3, #0
 8009566:	d017      	beq.n	8009598 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800956c:	f003 0320 	and.w	r3, r3, #32
 8009570:	2b00      	cmp	r3, #0
 8009572:	d105      	bne.n	8009580 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009578:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00b      	beq.n	8009598 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	2208      	movs	r2, #8
 8009586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800958e:	f043 0208 	orr.w	r2, r3, #8
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800959c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d012      	beq.n	80095ca <HAL_UART_IRQHandler+0x18a>
 80095a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d00c      	beq.n	80095ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80095b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095c0:	f043 0220 	orr.w	r2, r3, #32
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f000 820c 	beq.w	80099ee <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80095d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095da:	f003 0320 	and.w	r3, r3, #32
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00d      	beq.n	80095fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80095e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095e6:	f003 0320 	and.w	r3, r3, #32
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d007      	beq.n	80095fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d003      	beq.n	80095fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009604:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	689b      	ldr	r3, [r3, #8]
 800960e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009612:	2b40      	cmp	r3, #64	; 0x40
 8009614:	d005      	beq.n	8009622 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009616:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800961a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800961e:	2b00      	cmp	r3, #0
 8009620:	d04f      	beq.n	80096c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 febe 	bl	800a3a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009632:	2b40      	cmp	r3, #64	; 0x40
 8009634:	d141      	bne.n	80096ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3308      	adds	r3, #8
 800963c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009640:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009644:	e853 3f00 	ldrex	r3, [r3]
 8009648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800964c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009650:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009654:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3308      	adds	r3, #8
 800965e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009662:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009666:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800966e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009672:	e841 2300 	strex	r3, r2, [r1]
 8009676:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800967a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d1d9      	bne.n	8009636 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009686:	2b00      	cmp	r3, #0
 8009688:	d013      	beq.n	80096b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800968e:	4a13      	ldr	r2, [pc, #76]	; (80096dc <HAL_UART_IRQHandler+0x29c>)
 8009690:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009696:	4618      	mov	r0, r3
 8009698:	f7fc fbbe 	bl	8005e18 <HAL_DMA_Abort_IT>
 800969c:	4603      	mov	r3, r0
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d017      	beq.n	80096d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80096ac:	4610      	mov	r0, r2
 80096ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096b0:	e00f      	b.n	80096d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f9c4 	bl	8009a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096b8:	e00b      	b.n	80096d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 f9c0 	bl	8009a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c0:	e007      	b.n	80096d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f9bc 	bl	8009a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80096d0:	e18d      	b.n	80099ee <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096d2:	bf00      	nop
    return;
 80096d4:	e18b      	b.n	80099ee <HAL_UART_IRQHandler+0x5ae>
 80096d6:	bf00      	nop
 80096d8:	04000120 	.word	0x04000120
 80096dc:	0800a643 	.word	0x0800a643

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096e4:	2b01      	cmp	r3, #1
 80096e6:	f040 8146 	bne.w	8009976 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80096ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096ee:	f003 0310 	and.w	r3, r3, #16
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 813f 	beq.w	8009976 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80096f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096fc:	f003 0310 	and.w	r3, r3, #16
 8009700:	2b00      	cmp	r3, #0
 8009702:	f000 8138 	beq.w	8009976 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2210      	movs	r2, #16
 800970c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	689b      	ldr	r3, [r3, #8]
 8009714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009718:	2b40      	cmp	r3, #64	; 0x40
 800971a:	f040 80b4 	bne.w	8009886 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800972a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800972e:	2b00      	cmp	r3, #0
 8009730:	f000 815f 	beq.w	80099f2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800973a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800973e:	429a      	cmp	r2, r3
 8009740:	f080 8157 	bcs.w	80099f2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800974a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0320 	and.w	r3, r3, #32
 800975a:	2b00      	cmp	r3, #0
 800975c:	f040 8085 	bne.w	800986a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009768:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800976c:	e853 3f00 	ldrex	r3, [r3]
 8009770:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009774:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009778:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800977c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	461a      	mov	r2, r3
 8009786:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800978a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800978e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009792:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009796:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800979a:	e841 2300 	strex	r3, r2, [r1]
 800979e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80097a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d1da      	bne.n	8009760 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	3308      	adds	r3, #8
 80097b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097b4:	e853 3f00 	ldrex	r3, [r3]
 80097b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80097ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097bc:	f023 0301 	bic.w	r3, r3, #1
 80097c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	3308      	adds	r3, #8
 80097ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80097ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80097d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80097d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80097e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d1e1      	bne.n	80097aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3308      	adds	r3, #8
 80097ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80097f0:	e853 3f00 	ldrex	r3, [r3]
 80097f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80097f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80097f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80097fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	3308      	adds	r3, #8
 8009806:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800980a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800980c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009810:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009812:	e841 2300 	strex	r3, r2, [r1]
 8009816:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1e3      	bne.n	80097e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2220      	movs	r2, #32
 8009822:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009832:	e853 3f00 	ldrex	r3, [r3]
 8009836:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800983a:	f023 0310 	bic.w	r3, r3, #16
 800983e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	461a      	mov	r2, r3
 8009848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800984c:	65bb      	str	r3, [r7, #88]	; 0x58
 800984e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009850:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009852:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009854:	e841 2300 	strex	r3, r2, [r1]
 8009858:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800985a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800985c:	2b00      	cmp	r3, #0
 800985e:	d1e4      	bne.n	800982a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009864:	4618      	mov	r0, r3
 8009866:	f7fc fa99 	bl	8005d9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009876:	b29b      	uxth	r3, r3
 8009878:	1ad3      	subs	r3, r2, r3
 800987a:	b29b      	uxth	r3, r3
 800987c:	4619      	mov	r1, r3
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f7fb f81c 	bl	80048bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009884:	e0b5      	b.n	80099f2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009892:	b29b      	uxth	r3, r3
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	f000 80a7 	beq.w	80099f6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80098a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	f000 80a2 	beq.w	80099f6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ba:	e853 3f00 	ldrex	r3, [r3]
 80098be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80098c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80098c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	461a      	mov	r2, r3
 80098d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80098d4:	647b      	str	r3, [r7, #68]	; 0x44
 80098d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80098da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80098dc:	e841 2300 	strex	r3, r2, [r1]
 80098e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80098e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d1e4      	bne.n	80098b2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	3308      	adds	r3, #8
 80098ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f2:	e853 3f00 	ldrex	r3, [r3]
 80098f6:	623b      	str	r3, [r7, #32]
   return(result);
 80098f8:	6a3b      	ldr	r3, [r7, #32]
 80098fa:	f023 0301 	bic.w	r3, r3, #1
 80098fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3308      	adds	r3, #8
 8009908:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800990c:	633a      	str	r2, [r7, #48]	; 0x30
 800990e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009910:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009912:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009914:	e841 2300 	strex	r3, r2, [r1]
 8009918:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800991a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800991c:	2b00      	cmp	r3, #0
 800991e:	d1e3      	bne.n	80098e8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2220      	movs	r2, #32
 8009924:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	2200      	movs	r2, #0
 800992a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2200      	movs	r2, #0
 8009930:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	e853 3f00 	ldrex	r3, [r3]
 800993e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f023 0310 	bic.w	r3, r3, #16
 8009946:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	461a      	mov	r2, r3
 8009950:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009954:	61fb      	str	r3, [r7, #28]
 8009956:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009958:	69b9      	ldr	r1, [r7, #24]
 800995a:	69fa      	ldr	r2, [r7, #28]
 800995c:	e841 2300 	strex	r3, r2, [r1]
 8009960:	617b      	str	r3, [r7, #20]
   return(result);
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d1e4      	bne.n	8009932 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009968:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800996c:	4619      	mov	r1, r3
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f7fa ffa4 	bl	80048bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009974:	e03f      	b.n	80099f6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800997a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00e      	beq.n	80099a0 <HAL_UART_IRQHandler+0x560>
 8009982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800998a:	2b00      	cmp	r3, #0
 800998c:	d008      	beq.n	80099a0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009996:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fe92 	bl	800a6c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800999e:	e02d      	b.n	80099fc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80099a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d00e      	beq.n	80099ca <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80099ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d008      	beq.n	80099ca <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d01c      	beq.n	80099fa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	4798      	blx	r3
    }
    return;
 80099c8:	e017      	b.n	80099fa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80099ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d012      	beq.n	80099fc <HAL_UART_IRQHandler+0x5bc>
 80099d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00c      	beq.n	80099fc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 fe43 	bl	800a66e <UART_EndTransmit_IT>
    return;
 80099e8:	e008      	b.n	80099fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80099ea:	bf00      	nop
 80099ec:	e006      	b.n	80099fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80099ee:	bf00      	nop
 80099f0:	e004      	b.n	80099fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80099f2:	bf00      	nop
 80099f4:	e002      	b.n	80099fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80099f6:	bf00      	nop
 80099f8:	e000      	b.n	80099fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80099fa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80099fc:	37e8      	adds	r7, #232	; 0xe8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
 8009a02:	bf00      	nop

08009a04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009a0c:	bf00      	nop
 8009a0e:	370c      	adds	r7, #12
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr

08009a18 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b083      	sub	sp, #12
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009a20:	bf00      	nop
 8009a22:	370c      	adds	r7, #12
 8009a24:	46bd      	mov	sp, r7
 8009a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2a:	4770      	bx	lr

08009a2c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a2c:	b480      	push	{r7}
 8009a2e:	b083      	sub	sp, #12
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009a34:	bf00      	nop
 8009a36:	370c      	adds	r7, #12
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3e:	4770      	bx	lr

08009a40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b083      	sub	sp, #12
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009a48:	bf00      	nop
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a58:	b08a      	sub	sp, #40	; 0x28
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	689a      	ldr	r2, [r3, #8]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	431a      	orrs	r2, r3
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	695b      	ldr	r3, [r3, #20]
 8009a72:	431a      	orrs	r2, r3
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	69db      	ldr	r3, [r3, #28]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	4bb4      	ldr	r3, [pc, #720]	; (8009d54 <UART_SetConfig+0x300>)
 8009a84:	4013      	ands	r3, r2
 8009a86:	68fa      	ldr	r2, [r7, #12]
 8009a88:	6812      	ldr	r2, [r2, #0]
 8009a8a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009a8c:	430b      	orrs	r3, r1
 8009a8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	68da      	ldr	r2, [r3, #12]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	430a      	orrs	r2, r1
 8009aa4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	699b      	ldr	r3, [r3, #24]
 8009aaa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4aa9      	ldr	r2, [pc, #676]	; (8009d58 <UART_SetConfig+0x304>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d004      	beq.n	8009ac0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	6a1b      	ldr	r3, [r3, #32]
 8009aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009abc:	4313      	orrs	r3, r2
 8009abe:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	689b      	ldr	r3, [r3, #8]
 8009ac6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ad0:	430a      	orrs	r2, r1
 8009ad2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	4aa0      	ldr	r2, [pc, #640]	; (8009d5c <UART_SetConfig+0x308>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d126      	bne.n	8009b2c <UART_SetConfig+0xd8>
 8009ade:	4ba0      	ldr	r3, [pc, #640]	; (8009d60 <UART_SetConfig+0x30c>)
 8009ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ae4:	f003 0303 	and.w	r3, r3, #3
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	d81b      	bhi.n	8009b24 <UART_SetConfig+0xd0>
 8009aec:	a201      	add	r2, pc, #4	; (adr r2, 8009af4 <UART_SetConfig+0xa0>)
 8009aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af2:	bf00      	nop
 8009af4:	08009b05 	.word	0x08009b05
 8009af8:	08009b15 	.word	0x08009b15
 8009afc:	08009b0d 	.word	0x08009b0d
 8009b00:	08009b1d 	.word	0x08009b1d
 8009b04:	2301      	movs	r3, #1
 8009b06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b0a:	e080      	b.n	8009c0e <UART_SetConfig+0x1ba>
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b12:	e07c      	b.n	8009c0e <UART_SetConfig+0x1ba>
 8009b14:	2304      	movs	r3, #4
 8009b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b1a:	e078      	b.n	8009c0e <UART_SetConfig+0x1ba>
 8009b1c:	2308      	movs	r3, #8
 8009b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b22:	e074      	b.n	8009c0e <UART_SetConfig+0x1ba>
 8009b24:	2310      	movs	r3, #16
 8009b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b2a:	e070      	b.n	8009c0e <UART_SetConfig+0x1ba>
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4a8c      	ldr	r2, [pc, #560]	; (8009d64 <UART_SetConfig+0x310>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d138      	bne.n	8009ba8 <UART_SetConfig+0x154>
 8009b36:	4b8a      	ldr	r3, [pc, #552]	; (8009d60 <UART_SetConfig+0x30c>)
 8009b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b3c:	f003 030c 	and.w	r3, r3, #12
 8009b40:	2b0c      	cmp	r3, #12
 8009b42:	d82d      	bhi.n	8009ba0 <UART_SetConfig+0x14c>
 8009b44:	a201      	add	r2, pc, #4	; (adr r2, 8009b4c <UART_SetConfig+0xf8>)
 8009b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b4a:	bf00      	nop
 8009b4c:	08009b81 	.word	0x08009b81
 8009b50:	08009ba1 	.word	0x08009ba1
 8009b54:	08009ba1 	.word	0x08009ba1
 8009b58:	08009ba1 	.word	0x08009ba1
 8009b5c:	08009b91 	.word	0x08009b91
 8009b60:	08009ba1 	.word	0x08009ba1
 8009b64:	08009ba1 	.word	0x08009ba1
 8009b68:	08009ba1 	.word	0x08009ba1
 8009b6c:	08009b89 	.word	0x08009b89
 8009b70:	08009ba1 	.word	0x08009ba1
 8009b74:	08009ba1 	.word	0x08009ba1
 8009b78:	08009ba1 	.word	0x08009ba1
 8009b7c:	08009b99 	.word	0x08009b99
 8009b80:	2300      	movs	r3, #0
 8009b82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b86:	e042      	b.n	8009c0e <UART_SetConfig+0x1ba>
 8009b88:	2302      	movs	r3, #2
 8009b8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b8e:	e03e      	b.n	8009c0e <UART_SetConfig+0x1ba>
 8009b90:	2304      	movs	r3, #4
 8009b92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b96:	e03a      	b.n	8009c0e <UART_SetConfig+0x1ba>
 8009b98:	2308      	movs	r3, #8
 8009b9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009b9e:	e036      	b.n	8009c0e <UART_SetConfig+0x1ba>
 8009ba0:	2310      	movs	r3, #16
 8009ba2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ba6:	e032      	b.n	8009c0e <UART_SetConfig+0x1ba>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a6a      	ldr	r2, [pc, #424]	; (8009d58 <UART_SetConfig+0x304>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d12a      	bne.n	8009c08 <UART_SetConfig+0x1b4>
 8009bb2:	4b6b      	ldr	r3, [pc, #428]	; (8009d60 <UART_SetConfig+0x30c>)
 8009bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009bbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bc0:	d01a      	beq.n	8009bf8 <UART_SetConfig+0x1a4>
 8009bc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009bc6:	d81b      	bhi.n	8009c00 <UART_SetConfig+0x1ac>
 8009bc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bcc:	d00c      	beq.n	8009be8 <UART_SetConfig+0x194>
 8009bce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009bd2:	d815      	bhi.n	8009c00 <UART_SetConfig+0x1ac>
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d003      	beq.n	8009be0 <UART_SetConfig+0x18c>
 8009bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bdc:	d008      	beq.n	8009bf0 <UART_SetConfig+0x19c>
 8009bde:	e00f      	b.n	8009c00 <UART_SetConfig+0x1ac>
 8009be0:	2300      	movs	r3, #0
 8009be2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009be6:	e012      	b.n	8009c0e <UART_SetConfig+0x1ba>
 8009be8:	2302      	movs	r3, #2
 8009bea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009bee:	e00e      	b.n	8009c0e <UART_SetConfig+0x1ba>
 8009bf0:	2304      	movs	r3, #4
 8009bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009bf6:	e00a      	b.n	8009c0e <UART_SetConfig+0x1ba>
 8009bf8:	2308      	movs	r3, #8
 8009bfa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009bfe:	e006      	b.n	8009c0e <UART_SetConfig+0x1ba>
 8009c00:	2310      	movs	r3, #16
 8009c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c06:	e002      	b.n	8009c0e <UART_SetConfig+0x1ba>
 8009c08:	2310      	movs	r3, #16
 8009c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a51      	ldr	r2, [pc, #324]	; (8009d58 <UART_SetConfig+0x304>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d17a      	bne.n	8009d0e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009c18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c1c:	2b08      	cmp	r3, #8
 8009c1e:	d824      	bhi.n	8009c6a <UART_SetConfig+0x216>
 8009c20:	a201      	add	r2, pc, #4	; (adr r2, 8009c28 <UART_SetConfig+0x1d4>)
 8009c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c26:	bf00      	nop
 8009c28:	08009c4d 	.word	0x08009c4d
 8009c2c:	08009c6b 	.word	0x08009c6b
 8009c30:	08009c55 	.word	0x08009c55
 8009c34:	08009c6b 	.word	0x08009c6b
 8009c38:	08009c5b 	.word	0x08009c5b
 8009c3c:	08009c6b 	.word	0x08009c6b
 8009c40:	08009c6b 	.word	0x08009c6b
 8009c44:	08009c6b 	.word	0x08009c6b
 8009c48:	08009c63 	.word	0x08009c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009c4c:	f7fd fc5c 	bl	8007508 <HAL_RCC_GetPCLK1Freq>
 8009c50:	61f8      	str	r0, [r7, #28]
        break;
 8009c52:	e010      	b.n	8009c76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009c54:	4b44      	ldr	r3, [pc, #272]	; (8009d68 <UART_SetConfig+0x314>)
 8009c56:	61fb      	str	r3, [r7, #28]
        break;
 8009c58:	e00d      	b.n	8009c76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009c5a:	f7fd fbbd 	bl	80073d8 <HAL_RCC_GetSysClockFreq>
 8009c5e:	61f8      	str	r0, [r7, #28]
        break;
 8009c60:	e009      	b.n	8009c76 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c66:	61fb      	str	r3, [r7, #28]
        break;
 8009c68:	e005      	b.n	8009c76 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009c74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	f000 8107 	beq.w	8009e8c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	685a      	ldr	r2, [r3, #4]
 8009c82:	4613      	mov	r3, r2
 8009c84:	005b      	lsls	r3, r3, #1
 8009c86:	4413      	add	r3, r2
 8009c88:	69fa      	ldr	r2, [r7, #28]
 8009c8a:	429a      	cmp	r2, r3
 8009c8c:	d305      	bcc.n	8009c9a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009c94:	69fa      	ldr	r2, [r7, #28]
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d903      	bls.n	8009ca2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009ca0:	e0f4      	b.n	8009e8c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	461c      	mov	r4, r3
 8009ca8:	4615      	mov	r5, r2
 8009caa:	f04f 0200 	mov.w	r2, #0
 8009cae:	f04f 0300 	mov.w	r3, #0
 8009cb2:	022b      	lsls	r3, r5, #8
 8009cb4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009cb8:	0222      	lsls	r2, r4, #8
 8009cba:	68f9      	ldr	r1, [r7, #12]
 8009cbc:	6849      	ldr	r1, [r1, #4]
 8009cbe:	0849      	lsrs	r1, r1, #1
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	4688      	mov	r8, r1
 8009cc4:	4681      	mov	r9, r0
 8009cc6:	eb12 0a08 	adds.w	sl, r2, r8
 8009cca:	eb43 0b09 	adc.w	fp, r3, r9
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	603b      	str	r3, [r7, #0]
 8009cd6:	607a      	str	r2, [r7, #4]
 8009cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cdc:	4650      	mov	r0, sl
 8009cde:	4659      	mov	r1, fp
 8009ce0:	f7f6 febc 	bl	8000a5c <__aeabi_uldivmod>
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	4613      	mov	r3, r2
 8009cea:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009cec:	69bb      	ldr	r3, [r7, #24]
 8009cee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cf2:	d308      	bcc.n	8009d06 <UART_SetConfig+0x2b2>
 8009cf4:	69bb      	ldr	r3, [r7, #24]
 8009cf6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009cfa:	d204      	bcs.n	8009d06 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	69ba      	ldr	r2, [r7, #24]
 8009d02:	60da      	str	r2, [r3, #12]
 8009d04:	e0c2      	b.n	8009e8c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009d0c:	e0be      	b.n	8009e8c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d16:	d16a      	bne.n	8009dee <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8009d18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d1c:	2b08      	cmp	r3, #8
 8009d1e:	d834      	bhi.n	8009d8a <UART_SetConfig+0x336>
 8009d20:	a201      	add	r2, pc, #4	; (adr r2, 8009d28 <UART_SetConfig+0x2d4>)
 8009d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d26:	bf00      	nop
 8009d28:	08009d4d 	.word	0x08009d4d
 8009d2c:	08009d6d 	.word	0x08009d6d
 8009d30:	08009d75 	.word	0x08009d75
 8009d34:	08009d8b 	.word	0x08009d8b
 8009d38:	08009d7b 	.word	0x08009d7b
 8009d3c:	08009d8b 	.word	0x08009d8b
 8009d40:	08009d8b 	.word	0x08009d8b
 8009d44:	08009d8b 	.word	0x08009d8b
 8009d48:	08009d83 	.word	0x08009d83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d4c:	f7fd fbdc 	bl	8007508 <HAL_RCC_GetPCLK1Freq>
 8009d50:	61f8      	str	r0, [r7, #28]
        break;
 8009d52:	e020      	b.n	8009d96 <UART_SetConfig+0x342>
 8009d54:	efff69f3 	.word	0xefff69f3
 8009d58:	40008000 	.word	0x40008000
 8009d5c:	40013800 	.word	0x40013800
 8009d60:	40021000 	.word	0x40021000
 8009d64:	40004400 	.word	0x40004400
 8009d68:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d6c:	f7fd fbe2 	bl	8007534 <HAL_RCC_GetPCLK2Freq>
 8009d70:	61f8      	str	r0, [r7, #28]
        break;
 8009d72:	e010      	b.n	8009d96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009d74:	4b4c      	ldr	r3, [pc, #304]	; (8009ea8 <UART_SetConfig+0x454>)
 8009d76:	61fb      	str	r3, [r7, #28]
        break;
 8009d78:	e00d      	b.n	8009d96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009d7a:	f7fd fb2d 	bl	80073d8 <HAL_RCC_GetSysClockFreq>
 8009d7e:	61f8      	str	r0, [r7, #28]
        break;
 8009d80:	e009      	b.n	8009d96 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d86:	61fb      	str	r3, [r7, #28]
        break;
 8009d88:	e005      	b.n	8009d96 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009d94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d077      	beq.n	8009e8c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009d9c:	69fb      	ldr	r3, [r7, #28]
 8009d9e:	005a      	lsls	r2, r3, #1
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	085b      	lsrs	r3, r3, #1
 8009da6:	441a      	add	r2, r3
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009db0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	2b0f      	cmp	r3, #15
 8009db6:	d916      	bls.n	8009de6 <UART_SetConfig+0x392>
 8009db8:	69bb      	ldr	r3, [r7, #24]
 8009dba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009dbe:	d212      	bcs.n	8009de6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	b29b      	uxth	r3, r3
 8009dc4:	f023 030f 	bic.w	r3, r3, #15
 8009dc8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	085b      	lsrs	r3, r3, #1
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	f003 0307 	and.w	r3, r3, #7
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	8afb      	ldrh	r3, [r7, #22]
 8009dd8:	4313      	orrs	r3, r2
 8009dda:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	8afa      	ldrh	r2, [r7, #22]
 8009de2:	60da      	str	r2, [r3, #12]
 8009de4:	e052      	b.n	8009e8c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009de6:	2301      	movs	r3, #1
 8009de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009dec:	e04e      	b.n	8009e8c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009dee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009df2:	2b08      	cmp	r3, #8
 8009df4:	d827      	bhi.n	8009e46 <UART_SetConfig+0x3f2>
 8009df6:	a201      	add	r2, pc, #4	; (adr r2, 8009dfc <UART_SetConfig+0x3a8>)
 8009df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfc:	08009e21 	.word	0x08009e21
 8009e00:	08009e29 	.word	0x08009e29
 8009e04:	08009e31 	.word	0x08009e31
 8009e08:	08009e47 	.word	0x08009e47
 8009e0c:	08009e37 	.word	0x08009e37
 8009e10:	08009e47 	.word	0x08009e47
 8009e14:	08009e47 	.word	0x08009e47
 8009e18:	08009e47 	.word	0x08009e47
 8009e1c:	08009e3f 	.word	0x08009e3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e20:	f7fd fb72 	bl	8007508 <HAL_RCC_GetPCLK1Freq>
 8009e24:	61f8      	str	r0, [r7, #28]
        break;
 8009e26:	e014      	b.n	8009e52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e28:	f7fd fb84 	bl	8007534 <HAL_RCC_GetPCLK2Freq>
 8009e2c:	61f8      	str	r0, [r7, #28]
        break;
 8009e2e:	e010      	b.n	8009e52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e30:	4b1d      	ldr	r3, [pc, #116]	; (8009ea8 <UART_SetConfig+0x454>)
 8009e32:	61fb      	str	r3, [r7, #28]
        break;
 8009e34:	e00d      	b.n	8009e52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e36:	f7fd facf 	bl	80073d8 <HAL_RCC_GetSysClockFreq>
 8009e3a:	61f8      	str	r0, [r7, #28]
        break;
 8009e3c:	e009      	b.n	8009e52 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e42:	61fb      	str	r3, [r7, #28]
        break;
 8009e44:	e005      	b.n	8009e52 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009e50:	bf00      	nop
    }

    if (pclk != 0U)
 8009e52:	69fb      	ldr	r3, [r7, #28]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d019      	beq.n	8009e8c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	085a      	lsrs	r2, r3, #1
 8009e5e:	69fb      	ldr	r3, [r7, #28]
 8009e60:	441a      	add	r2, r3
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e6a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009e6c:	69bb      	ldr	r3, [r7, #24]
 8009e6e:	2b0f      	cmp	r3, #15
 8009e70:	d909      	bls.n	8009e86 <UART_SetConfig+0x432>
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e78:	d205      	bcs.n	8009e86 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	60da      	str	r2, [r3, #12]
 8009e84:	e002      	b.n	8009e8c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009e98:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3728      	adds	r7, #40	; 0x28
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ea6:	bf00      	nop
 8009ea8:	00f42400 	.word	0x00f42400

08009eac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009eac:	b480      	push	{r7}
 8009eae:	b083      	sub	sp, #12
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb8:	f003 0301 	and.w	r3, r3, #1
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d00a      	beq.n	8009ed6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	430a      	orrs	r2, r1
 8009ed4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eda:	f003 0302 	and.w	r3, r3, #2
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d00a      	beq.n	8009ef8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	430a      	orrs	r2, r1
 8009ef6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009efc:	f003 0304 	and.w	r3, r3, #4
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00a      	beq.n	8009f1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	430a      	orrs	r2, r1
 8009f18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1e:	f003 0308 	and.w	r3, r3, #8
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00a      	beq.n	8009f3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	430a      	orrs	r2, r1
 8009f3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f40:	f003 0310 	and.w	r3, r3, #16
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d00a      	beq.n	8009f5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	689b      	ldr	r3, [r3, #8]
 8009f4e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	430a      	orrs	r2, r1
 8009f5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f62:	f003 0320 	and.w	r3, r3, #32
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d00a      	beq.n	8009f80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	430a      	orrs	r2, r1
 8009f7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d01a      	beq.n	8009fc2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	430a      	orrs	r2, r1
 8009fa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009faa:	d10a      	bne.n	8009fc2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	430a      	orrs	r2, r1
 8009fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d00a      	beq.n	8009fe4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	430a      	orrs	r2, r1
 8009fe2:	605a      	str	r2, [r3, #4]
  }
}
 8009fe4:	bf00      	nop
 8009fe6:	370c      	adds	r7, #12
 8009fe8:	46bd      	mov	sp, r7
 8009fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fee:	4770      	bx	lr

08009ff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b086      	sub	sp, #24
 8009ff4:	af02      	add	r7, sp, #8
 8009ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a000:	f7fb fca2 	bl	8005948 <HAL_GetTick>
 800a004:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 0308 	and.w	r3, r3, #8
 800a010:	2b08      	cmp	r3, #8
 800a012:	d10e      	bne.n	800a032 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a014:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a018:	9300      	str	r3, [sp, #0]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 f82d 	bl	800a082 <UART_WaitOnFlagUntilTimeout>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d001      	beq.n	800a032 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a02e:	2303      	movs	r3, #3
 800a030:	e023      	b.n	800a07a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f003 0304 	and.w	r3, r3, #4
 800a03c:	2b04      	cmp	r3, #4
 800a03e:	d10e      	bne.n	800a05e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a044:	9300      	str	r3, [sp, #0]
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	2200      	movs	r2, #0
 800a04a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a04e:	6878      	ldr	r0, [r7, #4]
 800a050:	f000 f817 	bl	800a082 <UART_WaitOnFlagUntilTimeout>
 800a054:	4603      	mov	r3, r0
 800a056:	2b00      	cmp	r3, #0
 800a058:	d001      	beq.n	800a05e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a05a:	2303      	movs	r3, #3
 800a05c:	e00d      	b.n	800a07a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2220      	movs	r2, #32
 800a062:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2220      	movs	r2, #32
 800a068:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a078:	2300      	movs	r3, #0
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b09c      	sub	sp, #112	; 0x70
 800a086:	af00      	add	r7, sp, #0
 800a088:	60f8      	str	r0, [r7, #12]
 800a08a:	60b9      	str	r1, [r7, #8]
 800a08c:	603b      	str	r3, [r7, #0]
 800a08e:	4613      	mov	r3, r2
 800a090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a092:	e0a5      	b.n	800a1e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a09a:	f000 80a1 	beq.w	800a1e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a09e:	f7fb fc53 	bl	8005948 <HAL_GetTick>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	1ad3      	subs	r3, r2, r3
 800a0a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	d302      	bcc.n	800a0b4 <UART_WaitOnFlagUntilTimeout+0x32>
 800a0ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d13e      	bne.n	800a132 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a0bc:	e853 3f00 	ldrex	r3, [r3]
 800a0c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a0c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a0c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a0c8:	667b      	str	r3, [r7, #100]	; 0x64
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a0d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a0d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a0da:	e841 2300 	strex	r3, r2, [r1]
 800a0de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a0e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d1e6      	bne.n	800a0b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	3308      	adds	r3, #8
 800a0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a0f0:	e853 3f00 	ldrex	r3, [r3]
 800a0f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a0f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a0f8:	f023 0301 	bic.w	r3, r3, #1
 800a0fc:	663b      	str	r3, [r7, #96]	; 0x60
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	3308      	adds	r3, #8
 800a104:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a106:	64ba      	str	r2, [r7, #72]	; 0x48
 800a108:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a10a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a10c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a10e:	e841 2300 	strex	r3, r2, [r1]
 800a112:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a116:	2b00      	cmp	r3, #0
 800a118:	d1e5      	bne.n	800a0e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2220      	movs	r2, #32
 800a11e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	2220      	movs	r2, #32
 800a124:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2200      	movs	r2, #0
 800a12a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a12e:	2303      	movs	r3, #3
 800a130:	e067      	b.n	800a202 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 0304 	and.w	r3, r3, #4
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d04f      	beq.n	800a1e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	69db      	ldr	r3, [r3, #28]
 800a146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a14a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a14e:	d147      	bne.n	800a1e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a158:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a162:	e853 3f00 	ldrex	r3, [r3]
 800a166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a16e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	461a      	mov	r2, r3
 800a176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a178:	637b      	str	r3, [r7, #52]	; 0x34
 800a17a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a17c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a17e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a180:	e841 2300 	strex	r3, r2, [r1]
 800a184:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d1e6      	bne.n	800a15a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	3308      	adds	r3, #8
 800a192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a194:	697b      	ldr	r3, [r7, #20]
 800a196:	e853 3f00 	ldrex	r3, [r3]
 800a19a:	613b      	str	r3, [r7, #16]
   return(result);
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	f023 0301 	bic.w	r3, r3, #1
 800a1a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	3308      	adds	r3, #8
 800a1aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a1ac:	623a      	str	r2, [r7, #32]
 800a1ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b0:	69f9      	ldr	r1, [r7, #28]
 800a1b2:	6a3a      	ldr	r2, [r7, #32]
 800a1b4:	e841 2300 	strex	r3, r2, [r1]
 800a1b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d1e5      	bne.n	800a18c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2220      	movs	r2, #32
 800a1c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2220      	movs	r2, #32
 800a1d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e010      	b.n	800a202 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	69da      	ldr	r2, [r3, #28]
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	bf0c      	ite	eq
 800a1f0:	2301      	moveq	r3, #1
 800a1f2:	2300      	movne	r3, #0
 800a1f4:	b2db      	uxtb	r3, r3
 800a1f6:	461a      	mov	r2, r3
 800a1f8:	79fb      	ldrb	r3, [r7, #7]
 800a1fa:	429a      	cmp	r2, r3
 800a1fc:	f43f af4a 	beq.w	800a094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	3770      	adds	r7, #112	; 0x70
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
	...

0800a20c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b096      	sub	sp, #88	; 0x58
 800a210:	af00      	add	r7, sp, #0
 800a212:	60f8      	str	r0, [r7, #12]
 800a214:	60b9      	str	r1, [r7, #8]
 800a216:	4613      	mov	r3, r2
 800a218:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	68ba      	ldr	r2, [r7, #8]
 800a21e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	88fa      	ldrh	r2, [r7, #6]
 800a224:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	2200      	movs	r2, #0
 800a22c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	2222      	movs	r2, #34	; 0x22
 800a234:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d02b      	beq.n	800a296 <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a242:	4a42      	ldr	r2, [pc, #264]	; (800a34c <UART_Start_Receive_DMA+0x140>)
 800a244:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a24a:	4a41      	ldr	r2, [pc, #260]	; (800a350 <UART_Start_Receive_DMA+0x144>)
 800a24c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a252:	4a40      	ldr	r2, [pc, #256]	; (800a354 <UART_Start_Receive_DMA+0x148>)
 800a254:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a25a:	2200      	movs	r2, #0
 800a25c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	3324      	adds	r3, #36	; 0x24
 800a268:	4619      	mov	r1, r3
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a26e:	461a      	mov	r2, r3
 800a270:	88fb      	ldrh	r3, [r7, #6]
 800a272:	f7fb fd33 	bl	8005cdc <HAL_DMA_Start_IT>
 800a276:	4603      	mov	r3, r0
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d00c      	beq.n	800a296 <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2210      	movs	r2, #16
 800a280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2220      	movs	r2, #32
 800a290:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800a292:	2301      	movs	r3, #1
 800a294:	e055      	b.n	800a342 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	2200      	movs	r2, #0
 800a29a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	691b      	ldr	r3, [r3, #16]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d018      	beq.n	800a2d8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2ae:	e853 3f00 	ldrex	r3, [r3]
 800a2b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2ba:	657b      	str	r3, [r7, #84]	; 0x54
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2c4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a2c6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a2ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a2cc:	e841 2300 	strex	r3, r2, [r1]
 800a2d0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a2d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d1e6      	bne.n	800a2a6 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	3308      	adds	r3, #8
 800a2de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e2:	e853 3f00 	ldrex	r3, [r3]
 800a2e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	f043 0301 	orr.w	r3, r3, #1
 800a2ee:	653b      	str	r3, [r7, #80]	; 0x50
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	3308      	adds	r3, #8
 800a2f6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a2f8:	637a      	str	r2, [r7, #52]	; 0x34
 800a2fa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a300:	e841 2300 	strex	r3, r2, [r1]
 800a304:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1e5      	bne.n	800a2d8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3308      	adds	r3, #8
 800a312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	e853 3f00 	ldrex	r3, [r3]
 800a31a:	613b      	str	r3, [r7, #16]
   return(result);
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a322:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	3308      	adds	r3, #8
 800a32a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a32c:	623a      	str	r2, [r7, #32]
 800a32e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a330:	69f9      	ldr	r1, [r7, #28]
 800a332:	6a3a      	ldr	r2, [r7, #32]
 800a334:	e841 2300 	strex	r3, r2, [r1]
 800a338:	61bb      	str	r3, [r7, #24]
   return(result);
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1e5      	bne.n	800a30c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3758      	adds	r7, #88	; 0x58
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	0800a46b 	.word	0x0800a46b
 800a350:	0800a58f 	.word	0x0800a58f
 800a354:	0800a5c7 	.word	0x0800a5c7

0800a358 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a358:	b480      	push	{r7}
 800a35a:	b089      	sub	sp, #36	; 0x24
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	e853 3f00 	ldrex	r3, [r3]
 800a36c:	60bb      	str	r3, [r7, #8]
   return(result);
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a374:	61fb      	str	r3, [r7, #28]
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	461a      	mov	r2, r3
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	61bb      	str	r3, [r7, #24]
 800a380:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a382:	6979      	ldr	r1, [r7, #20]
 800a384:	69ba      	ldr	r2, [r7, #24]
 800a386:	e841 2300 	strex	r3, r2, [r1]
 800a38a:	613b      	str	r3, [r7, #16]
   return(result);
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1e6      	bne.n	800a360 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	2220      	movs	r2, #32
 800a396:	679a      	str	r2, [r3, #120]	; 0x78
}
 800a398:	bf00      	nop
 800a39a:	3724      	adds	r7, #36	; 0x24
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b095      	sub	sp, #84	; 0x54
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b4:	e853 3f00 	ldrex	r3, [r3]
 800a3b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a3ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a3c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3ca:	643b      	str	r3, [r7, #64]	; 0x40
 800a3cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a3d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a3d2:	e841 2300 	strex	r3, r2, [r1]
 800a3d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1e6      	bne.n	800a3ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	3308      	adds	r3, #8
 800a3e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3e6:	6a3b      	ldr	r3, [r7, #32]
 800a3e8:	e853 3f00 	ldrex	r3, [r3]
 800a3ec:	61fb      	str	r3, [r7, #28]
   return(result);
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	f023 0301 	bic.w	r3, r3, #1
 800a3f4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	3308      	adds	r3, #8
 800a3fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a400:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a402:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a406:	e841 2300 	strex	r3, r2, [r1]
 800a40a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1e5      	bne.n	800a3de <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a416:	2b01      	cmp	r3, #1
 800a418:	d118      	bne.n	800a44c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	e853 3f00 	ldrex	r3, [r3]
 800a426:	60bb      	str	r3, [r7, #8]
   return(result);
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	f023 0310 	bic.w	r3, r3, #16
 800a42e:	647b      	str	r3, [r7, #68]	; 0x44
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	461a      	mov	r2, r3
 800a436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a438:	61bb      	str	r3, [r7, #24]
 800a43a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a43c:	6979      	ldr	r1, [r7, #20]
 800a43e:	69ba      	ldr	r2, [r7, #24]
 800a440:	e841 2300 	strex	r3, r2, [r1]
 800a444:	613b      	str	r3, [r7, #16]
   return(result);
 800a446:	693b      	ldr	r3, [r7, #16]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d1e6      	bne.n	800a41a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2220      	movs	r2, #32
 800a450:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2200      	movs	r2, #0
 800a456:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a45e:	bf00      	nop
 800a460:	3754      	adds	r7, #84	; 0x54
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr

0800a46a <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b09c      	sub	sp, #112	; 0x70
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a476:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	f003 0320 	and.w	r3, r3, #32
 800a482:	2b00      	cmp	r3, #0
 800a484:	d170      	bne.n	800a568 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800a486:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a488:	2200      	movs	r2, #0
 800a48a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a48e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a494:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a49c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a49e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a4a2:	66bb      	str	r3, [r7, #104]	; 0x68
 800a4a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	461a      	mov	r2, r3
 800a4aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800a4ae:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a4b2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a4b4:	e841 2300 	strex	r3, r2, [r1]
 800a4b8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a4ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1e6      	bne.n	800a48e <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	3308      	adds	r3, #8
 800a4c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ca:	e853 3f00 	ldrex	r3, [r3]
 800a4ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4d2:	f023 0301 	bic.w	r3, r3, #1
 800a4d6:	667b      	str	r3, [r7, #100]	; 0x64
 800a4d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	3308      	adds	r3, #8
 800a4de:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a4e0:	647a      	str	r2, [r7, #68]	; 0x44
 800a4e2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a4e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4e8:	e841 2300 	strex	r3, r2, [r1]
 800a4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a4ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d1e5      	bne.n	800a4c0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a4f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	3308      	adds	r3, #8
 800a4fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4fe:	e853 3f00 	ldrex	r3, [r3]
 800a502:	623b      	str	r3, [r7, #32]
   return(result);
 800a504:	6a3b      	ldr	r3, [r7, #32]
 800a506:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a50a:	663b      	str	r3, [r7, #96]	; 0x60
 800a50c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	3308      	adds	r3, #8
 800a512:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a514:	633a      	str	r2, [r7, #48]	; 0x30
 800a516:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a518:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a51a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a51c:	e841 2300 	strex	r3, r2, [r1]
 800a520:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1e5      	bne.n	800a4f4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a528:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a52a:	2220      	movs	r2, #32
 800a52c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a52e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a530:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a532:	2b01      	cmp	r3, #1
 800a534:	d118      	bne.n	800a568 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	e853 3f00 	ldrex	r3, [r3]
 800a542:	60fb      	str	r3, [r7, #12]
   return(result);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	f023 0310 	bic.w	r3, r3, #16
 800a54a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a54c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	461a      	mov	r2, r3
 800a552:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a554:	61fb      	str	r3, [r7, #28]
 800a556:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a558:	69b9      	ldr	r1, [r7, #24]
 800a55a:	69fa      	ldr	r2, [r7, #28]
 800a55c:	e841 2300 	strex	r3, r2, [r1]
 800a560:	617b      	str	r3, [r7, #20]
   return(result);
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	2b00      	cmp	r3, #0
 800a566:	d1e6      	bne.n	800a536 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a56a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d107      	bne.n	800a580 <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a572:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a576:	4619      	mov	r1, r3
 800a578:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a57a:	f7fa f99f 	bl	80048bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a57e:	e002      	b.n	800a586 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800a580:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a582:	f7ff fa49 	bl	8009a18 <HAL_UART_RxCpltCallback>
}
 800a586:	bf00      	nop
 800a588:	3770      	adds	r7, #112	; 0x70
 800a58a:	46bd      	mov	sp, r7
 800a58c:	bd80      	pop	{r7, pc}

0800a58e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a58e:	b580      	push	{r7, lr}
 800a590:	b084      	sub	sp, #16
 800a592:	af00      	add	r7, sp, #0
 800a594:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a59a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d109      	bne.n	800a5b8 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a5aa:	085b      	lsrs	r3, r3, #1
 800a5ac:	b29b      	uxth	r3, r3
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f7fa f983 	bl	80048bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a5b6:	e002      	b.n	800a5be <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f7ff fa37 	bl	8009a2c <HAL_UART_RxHalfCpltCallback>
}
 800a5be:	bf00      	nop
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b086      	sub	sp, #24
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5d2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a5d8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a5de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5ea:	2b80      	cmp	r3, #128	; 0x80
 800a5ec:	d109      	bne.n	800a602 <UART_DMAError+0x3c>
 800a5ee:	693b      	ldr	r3, [r7, #16]
 800a5f0:	2b21      	cmp	r3, #33	; 0x21
 800a5f2:	d106      	bne.n	800a602 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a5fc:	6978      	ldr	r0, [r7, #20]
 800a5fe:	f7ff feab 	bl	800a358 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a60c:	2b40      	cmp	r3, #64	; 0x40
 800a60e:	d109      	bne.n	800a624 <UART_DMAError+0x5e>
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2b22      	cmp	r3, #34	; 0x22
 800a614:	d106      	bne.n	800a624 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	2200      	movs	r2, #0
 800a61a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a61e:	6978      	ldr	r0, [r7, #20]
 800a620:	f7ff fec0 	bl	800a3a4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a62a:	f043 0210 	orr.w	r2, r3, #16
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a634:	6978      	ldr	r0, [r7, #20]
 800a636:	f7ff fa03 	bl	8009a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a63a:	bf00      	nop
 800a63c:	3718      	adds	r7, #24
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a660:	68f8      	ldr	r0, [r7, #12]
 800a662:	f7ff f9ed 	bl	8009a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a666:	bf00      	nop
 800a668:	3710      	adds	r7, #16
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}

0800a66e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a66e:	b580      	push	{r7, lr}
 800a670:	b088      	sub	sp, #32
 800a672:	af00      	add	r7, sp, #0
 800a674:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	e853 3f00 	ldrex	r3, [r3]
 800a682:	60bb      	str	r3, [r7, #8]
   return(result);
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a68a:	61fb      	str	r3, [r7, #28]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	461a      	mov	r2, r3
 800a692:	69fb      	ldr	r3, [r7, #28]
 800a694:	61bb      	str	r3, [r7, #24]
 800a696:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a698:	6979      	ldr	r1, [r7, #20]
 800a69a:	69ba      	ldr	r2, [r7, #24]
 800a69c:	e841 2300 	strex	r3, r2, [r1]
 800a6a0:	613b      	str	r3, [r7, #16]
   return(result);
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d1e6      	bne.n	800a676 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f7ff f9a5 	bl	8009a04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a6ba:	bf00      	nop
 800a6bc:	3720      	adds	r7, #32
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}

0800a6c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a6c2:	b480      	push	{r7}
 800a6c4:	b083      	sub	sp, #12
 800a6c6:	af00      	add	r7, sp, #0
 800a6c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a6ca:	bf00      	nop
 800a6cc:	370c      	adds	r7, #12
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d4:	4770      	bx	lr

0800a6d6 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b08c      	sub	sp, #48	; 0x30
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	60f8      	str	r0, [r7, #12]
 800a6de:	60b9      	str	r1, [r7, #8]
 800a6e0:	4613      	mov	r3, r2
 800a6e2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6e8:	2b20      	cmp	r3, #32
 800a6ea:	d14a      	bne.n	800a782 <HAL_UARTEx_ReceiveToIdle_DMA+0xac>
  {
    if ((pData == NULL) || (Size == 0U))
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d002      	beq.n	800a6f8 <HAL_UARTEx_ReceiveToIdle_DMA+0x22>
 800a6f2:	88fb      	ldrh	r3, [r7, #6]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d101      	bne.n	800a6fc <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
    {
      return HAL_ERROR;
 800a6f8:	2301      	movs	r3, #1
 800a6fa:	e043      	b.n	800a784 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
    }

    __HAL_LOCK(huart);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a702:	2b01      	cmp	r3, #1
 800a704:	d101      	bne.n	800a70a <HAL_UARTEx_ReceiveToIdle_DMA+0x34>
 800a706:	2302      	movs	r3, #2
 800a708:	e03c      	b.n	800a784 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2201      	movs	r2, #1
 800a716:	661a      	str	r2, [r3, #96]	; 0x60

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a718:	88fb      	ldrh	r3, [r7, #6]
 800a71a:	461a      	mov	r2, r3
 800a71c:	68b9      	ldr	r1, [r7, #8]
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f7ff fd74 	bl	800a20c <UART_Start_Receive_DMA>
 800a724:	4603      	mov	r3, r0
 800a726:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a72a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d124      	bne.n	800a77c <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a736:	2b01      	cmp	r3, #1
 800a738:	d11d      	bne.n	800a776 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	2210      	movs	r2, #16
 800a740:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	e853 3f00 	ldrex	r3, [r3]
 800a74e:	617b      	str	r3, [r7, #20]
   return(result);
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	f043 0310 	orr.w	r3, r3, #16
 800a756:	62bb      	str	r3, [r7, #40]	; 0x28
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	461a      	mov	r2, r3
 800a75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a760:	627b      	str	r3, [r7, #36]	; 0x24
 800a762:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a764:	6a39      	ldr	r1, [r7, #32]
 800a766:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a768:	e841 2300 	strex	r3, r2, [r1]
 800a76c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a76e:	69fb      	ldr	r3, [r7, #28]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d1e6      	bne.n	800a742 <HAL_UARTEx_ReceiveToIdle_DMA+0x6c>
 800a774:	e002      	b.n	800a77c <HAL_UARTEx_ReceiveToIdle_DMA+0xa6>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a77c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a780:	e000      	b.n	800a784 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  }
  else
  {
    return HAL_BUSY;
 800a782:	2302      	movs	r3, #2
  }
}
 800a784:	4618      	mov	r0, r3
 800a786:	3730      	adds	r7, #48	; 0x30
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <atoi>:
 800a78c:	220a      	movs	r2, #10
 800a78e:	2100      	movs	r1, #0
 800a790:	f000 bb50 	b.w	800ae34 <strtol>

0800a794 <__errno>:
 800a794:	4b01      	ldr	r3, [pc, #4]	; (800a79c <__errno+0x8>)
 800a796:	6818      	ldr	r0, [r3, #0]
 800a798:	4770      	bx	lr
 800a79a:	bf00      	nop
 800a79c:	20000030 	.word	0x20000030

0800a7a0 <__libc_init_array>:
 800a7a0:	b570      	push	{r4, r5, r6, lr}
 800a7a2:	4d0d      	ldr	r5, [pc, #52]	; (800a7d8 <__libc_init_array+0x38>)
 800a7a4:	4c0d      	ldr	r4, [pc, #52]	; (800a7dc <__libc_init_array+0x3c>)
 800a7a6:	1b64      	subs	r4, r4, r5
 800a7a8:	10a4      	asrs	r4, r4, #2
 800a7aa:	2600      	movs	r6, #0
 800a7ac:	42a6      	cmp	r6, r4
 800a7ae:	d109      	bne.n	800a7c4 <__libc_init_array+0x24>
 800a7b0:	4d0b      	ldr	r5, [pc, #44]	; (800a7e0 <__libc_init_array+0x40>)
 800a7b2:	4c0c      	ldr	r4, [pc, #48]	; (800a7e4 <__libc_init_array+0x44>)
 800a7b4:	f001 fbde 	bl	800bf74 <_init>
 800a7b8:	1b64      	subs	r4, r4, r5
 800a7ba:	10a4      	asrs	r4, r4, #2
 800a7bc:	2600      	movs	r6, #0
 800a7be:	42a6      	cmp	r6, r4
 800a7c0:	d105      	bne.n	800a7ce <__libc_init_array+0x2e>
 800a7c2:	bd70      	pop	{r4, r5, r6, pc}
 800a7c4:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7c8:	4798      	blx	r3
 800a7ca:	3601      	adds	r6, #1
 800a7cc:	e7ee      	b.n	800a7ac <__libc_init_array+0xc>
 800a7ce:	f855 3b04 	ldr.w	r3, [r5], #4
 800a7d2:	4798      	blx	r3
 800a7d4:	3601      	adds	r6, #1
 800a7d6:	e7f2      	b.n	800a7be <__libc_init_array+0x1e>
 800a7d8:	0800d720 	.word	0x0800d720
 800a7dc:	0800d720 	.word	0x0800d720
 800a7e0:	0800d720 	.word	0x0800d720
 800a7e4:	0800d724 	.word	0x0800d724

0800a7e8 <malloc>:
 800a7e8:	4b02      	ldr	r3, [pc, #8]	; (800a7f4 <malloc+0xc>)
 800a7ea:	4601      	mov	r1, r0
 800a7ec:	6818      	ldr	r0, [r3, #0]
 800a7ee:	f000 b89f 	b.w	800a930 <_malloc_r>
 800a7f2:	bf00      	nop
 800a7f4:	20000030 	.word	0x20000030

0800a7f8 <memcpy>:
 800a7f8:	440a      	add	r2, r1
 800a7fa:	4291      	cmp	r1, r2
 800a7fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a800:	d100      	bne.n	800a804 <memcpy+0xc>
 800a802:	4770      	bx	lr
 800a804:	b510      	push	{r4, lr}
 800a806:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a80a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a80e:	4291      	cmp	r1, r2
 800a810:	d1f9      	bne.n	800a806 <memcpy+0xe>
 800a812:	bd10      	pop	{r4, pc}

0800a814 <memmove>:
 800a814:	4288      	cmp	r0, r1
 800a816:	b510      	push	{r4, lr}
 800a818:	eb01 0402 	add.w	r4, r1, r2
 800a81c:	d902      	bls.n	800a824 <memmove+0x10>
 800a81e:	4284      	cmp	r4, r0
 800a820:	4623      	mov	r3, r4
 800a822:	d807      	bhi.n	800a834 <memmove+0x20>
 800a824:	1e43      	subs	r3, r0, #1
 800a826:	42a1      	cmp	r1, r4
 800a828:	d008      	beq.n	800a83c <memmove+0x28>
 800a82a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a82e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a832:	e7f8      	b.n	800a826 <memmove+0x12>
 800a834:	4402      	add	r2, r0
 800a836:	4601      	mov	r1, r0
 800a838:	428a      	cmp	r2, r1
 800a83a:	d100      	bne.n	800a83e <memmove+0x2a>
 800a83c:	bd10      	pop	{r4, pc}
 800a83e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a842:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a846:	e7f7      	b.n	800a838 <memmove+0x24>

0800a848 <memset>:
 800a848:	4402      	add	r2, r0
 800a84a:	4603      	mov	r3, r0
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d100      	bne.n	800a852 <memset+0xa>
 800a850:	4770      	bx	lr
 800a852:	f803 1b01 	strb.w	r1, [r3], #1
 800a856:	e7f9      	b.n	800a84c <memset+0x4>

0800a858 <_free_r>:
 800a858:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a85a:	2900      	cmp	r1, #0
 800a85c:	d044      	beq.n	800a8e8 <_free_r+0x90>
 800a85e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a862:	9001      	str	r0, [sp, #4]
 800a864:	2b00      	cmp	r3, #0
 800a866:	f1a1 0404 	sub.w	r4, r1, #4
 800a86a:	bfb8      	it	lt
 800a86c:	18e4      	addlt	r4, r4, r3
 800a86e:	f000 fdfb 	bl	800b468 <__malloc_lock>
 800a872:	4a1e      	ldr	r2, [pc, #120]	; (800a8ec <_free_r+0x94>)
 800a874:	9801      	ldr	r0, [sp, #4]
 800a876:	6813      	ldr	r3, [r2, #0]
 800a878:	b933      	cbnz	r3, 800a888 <_free_r+0x30>
 800a87a:	6063      	str	r3, [r4, #4]
 800a87c:	6014      	str	r4, [r2, #0]
 800a87e:	b003      	add	sp, #12
 800a880:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a884:	f000 bdf6 	b.w	800b474 <__malloc_unlock>
 800a888:	42a3      	cmp	r3, r4
 800a88a:	d908      	bls.n	800a89e <_free_r+0x46>
 800a88c:	6825      	ldr	r5, [r4, #0]
 800a88e:	1961      	adds	r1, r4, r5
 800a890:	428b      	cmp	r3, r1
 800a892:	bf01      	itttt	eq
 800a894:	6819      	ldreq	r1, [r3, #0]
 800a896:	685b      	ldreq	r3, [r3, #4]
 800a898:	1949      	addeq	r1, r1, r5
 800a89a:	6021      	streq	r1, [r4, #0]
 800a89c:	e7ed      	b.n	800a87a <_free_r+0x22>
 800a89e:	461a      	mov	r2, r3
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	b10b      	cbz	r3, 800a8a8 <_free_r+0x50>
 800a8a4:	42a3      	cmp	r3, r4
 800a8a6:	d9fa      	bls.n	800a89e <_free_r+0x46>
 800a8a8:	6811      	ldr	r1, [r2, #0]
 800a8aa:	1855      	adds	r5, r2, r1
 800a8ac:	42a5      	cmp	r5, r4
 800a8ae:	d10b      	bne.n	800a8c8 <_free_r+0x70>
 800a8b0:	6824      	ldr	r4, [r4, #0]
 800a8b2:	4421      	add	r1, r4
 800a8b4:	1854      	adds	r4, r2, r1
 800a8b6:	42a3      	cmp	r3, r4
 800a8b8:	6011      	str	r1, [r2, #0]
 800a8ba:	d1e0      	bne.n	800a87e <_free_r+0x26>
 800a8bc:	681c      	ldr	r4, [r3, #0]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	6053      	str	r3, [r2, #4]
 800a8c2:	4421      	add	r1, r4
 800a8c4:	6011      	str	r1, [r2, #0]
 800a8c6:	e7da      	b.n	800a87e <_free_r+0x26>
 800a8c8:	d902      	bls.n	800a8d0 <_free_r+0x78>
 800a8ca:	230c      	movs	r3, #12
 800a8cc:	6003      	str	r3, [r0, #0]
 800a8ce:	e7d6      	b.n	800a87e <_free_r+0x26>
 800a8d0:	6825      	ldr	r5, [r4, #0]
 800a8d2:	1961      	adds	r1, r4, r5
 800a8d4:	428b      	cmp	r3, r1
 800a8d6:	bf04      	itt	eq
 800a8d8:	6819      	ldreq	r1, [r3, #0]
 800a8da:	685b      	ldreq	r3, [r3, #4]
 800a8dc:	6063      	str	r3, [r4, #4]
 800a8de:	bf04      	itt	eq
 800a8e0:	1949      	addeq	r1, r1, r5
 800a8e2:	6021      	streq	r1, [r4, #0]
 800a8e4:	6054      	str	r4, [r2, #4]
 800a8e6:	e7ca      	b.n	800a87e <_free_r+0x26>
 800a8e8:	b003      	add	sp, #12
 800a8ea:	bd30      	pop	{r4, r5, pc}
 800a8ec:	20001520 	.word	0x20001520

0800a8f0 <sbrk_aligned>:
 800a8f0:	b570      	push	{r4, r5, r6, lr}
 800a8f2:	4e0e      	ldr	r6, [pc, #56]	; (800a92c <sbrk_aligned+0x3c>)
 800a8f4:	460c      	mov	r4, r1
 800a8f6:	6831      	ldr	r1, [r6, #0]
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	b911      	cbnz	r1, 800a902 <sbrk_aligned+0x12>
 800a8fc:	f000 f91a 	bl	800ab34 <_sbrk_r>
 800a900:	6030      	str	r0, [r6, #0]
 800a902:	4621      	mov	r1, r4
 800a904:	4628      	mov	r0, r5
 800a906:	f000 f915 	bl	800ab34 <_sbrk_r>
 800a90a:	1c43      	adds	r3, r0, #1
 800a90c:	d00a      	beq.n	800a924 <sbrk_aligned+0x34>
 800a90e:	1cc4      	adds	r4, r0, #3
 800a910:	f024 0403 	bic.w	r4, r4, #3
 800a914:	42a0      	cmp	r0, r4
 800a916:	d007      	beq.n	800a928 <sbrk_aligned+0x38>
 800a918:	1a21      	subs	r1, r4, r0
 800a91a:	4628      	mov	r0, r5
 800a91c:	f000 f90a 	bl	800ab34 <_sbrk_r>
 800a920:	3001      	adds	r0, #1
 800a922:	d101      	bne.n	800a928 <sbrk_aligned+0x38>
 800a924:	f04f 34ff 	mov.w	r4, #4294967295
 800a928:	4620      	mov	r0, r4
 800a92a:	bd70      	pop	{r4, r5, r6, pc}
 800a92c:	20001524 	.word	0x20001524

0800a930 <_malloc_r>:
 800a930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a934:	1ccd      	adds	r5, r1, #3
 800a936:	f025 0503 	bic.w	r5, r5, #3
 800a93a:	3508      	adds	r5, #8
 800a93c:	2d0c      	cmp	r5, #12
 800a93e:	bf38      	it	cc
 800a940:	250c      	movcc	r5, #12
 800a942:	2d00      	cmp	r5, #0
 800a944:	4607      	mov	r7, r0
 800a946:	db01      	blt.n	800a94c <_malloc_r+0x1c>
 800a948:	42a9      	cmp	r1, r5
 800a94a:	d905      	bls.n	800a958 <_malloc_r+0x28>
 800a94c:	230c      	movs	r3, #12
 800a94e:	603b      	str	r3, [r7, #0]
 800a950:	2600      	movs	r6, #0
 800a952:	4630      	mov	r0, r6
 800a954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a958:	4e2e      	ldr	r6, [pc, #184]	; (800aa14 <_malloc_r+0xe4>)
 800a95a:	f000 fd85 	bl	800b468 <__malloc_lock>
 800a95e:	6833      	ldr	r3, [r6, #0]
 800a960:	461c      	mov	r4, r3
 800a962:	bb34      	cbnz	r4, 800a9b2 <_malloc_r+0x82>
 800a964:	4629      	mov	r1, r5
 800a966:	4638      	mov	r0, r7
 800a968:	f7ff ffc2 	bl	800a8f0 <sbrk_aligned>
 800a96c:	1c43      	adds	r3, r0, #1
 800a96e:	4604      	mov	r4, r0
 800a970:	d14d      	bne.n	800aa0e <_malloc_r+0xde>
 800a972:	6834      	ldr	r4, [r6, #0]
 800a974:	4626      	mov	r6, r4
 800a976:	2e00      	cmp	r6, #0
 800a978:	d140      	bne.n	800a9fc <_malloc_r+0xcc>
 800a97a:	6823      	ldr	r3, [r4, #0]
 800a97c:	4631      	mov	r1, r6
 800a97e:	4638      	mov	r0, r7
 800a980:	eb04 0803 	add.w	r8, r4, r3
 800a984:	f000 f8d6 	bl	800ab34 <_sbrk_r>
 800a988:	4580      	cmp	r8, r0
 800a98a:	d13a      	bne.n	800aa02 <_malloc_r+0xd2>
 800a98c:	6821      	ldr	r1, [r4, #0]
 800a98e:	3503      	adds	r5, #3
 800a990:	1a6d      	subs	r5, r5, r1
 800a992:	f025 0503 	bic.w	r5, r5, #3
 800a996:	3508      	adds	r5, #8
 800a998:	2d0c      	cmp	r5, #12
 800a99a:	bf38      	it	cc
 800a99c:	250c      	movcc	r5, #12
 800a99e:	4629      	mov	r1, r5
 800a9a0:	4638      	mov	r0, r7
 800a9a2:	f7ff ffa5 	bl	800a8f0 <sbrk_aligned>
 800a9a6:	3001      	adds	r0, #1
 800a9a8:	d02b      	beq.n	800aa02 <_malloc_r+0xd2>
 800a9aa:	6823      	ldr	r3, [r4, #0]
 800a9ac:	442b      	add	r3, r5
 800a9ae:	6023      	str	r3, [r4, #0]
 800a9b0:	e00e      	b.n	800a9d0 <_malloc_r+0xa0>
 800a9b2:	6822      	ldr	r2, [r4, #0]
 800a9b4:	1b52      	subs	r2, r2, r5
 800a9b6:	d41e      	bmi.n	800a9f6 <_malloc_r+0xc6>
 800a9b8:	2a0b      	cmp	r2, #11
 800a9ba:	d916      	bls.n	800a9ea <_malloc_r+0xba>
 800a9bc:	1961      	adds	r1, r4, r5
 800a9be:	42a3      	cmp	r3, r4
 800a9c0:	6025      	str	r5, [r4, #0]
 800a9c2:	bf18      	it	ne
 800a9c4:	6059      	strne	r1, [r3, #4]
 800a9c6:	6863      	ldr	r3, [r4, #4]
 800a9c8:	bf08      	it	eq
 800a9ca:	6031      	streq	r1, [r6, #0]
 800a9cc:	5162      	str	r2, [r4, r5]
 800a9ce:	604b      	str	r3, [r1, #4]
 800a9d0:	4638      	mov	r0, r7
 800a9d2:	f104 060b 	add.w	r6, r4, #11
 800a9d6:	f000 fd4d 	bl	800b474 <__malloc_unlock>
 800a9da:	f026 0607 	bic.w	r6, r6, #7
 800a9de:	1d23      	adds	r3, r4, #4
 800a9e0:	1af2      	subs	r2, r6, r3
 800a9e2:	d0b6      	beq.n	800a952 <_malloc_r+0x22>
 800a9e4:	1b9b      	subs	r3, r3, r6
 800a9e6:	50a3      	str	r3, [r4, r2]
 800a9e8:	e7b3      	b.n	800a952 <_malloc_r+0x22>
 800a9ea:	6862      	ldr	r2, [r4, #4]
 800a9ec:	42a3      	cmp	r3, r4
 800a9ee:	bf0c      	ite	eq
 800a9f0:	6032      	streq	r2, [r6, #0]
 800a9f2:	605a      	strne	r2, [r3, #4]
 800a9f4:	e7ec      	b.n	800a9d0 <_malloc_r+0xa0>
 800a9f6:	4623      	mov	r3, r4
 800a9f8:	6864      	ldr	r4, [r4, #4]
 800a9fa:	e7b2      	b.n	800a962 <_malloc_r+0x32>
 800a9fc:	4634      	mov	r4, r6
 800a9fe:	6876      	ldr	r6, [r6, #4]
 800aa00:	e7b9      	b.n	800a976 <_malloc_r+0x46>
 800aa02:	230c      	movs	r3, #12
 800aa04:	603b      	str	r3, [r7, #0]
 800aa06:	4638      	mov	r0, r7
 800aa08:	f000 fd34 	bl	800b474 <__malloc_unlock>
 800aa0c:	e7a1      	b.n	800a952 <_malloc_r+0x22>
 800aa0e:	6025      	str	r5, [r4, #0]
 800aa10:	e7de      	b.n	800a9d0 <_malloc_r+0xa0>
 800aa12:	bf00      	nop
 800aa14:	20001520 	.word	0x20001520

0800aa18 <iprintf>:
 800aa18:	b40f      	push	{r0, r1, r2, r3}
 800aa1a:	4b0a      	ldr	r3, [pc, #40]	; (800aa44 <iprintf+0x2c>)
 800aa1c:	b513      	push	{r0, r1, r4, lr}
 800aa1e:	681c      	ldr	r4, [r3, #0]
 800aa20:	b124      	cbz	r4, 800aa2c <iprintf+0x14>
 800aa22:	69a3      	ldr	r3, [r4, #24]
 800aa24:	b913      	cbnz	r3, 800aa2c <iprintf+0x14>
 800aa26:	4620      	mov	r0, r4
 800aa28:	f000 fc06 	bl	800b238 <__sinit>
 800aa2c:	ab05      	add	r3, sp, #20
 800aa2e:	9a04      	ldr	r2, [sp, #16]
 800aa30:	68a1      	ldr	r1, [r4, #8]
 800aa32:	9301      	str	r3, [sp, #4]
 800aa34:	4620      	mov	r0, r4
 800aa36:	f000 fea9 	bl	800b78c <_vfiprintf_r>
 800aa3a:	b002      	add	sp, #8
 800aa3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa40:	b004      	add	sp, #16
 800aa42:	4770      	bx	lr
 800aa44:	20000030 	.word	0x20000030

0800aa48 <_puts_r>:
 800aa48:	b570      	push	{r4, r5, r6, lr}
 800aa4a:	460e      	mov	r6, r1
 800aa4c:	4605      	mov	r5, r0
 800aa4e:	b118      	cbz	r0, 800aa58 <_puts_r+0x10>
 800aa50:	6983      	ldr	r3, [r0, #24]
 800aa52:	b90b      	cbnz	r3, 800aa58 <_puts_r+0x10>
 800aa54:	f000 fbf0 	bl	800b238 <__sinit>
 800aa58:	69ab      	ldr	r3, [r5, #24]
 800aa5a:	68ac      	ldr	r4, [r5, #8]
 800aa5c:	b913      	cbnz	r3, 800aa64 <_puts_r+0x1c>
 800aa5e:	4628      	mov	r0, r5
 800aa60:	f000 fbea 	bl	800b238 <__sinit>
 800aa64:	4b2c      	ldr	r3, [pc, #176]	; (800ab18 <_puts_r+0xd0>)
 800aa66:	429c      	cmp	r4, r3
 800aa68:	d120      	bne.n	800aaac <_puts_r+0x64>
 800aa6a:	686c      	ldr	r4, [r5, #4]
 800aa6c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aa6e:	07db      	lsls	r3, r3, #31
 800aa70:	d405      	bmi.n	800aa7e <_puts_r+0x36>
 800aa72:	89a3      	ldrh	r3, [r4, #12]
 800aa74:	0598      	lsls	r0, r3, #22
 800aa76:	d402      	bmi.n	800aa7e <_puts_r+0x36>
 800aa78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aa7a:	f000 fc8d 	bl	800b398 <__retarget_lock_acquire_recursive>
 800aa7e:	89a3      	ldrh	r3, [r4, #12]
 800aa80:	0719      	lsls	r1, r3, #28
 800aa82:	d51d      	bpl.n	800aac0 <_puts_r+0x78>
 800aa84:	6923      	ldr	r3, [r4, #16]
 800aa86:	b1db      	cbz	r3, 800aac0 <_puts_r+0x78>
 800aa88:	3e01      	subs	r6, #1
 800aa8a:	68a3      	ldr	r3, [r4, #8]
 800aa8c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aa90:	3b01      	subs	r3, #1
 800aa92:	60a3      	str	r3, [r4, #8]
 800aa94:	bb39      	cbnz	r1, 800aae6 <_puts_r+0x9e>
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	da38      	bge.n	800ab0c <_puts_r+0xc4>
 800aa9a:	4622      	mov	r2, r4
 800aa9c:	210a      	movs	r1, #10
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	f000 f9d2 	bl	800ae48 <__swbuf_r>
 800aaa4:	3001      	adds	r0, #1
 800aaa6:	d011      	beq.n	800aacc <_puts_r+0x84>
 800aaa8:	250a      	movs	r5, #10
 800aaaa:	e011      	b.n	800aad0 <_puts_r+0x88>
 800aaac:	4b1b      	ldr	r3, [pc, #108]	; (800ab1c <_puts_r+0xd4>)
 800aaae:	429c      	cmp	r4, r3
 800aab0:	d101      	bne.n	800aab6 <_puts_r+0x6e>
 800aab2:	68ac      	ldr	r4, [r5, #8]
 800aab4:	e7da      	b.n	800aa6c <_puts_r+0x24>
 800aab6:	4b1a      	ldr	r3, [pc, #104]	; (800ab20 <_puts_r+0xd8>)
 800aab8:	429c      	cmp	r4, r3
 800aaba:	bf08      	it	eq
 800aabc:	68ec      	ldreq	r4, [r5, #12]
 800aabe:	e7d5      	b.n	800aa6c <_puts_r+0x24>
 800aac0:	4621      	mov	r1, r4
 800aac2:	4628      	mov	r0, r5
 800aac4:	f000 fa12 	bl	800aeec <__swsetup_r>
 800aac8:	2800      	cmp	r0, #0
 800aaca:	d0dd      	beq.n	800aa88 <_puts_r+0x40>
 800aacc:	f04f 35ff 	mov.w	r5, #4294967295
 800aad0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800aad2:	07da      	lsls	r2, r3, #31
 800aad4:	d405      	bmi.n	800aae2 <_puts_r+0x9a>
 800aad6:	89a3      	ldrh	r3, [r4, #12]
 800aad8:	059b      	lsls	r3, r3, #22
 800aada:	d402      	bmi.n	800aae2 <_puts_r+0x9a>
 800aadc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aade:	f000 fc5c 	bl	800b39a <__retarget_lock_release_recursive>
 800aae2:	4628      	mov	r0, r5
 800aae4:	bd70      	pop	{r4, r5, r6, pc}
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	da04      	bge.n	800aaf4 <_puts_r+0xac>
 800aaea:	69a2      	ldr	r2, [r4, #24]
 800aaec:	429a      	cmp	r2, r3
 800aaee:	dc06      	bgt.n	800aafe <_puts_r+0xb6>
 800aaf0:	290a      	cmp	r1, #10
 800aaf2:	d004      	beq.n	800aafe <_puts_r+0xb6>
 800aaf4:	6823      	ldr	r3, [r4, #0]
 800aaf6:	1c5a      	adds	r2, r3, #1
 800aaf8:	6022      	str	r2, [r4, #0]
 800aafa:	7019      	strb	r1, [r3, #0]
 800aafc:	e7c5      	b.n	800aa8a <_puts_r+0x42>
 800aafe:	4622      	mov	r2, r4
 800ab00:	4628      	mov	r0, r5
 800ab02:	f000 f9a1 	bl	800ae48 <__swbuf_r>
 800ab06:	3001      	adds	r0, #1
 800ab08:	d1bf      	bne.n	800aa8a <_puts_r+0x42>
 800ab0a:	e7df      	b.n	800aacc <_puts_r+0x84>
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	250a      	movs	r5, #10
 800ab10:	1c5a      	adds	r2, r3, #1
 800ab12:	6022      	str	r2, [r4, #0]
 800ab14:	701d      	strb	r5, [r3, #0]
 800ab16:	e7db      	b.n	800aad0 <_puts_r+0x88>
 800ab18:	0800d6a4 	.word	0x0800d6a4
 800ab1c:	0800d6c4 	.word	0x0800d6c4
 800ab20:	0800d684 	.word	0x0800d684

0800ab24 <puts>:
 800ab24:	4b02      	ldr	r3, [pc, #8]	; (800ab30 <puts+0xc>)
 800ab26:	4601      	mov	r1, r0
 800ab28:	6818      	ldr	r0, [r3, #0]
 800ab2a:	f7ff bf8d 	b.w	800aa48 <_puts_r>
 800ab2e:	bf00      	nop
 800ab30:	20000030 	.word	0x20000030

0800ab34 <_sbrk_r>:
 800ab34:	b538      	push	{r3, r4, r5, lr}
 800ab36:	4d06      	ldr	r5, [pc, #24]	; (800ab50 <_sbrk_r+0x1c>)
 800ab38:	2300      	movs	r3, #0
 800ab3a:	4604      	mov	r4, r0
 800ab3c:	4608      	mov	r0, r1
 800ab3e:	602b      	str	r3, [r5, #0]
 800ab40:	f7fa fe64 	bl	800580c <_sbrk>
 800ab44:	1c43      	adds	r3, r0, #1
 800ab46:	d102      	bne.n	800ab4e <_sbrk_r+0x1a>
 800ab48:	682b      	ldr	r3, [r5, #0]
 800ab4a:	b103      	cbz	r3, 800ab4e <_sbrk_r+0x1a>
 800ab4c:	6023      	str	r3, [r4, #0]
 800ab4e:	bd38      	pop	{r3, r4, r5, pc}
 800ab50:	2000152c 	.word	0x2000152c

0800ab54 <sniprintf>:
 800ab54:	b40c      	push	{r2, r3}
 800ab56:	b530      	push	{r4, r5, lr}
 800ab58:	4b17      	ldr	r3, [pc, #92]	; (800abb8 <sniprintf+0x64>)
 800ab5a:	1e0c      	subs	r4, r1, #0
 800ab5c:	681d      	ldr	r5, [r3, #0]
 800ab5e:	b09d      	sub	sp, #116	; 0x74
 800ab60:	da08      	bge.n	800ab74 <sniprintf+0x20>
 800ab62:	238b      	movs	r3, #139	; 0x8b
 800ab64:	602b      	str	r3, [r5, #0]
 800ab66:	f04f 30ff 	mov.w	r0, #4294967295
 800ab6a:	b01d      	add	sp, #116	; 0x74
 800ab6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ab70:	b002      	add	sp, #8
 800ab72:	4770      	bx	lr
 800ab74:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ab78:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ab7c:	bf14      	ite	ne
 800ab7e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ab82:	4623      	moveq	r3, r4
 800ab84:	9304      	str	r3, [sp, #16]
 800ab86:	9307      	str	r3, [sp, #28]
 800ab88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ab8c:	9002      	str	r0, [sp, #8]
 800ab8e:	9006      	str	r0, [sp, #24]
 800ab90:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ab94:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ab96:	ab21      	add	r3, sp, #132	; 0x84
 800ab98:	a902      	add	r1, sp, #8
 800ab9a:	4628      	mov	r0, r5
 800ab9c:	9301      	str	r3, [sp, #4]
 800ab9e:	f000 fccb 	bl	800b538 <_svfiprintf_r>
 800aba2:	1c43      	adds	r3, r0, #1
 800aba4:	bfbc      	itt	lt
 800aba6:	238b      	movlt	r3, #139	; 0x8b
 800aba8:	602b      	strlt	r3, [r5, #0]
 800abaa:	2c00      	cmp	r4, #0
 800abac:	d0dd      	beq.n	800ab6a <sniprintf+0x16>
 800abae:	9b02      	ldr	r3, [sp, #8]
 800abb0:	2200      	movs	r2, #0
 800abb2:	701a      	strb	r2, [r3, #0]
 800abb4:	e7d9      	b.n	800ab6a <sniprintf+0x16>
 800abb6:	bf00      	nop
 800abb8:	20000030 	.word	0x20000030

0800abbc <siprintf>:
 800abbc:	b40e      	push	{r1, r2, r3}
 800abbe:	b500      	push	{lr}
 800abc0:	b09c      	sub	sp, #112	; 0x70
 800abc2:	ab1d      	add	r3, sp, #116	; 0x74
 800abc4:	9002      	str	r0, [sp, #8]
 800abc6:	9006      	str	r0, [sp, #24]
 800abc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800abcc:	4809      	ldr	r0, [pc, #36]	; (800abf4 <siprintf+0x38>)
 800abce:	9107      	str	r1, [sp, #28]
 800abd0:	9104      	str	r1, [sp, #16]
 800abd2:	4909      	ldr	r1, [pc, #36]	; (800abf8 <siprintf+0x3c>)
 800abd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800abd8:	9105      	str	r1, [sp, #20]
 800abda:	6800      	ldr	r0, [r0, #0]
 800abdc:	9301      	str	r3, [sp, #4]
 800abde:	a902      	add	r1, sp, #8
 800abe0:	f000 fcaa 	bl	800b538 <_svfiprintf_r>
 800abe4:	9b02      	ldr	r3, [sp, #8]
 800abe6:	2200      	movs	r2, #0
 800abe8:	701a      	strb	r2, [r3, #0]
 800abea:	b01c      	add	sp, #112	; 0x70
 800abec:	f85d eb04 	ldr.w	lr, [sp], #4
 800abf0:	b003      	add	sp, #12
 800abf2:	4770      	bx	lr
 800abf4:	20000030 	.word	0x20000030
 800abf8:	ffff0208 	.word	0xffff0208

0800abfc <strchr>:
 800abfc:	b2c9      	uxtb	r1, r1
 800abfe:	4603      	mov	r3, r0
 800ac00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac04:	b11a      	cbz	r2, 800ac0e <strchr+0x12>
 800ac06:	428a      	cmp	r2, r1
 800ac08:	d1f9      	bne.n	800abfe <strchr+0x2>
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	4770      	bx	lr
 800ac0e:	2900      	cmp	r1, #0
 800ac10:	bf18      	it	ne
 800ac12:	2300      	movne	r3, #0
 800ac14:	e7f9      	b.n	800ac0a <strchr+0xe>

0800ac16 <strcpy>:
 800ac16:	4603      	mov	r3, r0
 800ac18:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac1c:	f803 2b01 	strb.w	r2, [r3], #1
 800ac20:	2a00      	cmp	r2, #0
 800ac22:	d1f9      	bne.n	800ac18 <strcpy+0x2>
 800ac24:	4770      	bx	lr

0800ac26 <strncpy>:
 800ac26:	b510      	push	{r4, lr}
 800ac28:	3901      	subs	r1, #1
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	b132      	cbz	r2, 800ac3c <strncpy+0x16>
 800ac2e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ac32:	f803 4b01 	strb.w	r4, [r3], #1
 800ac36:	3a01      	subs	r2, #1
 800ac38:	2c00      	cmp	r4, #0
 800ac3a:	d1f7      	bne.n	800ac2c <strncpy+0x6>
 800ac3c:	441a      	add	r2, r3
 800ac3e:	2100      	movs	r1, #0
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d100      	bne.n	800ac46 <strncpy+0x20>
 800ac44:	bd10      	pop	{r4, pc}
 800ac46:	f803 1b01 	strb.w	r1, [r3], #1
 800ac4a:	e7f9      	b.n	800ac40 <strncpy+0x1a>

0800ac4c <strstr>:
 800ac4c:	780a      	ldrb	r2, [r1, #0]
 800ac4e:	b570      	push	{r4, r5, r6, lr}
 800ac50:	b96a      	cbnz	r2, 800ac6e <strstr+0x22>
 800ac52:	bd70      	pop	{r4, r5, r6, pc}
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d109      	bne.n	800ac6c <strstr+0x20>
 800ac58:	460c      	mov	r4, r1
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d0f6      	beq.n	800ac52 <strstr+0x6>
 800ac64:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ac68:	429e      	cmp	r6, r3
 800ac6a:	d0f7      	beq.n	800ac5c <strstr+0x10>
 800ac6c:	3001      	adds	r0, #1
 800ac6e:	7803      	ldrb	r3, [r0, #0]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d1ef      	bne.n	800ac54 <strstr+0x8>
 800ac74:	4618      	mov	r0, r3
 800ac76:	e7ec      	b.n	800ac52 <strstr+0x6>

0800ac78 <strtok>:
 800ac78:	4b16      	ldr	r3, [pc, #88]	; (800acd4 <strtok+0x5c>)
 800ac7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ac7c:	681e      	ldr	r6, [r3, #0]
 800ac7e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ac80:	4605      	mov	r5, r0
 800ac82:	b9fc      	cbnz	r4, 800acc4 <strtok+0x4c>
 800ac84:	2050      	movs	r0, #80	; 0x50
 800ac86:	9101      	str	r1, [sp, #4]
 800ac88:	f7ff fdae 	bl	800a7e8 <malloc>
 800ac8c:	9901      	ldr	r1, [sp, #4]
 800ac8e:	65b0      	str	r0, [r6, #88]	; 0x58
 800ac90:	4602      	mov	r2, r0
 800ac92:	b920      	cbnz	r0, 800ac9e <strtok+0x26>
 800ac94:	4b10      	ldr	r3, [pc, #64]	; (800acd8 <strtok+0x60>)
 800ac96:	4811      	ldr	r0, [pc, #68]	; (800acdc <strtok+0x64>)
 800ac98:	2157      	movs	r1, #87	; 0x57
 800ac9a:	f000 f995 	bl	800afc8 <__assert_func>
 800ac9e:	e9c0 4400 	strd	r4, r4, [r0]
 800aca2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800aca6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800acaa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800acae:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800acb2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800acb6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800acba:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800acbe:	6184      	str	r4, [r0, #24]
 800acc0:	7704      	strb	r4, [r0, #28]
 800acc2:	6244      	str	r4, [r0, #36]	; 0x24
 800acc4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800acc6:	2301      	movs	r3, #1
 800acc8:	4628      	mov	r0, r5
 800acca:	b002      	add	sp, #8
 800accc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800acd0:	f000 b806 	b.w	800ace0 <__strtok_r>
 800acd4:	20000030 	.word	0x20000030
 800acd8:	0800d4d0 	.word	0x0800d4d0
 800acdc:	0800d4e7 	.word	0x0800d4e7

0800ace0 <__strtok_r>:
 800ace0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ace2:	b908      	cbnz	r0, 800ace8 <__strtok_r+0x8>
 800ace4:	6810      	ldr	r0, [r2, #0]
 800ace6:	b188      	cbz	r0, 800ad0c <__strtok_r+0x2c>
 800ace8:	4604      	mov	r4, r0
 800acea:	4620      	mov	r0, r4
 800acec:	f814 5b01 	ldrb.w	r5, [r4], #1
 800acf0:	460f      	mov	r7, r1
 800acf2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800acf6:	b91e      	cbnz	r6, 800ad00 <__strtok_r+0x20>
 800acf8:	b965      	cbnz	r5, 800ad14 <__strtok_r+0x34>
 800acfa:	6015      	str	r5, [r2, #0]
 800acfc:	4628      	mov	r0, r5
 800acfe:	e005      	b.n	800ad0c <__strtok_r+0x2c>
 800ad00:	42b5      	cmp	r5, r6
 800ad02:	d1f6      	bne.n	800acf2 <__strtok_r+0x12>
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1f0      	bne.n	800acea <__strtok_r+0xa>
 800ad08:	6014      	str	r4, [r2, #0]
 800ad0a:	7003      	strb	r3, [r0, #0]
 800ad0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad0e:	461c      	mov	r4, r3
 800ad10:	e00c      	b.n	800ad2c <__strtok_r+0x4c>
 800ad12:	b915      	cbnz	r5, 800ad1a <__strtok_r+0x3a>
 800ad14:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad18:	460e      	mov	r6, r1
 800ad1a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ad1e:	42ab      	cmp	r3, r5
 800ad20:	d1f7      	bne.n	800ad12 <__strtok_r+0x32>
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d0f3      	beq.n	800ad0e <__strtok_r+0x2e>
 800ad26:	2300      	movs	r3, #0
 800ad28:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ad2c:	6014      	str	r4, [r2, #0]
 800ad2e:	e7ed      	b.n	800ad0c <__strtok_r+0x2c>

0800ad30 <_strtol_l.constprop.0>:
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad36:	d001      	beq.n	800ad3c <_strtol_l.constprop.0+0xc>
 800ad38:	2b24      	cmp	r3, #36	; 0x24
 800ad3a:	d906      	bls.n	800ad4a <_strtol_l.constprop.0+0x1a>
 800ad3c:	f7ff fd2a 	bl	800a794 <__errno>
 800ad40:	2316      	movs	r3, #22
 800ad42:	6003      	str	r3, [r0, #0]
 800ad44:	2000      	movs	r0, #0
 800ad46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad4a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ae30 <_strtol_l.constprop.0+0x100>
 800ad4e:	460d      	mov	r5, r1
 800ad50:	462e      	mov	r6, r5
 800ad52:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ad56:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ad5a:	f017 0708 	ands.w	r7, r7, #8
 800ad5e:	d1f7      	bne.n	800ad50 <_strtol_l.constprop.0+0x20>
 800ad60:	2c2d      	cmp	r4, #45	; 0x2d
 800ad62:	d132      	bne.n	800adca <_strtol_l.constprop.0+0x9a>
 800ad64:	782c      	ldrb	r4, [r5, #0]
 800ad66:	2701      	movs	r7, #1
 800ad68:	1cb5      	adds	r5, r6, #2
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d05b      	beq.n	800ae26 <_strtol_l.constprop.0+0xf6>
 800ad6e:	2b10      	cmp	r3, #16
 800ad70:	d109      	bne.n	800ad86 <_strtol_l.constprop.0+0x56>
 800ad72:	2c30      	cmp	r4, #48	; 0x30
 800ad74:	d107      	bne.n	800ad86 <_strtol_l.constprop.0+0x56>
 800ad76:	782c      	ldrb	r4, [r5, #0]
 800ad78:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ad7c:	2c58      	cmp	r4, #88	; 0x58
 800ad7e:	d14d      	bne.n	800ae1c <_strtol_l.constprop.0+0xec>
 800ad80:	786c      	ldrb	r4, [r5, #1]
 800ad82:	2310      	movs	r3, #16
 800ad84:	3502      	adds	r5, #2
 800ad86:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ad8a:	f108 38ff 	add.w	r8, r8, #4294967295
 800ad8e:	f04f 0c00 	mov.w	ip, #0
 800ad92:	fbb8 f9f3 	udiv	r9, r8, r3
 800ad96:	4666      	mov	r6, ip
 800ad98:	fb03 8a19 	mls	sl, r3, r9, r8
 800ad9c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ada0:	f1be 0f09 	cmp.w	lr, #9
 800ada4:	d816      	bhi.n	800add4 <_strtol_l.constprop.0+0xa4>
 800ada6:	4674      	mov	r4, lr
 800ada8:	42a3      	cmp	r3, r4
 800adaa:	dd24      	ble.n	800adf6 <_strtol_l.constprop.0+0xc6>
 800adac:	f1bc 0f00 	cmp.w	ip, #0
 800adb0:	db1e      	blt.n	800adf0 <_strtol_l.constprop.0+0xc0>
 800adb2:	45b1      	cmp	r9, r6
 800adb4:	d31c      	bcc.n	800adf0 <_strtol_l.constprop.0+0xc0>
 800adb6:	d101      	bne.n	800adbc <_strtol_l.constprop.0+0x8c>
 800adb8:	45a2      	cmp	sl, r4
 800adba:	db19      	blt.n	800adf0 <_strtol_l.constprop.0+0xc0>
 800adbc:	fb06 4603 	mla	r6, r6, r3, r4
 800adc0:	f04f 0c01 	mov.w	ip, #1
 800adc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800adc8:	e7e8      	b.n	800ad9c <_strtol_l.constprop.0+0x6c>
 800adca:	2c2b      	cmp	r4, #43	; 0x2b
 800adcc:	bf04      	itt	eq
 800adce:	782c      	ldrbeq	r4, [r5, #0]
 800add0:	1cb5      	addeq	r5, r6, #2
 800add2:	e7ca      	b.n	800ad6a <_strtol_l.constprop.0+0x3a>
 800add4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800add8:	f1be 0f19 	cmp.w	lr, #25
 800addc:	d801      	bhi.n	800ade2 <_strtol_l.constprop.0+0xb2>
 800adde:	3c37      	subs	r4, #55	; 0x37
 800ade0:	e7e2      	b.n	800ada8 <_strtol_l.constprop.0+0x78>
 800ade2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ade6:	f1be 0f19 	cmp.w	lr, #25
 800adea:	d804      	bhi.n	800adf6 <_strtol_l.constprop.0+0xc6>
 800adec:	3c57      	subs	r4, #87	; 0x57
 800adee:	e7db      	b.n	800ada8 <_strtol_l.constprop.0+0x78>
 800adf0:	f04f 3cff 	mov.w	ip, #4294967295
 800adf4:	e7e6      	b.n	800adc4 <_strtol_l.constprop.0+0x94>
 800adf6:	f1bc 0f00 	cmp.w	ip, #0
 800adfa:	da05      	bge.n	800ae08 <_strtol_l.constprop.0+0xd8>
 800adfc:	2322      	movs	r3, #34	; 0x22
 800adfe:	6003      	str	r3, [r0, #0]
 800ae00:	4646      	mov	r6, r8
 800ae02:	b942      	cbnz	r2, 800ae16 <_strtol_l.constprop.0+0xe6>
 800ae04:	4630      	mov	r0, r6
 800ae06:	e79e      	b.n	800ad46 <_strtol_l.constprop.0+0x16>
 800ae08:	b107      	cbz	r7, 800ae0c <_strtol_l.constprop.0+0xdc>
 800ae0a:	4276      	negs	r6, r6
 800ae0c:	2a00      	cmp	r2, #0
 800ae0e:	d0f9      	beq.n	800ae04 <_strtol_l.constprop.0+0xd4>
 800ae10:	f1bc 0f00 	cmp.w	ip, #0
 800ae14:	d000      	beq.n	800ae18 <_strtol_l.constprop.0+0xe8>
 800ae16:	1e69      	subs	r1, r5, #1
 800ae18:	6011      	str	r1, [r2, #0]
 800ae1a:	e7f3      	b.n	800ae04 <_strtol_l.constprop.0+0xd4>
 800ae1c:	2430      	movs	r4, #48	; 0x30
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d1b1      	bne.n	800ad86 <_strtol_l.constprop.0+0x56>
 800ae22:	2308      	movs	r3, #8
 800ae24:	e7af      	b.n	800ad86 <_strtol_l.constprop.0+0x56>
 800ae26:	2c30      	cmp	r4, #48	; 0x30
 800ae28:	d0a5      	beq.n	800ad76 <_strtol_l.constprop.0+0x46>
 800ae2a:	230a      	movs	r3, #10
 800ae2c:	e7ab      	b.n	800ad86 <_strtol_l.constprop.0+0x56>
 800ae2e:	bf00      	nop
 800ae30:	0800d581 	.word	0x0800d581

0800ae34 <strtol>:
 800ae34:	4613      	mov	r3, r2
 800ae36:	460a      	mov	r2, r1
 800ae38:	4601      	mov	r1, r0
 800ae3a:	4802      	ldr	r0, [pc, #8]	; (800ae44 <strtol+0x10>)
 800ae3c:	6800      	ldr	r0, [r0, #0]
 800ae3e:	f7ff bf77 	b.w	800ad30 <_strtol_l.constprop.0>
 800ae42:	bf00      	nop
 800ae44:	20000030 	.word	0x20000030

0800ae48 <__swbuf_r>:
 800ae48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae4a:	460e      	mov	r6, r1
 800ae4c:	4614      	mov	r4, r2
 800ae4e:	4605      	mov	r5, r0
 800ae50:	b118      	cbz	r0, 800ae5a <__swbuf_r+0x12>
 800ae52:	6983      	ldr	r3, [r0, #24]
 800ae54:	b90b      	cbnz	r3, 800ae5a <__swbuf_r+0x12>
 800ae56:	f000 f9ef 	bl	800b238 <__sinit>
 800ae5a:	4b21      	ldr	r3, [pc, #132]	; (800aee0 <__swbuf_r+0x98>)
 800ae5c:	429c      	cmp	r4, r3
 800ae5e:	d12b      	bne.n	800aeb8 <__swbuf_r+0x70>
 800ae60:	686c      	ldr	r4, [r5, #4]
 800ae62:	69a3      	ldr	r3, [r4, #24]
 800ae64:	60a3      	str	r3, [r4, #8]
 800ae66:	89a3      	ldrh	r3, [r4, #12]
 800ae68:	071a      	lsls	r2, r3, #28
 800ae6a:	d52f      	bpl.n	800aecc <__swbuf_r+0x84>
 800ae6c:	6923      	ldr	r3, [r4, #16]
 800ae6e:	b36b      	cbz	r3, 800aecc <__swbuf_r+0x84>
 800ae70:	6923      	ldr	r3, [r4, #16]
 800ae72:	6820      	ldr	r0, [r4, #0]
 800ae74:	1ac0      	subs	r0, r0, r3
 800ae76:	6963      	ldr	r3, [r4, #20]
 800ae78:	b2f6      	uxtb	r6, r6
 800ae7a:	4283      	cmp	r3, r0
 800ae7c:	4637      	mov	r7, r6
 800ae7e:	dc04      	bgt.n	800ae8a <__swbuf_r+0x42>
 800ae80:	4621      	mov	r1, r4
 800ae82:	4628      	mov	r0, r5
 800ae84:	f000 f944 	bl	800b110 <_fflush_r>
 800ae88:	bb30      	cbnz	r0, 800aed8 <__swbuf_r+0x90>
 800ae8a:	68a3      	ldr	r3, [r4, #8]
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	60a3      	str	r3, [r4, #8]
 800ae90:	6823      	ldr	r3, [r4, #0]
 800ae92:	1c5a      	adds	r2, r3, #1
 800ae94:	6022      	str	r2, [r4, #0]
 800ae96:	701e      	strb	r6, [r3, #0]
 800ae98:	6963      	ldr	r3, [r4, #20]
 800ae9a:	3001      	adds	r0, #1
 800ae9c:	4283      	cmp	r3, r0
 800ae9e:	d004      	beq.n	800aeaa <__swbuf_r+0x62>
 800aea0:	89a3      	ldrh	r3, [r4, #12]
 800aea2:	07db      	lsls	r3, r3, #31
 800aea4:	d506      	bpl.n	800aeb4 <__swbuf_r+0x6c>
 800aea6:	2e0a      	cmp	r6, #10
 800aea8:	d104      	bne.n	800aeb4 <__swbuf_r+0x6c>
 800aeaa:	4621      	mov	r1, r4
 800aeac:	4628      	mov	r0, r5
 800aeae:	f000 f92f 	bl	800b110 <_fflush_r>
 800aeb2:	b988      	cbnz	r0, 800aed8 <__swbuf_r+0x90>
 800aeb4:	4638      	mov	r0, r7
 800aeb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aeb8:	4b0a      	ldr	r3, [pc, #40]	; (800aee4 <__swbuf_r+0x9c>)
 800aeba:	429c      	cmp	r4, r3
 800aebc:	d101      	bne.n	800aec2 <__swbuf_r+0x7a>
 800aebe:	68ac      	ldr	r4, [r5, #8]
 800aec0:	e7cf      	b.n	800ae62 <__swbuf_r+0x1a>
 800aec2:	4b09      	ldr	r3, [pc, #36]	; (800aee8 <__swbuf_r+0xa0>)
 800aec4:	429c      	cmp	r4, r3
 800aec6:	bf08      	it	eq
 800aec8:	68ec      	ldreq	r4, [r5, #12]
 800aeca:	e7ca      	b.n	800ae62 <__swbuf_r+0x1a>
 800aecc:	4621      	mov	r1, r4
 800aece:	4628      	mov	r0, r5
 800aed0:	f000 f80c 	bl	800aeec <__swsetup_r>
 800aed4:	2800      	cmp	r0, #0
 800aed6:	d0cb      	beq.n	800ae70 <__swbuf_r+0x28>
 800aed8:	f04f 37ff 	mov.w	r7, #4294967295
 800aedc:	e7ea      	b.n	800aeb4 <__swbuf_r+0x6c>
 800aede:	bf00      	nop
 800aee0:	0800d6a4 	.word	0x0800d6a4
 800aee4:	0800d6c4 	.word	0x0800d6c4
 800aee8:	0800d684 	.word	0x0800d684

0800aeec <__swsetup_r>:
 800aeec:	4b32      	ldr	r3, [pc, #200]	; (800afb8 <__swsetup_r+0xcc>)
 800aeee:	b570      	push	{r4, r5, r6, lr}
 800aef0:	681d      	ldr	r5, [r3, #0]
 800aef2:	4606      	mov	r6, r0
 800aef4:	460c      	mov	r4, r1
 800aef6:	b125      	cbz	r5, 800af02 <__swsetup_r+0x16>
 800aef8:	69ab      	ldr	r3, [r5, #24]
 800aefa:	b913      	cbnz	r3, 800af02 <__swsetup_r+0x16>
 800aefc:	4628      	mov	r0, r5
 800aefe:	f000 f99b 	bl	800b238 <__sinit>
 800af02:	4b2e      	ldr	r3, [pc, #184]	; (800afbc <__swsetup_r+0xd0>)
 800af04:	429c      	cmp	r4, r3
 800af06:	d10f      	bne.n	800af28 <__swsetup_r+0x3c>
 800af08:	686c      	ldr	r4, [r5, #4]
 800af0a:	89a3      	ldrh	r3, [r4, #12]
 800af0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af10:	0719      	lsls	r1, r3, #28
 800af12:	d42c      	bmi.n	800af6e <__swsetup_r+0x82>
 800af14:	06dd      	lsls	r5, r3, #27
 800af16:	d411      	bmi.n	800af3c <__swsetup_r+0x50>
 800af18:	2309      	movs	r3, #9
 800af1a:	6033      	str	r3, [r6, #0]
 800af1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800af20:	81a3      	strh	r3, [r4, #12]
 800af22:	f04f 30ff 	mov.w	r0, #4294967295
 800af26:	e03e      	b.n	800afa6 <__swsetup_r+0xba>
 800af28:	4b25      	ldr	r3, [pc, #148]	; (800afc0 <__swsetup_r+0xd4>)
 800af2a:	429c      	cmp	r4, r3
 800af2c:	d101      	bne.n	800af32 <__swsetup_r+0x46>
 800af2e:	68ac      	ldr	r4, [r5, #8]
 800af30:	e7eb      	b.n	800af0a <__swsetup_r+0x1e>
 800af32:	4b24      	ldr	r3, [pc, #144]	; (800afc4 <__swsetup_r+0xd8>)
 800af34:	429c      	cmp	r4, r3
 800af36:	bf08      	it	eq
 800af38:	68ec      	ldreq	r4, [r5, #12]
 800af3a:	e7e6      	b.n	800af0a <__swsetup_r+0x1e>
 800af3c:	0758      	lsls	r0, r3, #29
 800af3e:	d512      	bpl.n	800af66 <__swsetup_r+0x7a>
 800af40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800af42:	b141      	cbz	r1, 800af56 <__swsetup_r+0x6a>
 800af44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800af48:	4299      	cmp	r1, r3
 800af4a:	d002      	beq.n	800af52 <__swsetup_r+0x66>
 800af4c:	4630      	mov	r0, r6
 800af4e:	f7ff fc83 	bl	800a858 <_free_r>
 800af52:	2300      	movs	r3, #0
 800af54:	6363      	str	r3, [r4, #52]	; 0x34
 800af56:	89a3      	ldrh	r3, [r4, #12]
 800af58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800af5c:	81a3      	strh	r3, [r4, #12]
 800af5e:	2300      	movs	r3, #0
 800af60:	6063      	str	r3, [r4, #4]
 800af62:	6923      	ldr	r3, [r4, #16]
 800af64:	6023      	str	r3, [r4, #0]
 800af66:	89a3      	ldrh	r3, [r4, #12]
 800af68:	f043 0308 	orr.w	r3, r3, #8
 800af6c:	81a3      	strh	r3, [r4, #12]
 800af6e:	6923      	ldr	r3, [r4, #16]
 800af70:	b94b      	cbnz	r3, 800af86 <__swsetup_r+0x9a>
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800af78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af7c:	d003      	beq.n	800af86 <__swsetup_r+0x9a>
 800af7e:	4621      	mov	r1, r4
 800af80:	4630      	mov	r0, r6
 800af82:	f000 fa31 	bl	800b3e8 <__smakebuf_r>
 800af86:	89a0      	ldrh	r0, [r4, #12]
 800af88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800af8c:	f010 0301 	ands.w	r3, r0, #1
 800af90:	d00a      	beq.n	800afa8 <__swsetup_r+0xbc>
 800af92:	2300      	movs	r3, #0
 800af94:	60a3      	str	r3, [r4, #8]
 800af96:	6963      	ldr	r3, [r4, #20]
 800af98:	425b      	negs	r3, r3
 800af9a:	61a3      	str	r3, [r4, #24]
 800af9c:	6923      	ldr	r3, [r4, #16]
 800af9e:	b943      	cbnz	r3, 800afb2 <__swsetup_r+0xc6>
 800afa0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800afa4:	d1ba      	bne.n	800af1c <__swsetup_r+0x30>
 800afa6:	bd70      	pop	{r4, r5, r6, pc}
 800afa8:	0781      	lsls	r1, r0, #30
 800afaa:	bf58      	it	pl
 800afac:	6963      	ldrpl	r3, [r4, #20]
 800afae:	60a3      	str	r3, [r4, #8]
 800afb0:	e7f4      	b.n	800af9c <__swsetup_r+0xb0>
 800afb2:	2000      	movs	r0, #0
 800afb4:	e7f7      	b.n	800afa6 <__swsetup_r+0xba>
 800afb6:	bf00      	nop
 800afb8:	20000030 	.word	0x20000030
 800afbc:	0800d6a4 	.word	0x0800d6a4
 800afc0:	0800d6c4 	.word	0x0800d6c4
 800afc4:	0800d684 	.word	0x0800d684

0800afc8 <__assert_func>:
 800afc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afca:	4614      	mov	r4, r2
 800afcc:	461a      	mov	r2, r3
 800afce:	4b09      	ldr	r3, [pc, #36]	; (800aff4 <__assert_func+0x2c>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4605      	mov	r5, r0
 800afd4:	68d8      	ldr	r0, [r3, #12]
 800afd6:	b14c      	cbz	r4, 800afec <__assert_func+0x24>
 800afd8:	4b07      	ldr	r3, [pc, #28]	; (800aff8 <__assert_func+0x30>)
 800afda:	9100      	str	r1, [sp, #0]
 800afdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afe0:	4906      	ldr	r1, [pc, #24]	; (800affc <__assert_func+0x34>)
 800afe2:	462b      	mov	r3, r5
 800afe4:	f000 f9a6 	bl	800b334 <fiprintf>
 800afe8:	f000 feea 	bl	800bdc0 <abort>
 800afec:	4b04      	ldr	r3, [pc, #16]	; (800b000 <__assert_func+0x38>)
 800afee:	461c      	mov	r4, r3
 800aff0:	e7f3      	b.n	800afda <__assert_func+0x12>
 800aff2:	bf00      	nop
 800aff4:	20000030 	.word	0x20000030
 800aff8:	0800d544 	.word	0x0800d544
 800affc:	0800d551 	.word	0x0800d551
 800b000:	0800d57f 	.word	0x0800d57f

0800b004 <__sflush_r>:
 800b004:	898a      	ldrh	r2, [r1, #12]
 800b006:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b00a:	4605      	mov	r5, r0
 800b00c:	0710      	lsls	r0, r2, #28
 800b00e:	460c      	mov	r4, r1
 800b010:	d458      	bmi.n	800b0c4 <__sflush_r+0xc0>
 800b012:	684b      	ldr	r3, [r1, #4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	dc05      	bgt.n	800b024 <__sflush_r+0x20>
 800b018:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	dc02      	bgt.n	800b024 <__sflush_r+0x20>
 800b01e:	2000      	movs	r0, #0
 800b020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b024:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b026:	2e00      	cmp	r6, #0
 800b028:	d0f9      	beq.n	800b01e <__sflush_r+0x1a>
 800b02a:	2300      	movs	r3, #0
 800b02c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b030:	682f      	ldr	r7, [r5, #0]
 800b032:	602b      	str	r3, [r5, #0]
 800b034:	d032      	beq.n	800b09c <__sflush_r+0x98>
 800b036:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b038:	89a3      	ldrh	r3, [r4, #12]
 800b03a:	075a      	lsls	r2, r3, #29
 800b03c:	d505      	bpl.n	800b04a <__sflush_r+0x46>
 800b03e:	6863      	ldr	r3, [r4, #4]
 800b040:	1ac0      	subs	r0, r0, r3
 800b042:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b044:	b10b      	cbz	r3, 800b04a <__sflush_r+0x46>
 800b046:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b048:	1ac0      	subs	r0, r0, r3
 800b04a:	2300      	movs	r3, #0
 800b04c:	4602      	mov	r2, r0
 800b04e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b050:	6a21      	ldr	r1, [r4, #32]
 800b052:	4628      	mov	r0, r5
 800b054:	47b0      	blx	r6
 800b056:	1c43      	adds	r3, r0, #1
 800b058:	89a3      	ldrh	r3, [r4, #12]
 800b05a:	d106      	bne.n	800b06a <__sflush_r+0x66>
 800b05c:	6829      	ldr	r1, [r5, #0]
 800b05e:	291d      	cmp	r1, #29
 800b060:	d82c      	bhi.n	800b0bc <__sflush_r+0xb8>
 800b062:	4a2a      	ldr	r2, [pc, #168]	; (800b10c <__sflush_r+0x108>)
 800b064:	40ca      	lsrs	r2, r1
 800b066:	07d6      	lsls	r6, r2, #31
 800b068:	d528      	bpl.n	800b0bc <__sflush_r+0xb8>
 800b06a:	2200      	movs	r2, #0
 800b06c:	6062      	str	r2, [r4, #4]
 800b06e:	04d9      	lsls	r1, r3, #19
 800b070:	6922      	ldr	r2, [r4, #16]
 800b072:	6022      	str	r2, [r4, #0]
 800b074:	d504      	bpl.n	800b080 <__sflush_r+0x7c>
 800b076:	1c42      	adds	r2, r0, #1
 800b078:	d101      	bne.n	800b07e <__sflush_r+0x7a>
 800b07a:	682b      	ldr	r3, [r5, #0]
 800b07c:	b903      	cbnz	r3, 800b080 <__sflush_r+0x7c>
 800b07e:	6560      	str	r0, [r4, #84]	; 0x54
 800b080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b082:	602f      	str	r7, [r5, #0]
 800b084:	2900      	cmp	r1, #0
 800b086:	d0ca      	beq.n	800b01e <__sflush_r+0x1a>
 800b088:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b08c:	4299      	cmp	r1, r3
 800b08e:	d002      	beq.n	800b096 <__sflush_r+0x92>
 800b090:	4628      	mov	r0, r5
 800b092:	f7ff fbe1 	bl	800a858 <_free_r>
 800b096:	2000      	movs	r0, #0
 800b098:	6360      	str	r0, [r4, #52]	; 0x34
 800b09a:	e7c1      	b.n	800b020 <__sflush_r+0x1c>
 800b09c:	6a21      	ldr	r1, [r4, #32]
 800b09e:	2301      	movs	r3, #1
 800b0a0:	4628      	mov	r0, r5
 800b0a2:	47b0      	blx	r6
 800b0a4:	1c41      	adds	r1, r0, #1
 800b0a6:	d1c7      	bne.n	800b038 <__sflush_r+0x34>
 800b0a8:	682b      	ldr	r3, [r5, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d0c4      	beq.n	800b038 <__sflush_r+0x34>
 800b0ae:	2b1d      	cmp	r3, #29
 800b0b0:	d001      	beq.n	800b0b6 <__sflush_r+0xb2>
 800b0b2:	2b16      	cmp	r3, #22
 800b0b4:	d101      	bne.n	800b0ba <__sflush_r+0xb6>
 800b0b6:	602f      	str	r7, [r5, #0]
 800b0b8:	e7b1      	b.n	800b01e <__sflush_r+0x1a>
 800b0ba:	89a3      	ldrh	r3, [r4, #12]
 800b0bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0c0:	81a3      	strh	r3, [r4, #12]
 800b0c2:	e7ad      	b.n	800b020 <__sflush_r+0x1c>
 800b0c4:	690f      	ldr	r7, [r1, #16]
 800b0c6:	2f00      	cmp	r7, #0
 800b0c8:	d0a9      	beq.n	800b01e <__sflush_r+0x1a>
 800b0ca:	0793      	lsls	r3, r2, #30
 800b0cc:	680e      	ldr	r6, [r1, #0]
 800b0ce:	bf08      	it	eq
 800b0d0:	694b      	ldreq	r3, [r1, #20]
 800b0d2:	600f      	str	r7, [r1, #0]
 800b0d4:	bf18      	it	ne
 800b0d6:	2300      	movne	r3, #0
 800b0d8:	eba6 0807 	sub.w	r8, r6, r7
 800b0dc:	608b      	str	r3, [r1, #8]
 800b0de:	f1b8 0f00 	cmp.w	r8, #0
 800b0e2:	dd9c      	ble.n	800b01e <__sflush_r+0x1a>
 800b0e4:	6a21      	ldr	r1, [r4, #32]
 800b0e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b0e8:	4643      	mov	r3, r8
 800b0ea:	463a      	mov	r2, r7
 800b0ec:	4628      	mov	r0, r5
 800b0ee:	47b0      	blx	r6
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	dc06      	bgt.n	800b102 <__sflush_r+0xfe>
 800b0f4:	89a3      	ldrh	r3, [r4, #12]
 800b0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b0fa:	81a3      	strh	r3, [r4, #12]
 800b0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b100:	e78e      	b.n	800b020 <__sflush_r+0x1c>
 800b102:	4407      	add	r7, r0
 800b104:	eba8 0800 	sub.w	r8, r8, r0
 800b108:	e7e9      	b.n	800b0de <__sflush_r+0xda>
 800b10a:	bf00      	nop
 800b10c:	20400001 	.word	0x20400001

0800b110 <_fflush_r>:
 800b110:	b538      	push	{r3, r4, r5, lr}
 800b112:	690b      	ldr	r3, [r1, #16]
 800b114:	4605      	mov	r5, r0
 800b116:	460c      	mov	r4, r1
 800b118:	b913      	cbnz	r3, 800b120 <_fflush_r+0x10>
 800b11a:	2500      	movs	r5, #0
 800b11c:	4628      	mov	r0, r5
 800b11e:	bd38      	pop	{r3, r4, r5, pc}
 800b120:	b118      	cbz	r0, 800b12a <_fflush_r+0x1a>
 800b122:	6983      	ldr	r3, [r0, #24]
 800b124:	b90b      	cbnz	r3, 800b12a <_fflush_r+0x1a>
 800b126:	f000 f887 	bl	800b238 <__sinit>
 800b12a:	4b14      	ldr	r3, [pc, #80]	; (800b17c <_fflush_r+0x6c>)
 800b12c:	429c      	cmp	r4, r3
 800b12e:	d11b      	bne.n	800b168 <_fflush_r+0x58>
 800b130:	686c      	ldr	r4, [r5, #4]
 800b132:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d0ef      	beq.n	800b11a <_fflush_r+0xa>
 800b13a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b13c:	07d0      	lsls	r0, r2, #31
 800b13e:	d404      	bmi.n	800b14a <_fflush_r+0x3a>
 800b140:	0599      	lsls	r1, r3, #22
 800b142:	d402      	bmi.n	800b14a <_fflush_r+0x3a>
 800b144:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b146:	f000 f927 	bl	800b398 <__retarget_lock_acquire_recursive>
 800b14a:	4628      	mov	r0, r5
 800b14c:	4621      	mov	r1, r4
 800b14e:	f7ff ff59 	bl	800b004 <__sflush_r>
 800b152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b154:	07da      	lsls	r2, r3, #31
 800b156:	4605      	mov	r5, r0
 800b158:	d4e0      	bmi.n	800b11c <_fflush_r+0xc>
 800b15a:	89a3      	ldrh	r3, [r4, #12]
 800b15c:	059b      	lsls	r3, r3, #22
 800b15e:	d4dd      	bmi.n	800b11c <_fflush_r+0xc>
 800b160:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b162:	f000 f91a 	bl	800b39a <__retarget_lock_release_recursive>
 800b166:	e7d9      	b.n	800b11c <_fflush_r+0xc>
 800b168:	4b05      	ldr	r3, [pc, #20]	; (800b180 <_fflush_r+0x70>)
 800b16a:	429c      	cmp	r4, r3
 800b16c:	d101      	bne.n	800b172 <_fflush_r+0x62>
 800b16e:	68ac      	ldr	r4, [r5, #8]
 800b170:	e7df      	b.n	800b132 <_fflush_r+0x22>
 800b172:	4b04      	ldr	r3, [pc, #16]	; (800b184 <_fflush_r+0x74>)
 800b174:	429c      	cmp	r4, r3
 800b176:	bf08      	it	eq
 800b178:	68ec      	ldreq	r4, [r5, #12]
 800b17a:	e7da      	b.n	800b132 <_fflush_r+0x22>
 800b17c:	0800d6a4 	.word	0x0800d6a4
 800b180:	0800d6c4 	.word	0x0800d6c4
 800b184:	0800d684 	.word	0x0800d684

0800b188 <std>:
 800b188:	2300      	movs	r3, #0
 800b18a:	b510      	push	{r4, lr}
 800b18c:	4604      	mov	r4, r0
 800b18e:	e9c0 3300 	strd	r3, r3, [r0]
 800b192:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b196:	6083      	str	r3, [r0, #8]
 800b198:	8181      	strh	r1, [r0, #12]
 800b19a:	6643      	str	r3, [r0, #100]	; 0x64
 800b19c:	81c2      	strh	r2, [r0, #14]
 800b19e:	6183      	str	r3, [r0, #24]
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	2208      	movs	r2, #8
 800b1a4:	305c      	adds	r0, #92	; 0x5c
 800b1a6:	f7ff fb4f 	bl	800a848 <memset>
 800b1aa:	4b05      	ldr	r3, [pc, #20]	; (800b1c0 <std+0x38>)
 800b1ac:	6263      	str	r3, [r4, #36]	; 0x24
 800b1ae:	4b05      	ldr	r3, [pc, #20]	; (800b1c4 <std+0x3c>)
 800b1b0:	62a3      	str	r3, [r4, #40]	; 0x28
 800b1b2:	4b05      	ldr	r3, [pc, #20]	; (800b1c8 <std+0x40>)
 800b1b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b1b6:	4b05      	ldr	r3, [pc, #20]	; (800b1cc <std+0x44>)
 800b1b8:	6224      	str	r4, [r4, #32]
 800b1ba:	6323      	str	r3, [r4, #48]	; 0x30
 800b1bc:	bd10      	pop	{r4, pc}
 800b1be:	bf00      	nop
 800b1c0:	0800bd15 	.word	0x0800bd15
 800b1c4:	0800bd37 	.word	0x0800bd37
 800b1c8:	0800bd6f 	.word	0x0800bd6f
 800b1cc:	0800bd93 	.word	0x0800bd93

0800b1d0 <_cleanup_r>:
 800b1d0:	4901      	ldr	r1, [pc, #4]	; (800b1d8 <_cleanup_r+0x8>)
 800b1d2:	f000 b8c1 	b.w	800b358 <_fwalk_reent>
 800b1d6:	bf00      	nop
 800b1d8:	0800b111 	.word	0x0800b111

0800b1dc <__sfmoreglue>:
 800b1dc:	b570      	push	{r4, r5, r6, lr}
 800b1de:	2268      	movs	r2, #104	; 0x68
 800b1e0:	1e4d      	subs	r5, r1, #1
 800b1e2:	4355      	muls	r5, r2
 800b1e4:	460e      	mov	r6, r1
 800b1e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b1ea:	f7ff fba1 	bl	800a930 <_malloc_r>
 800b1ee:	4604      	mov	r4, r0
 800b1f0:	b140      	cbz	r0, 800b204 <__sfmoreglue+0x28>
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	e9c0 1600 	strd	r1, r6, [r0]
 800b1f8:	300c      	adds	r0, #12
 800b1fa:	60a0      	str	r0, [r4, #8]
 800b1fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b200:	f7ff fb22 	bl	800a848 <memset>
 800b204:	4620      	mov	r0, r4
 800b206:	bd70      	pop	{r4, r5, r6, pc}

0800b208 <__sfp_lock_acquire>:
 800b208:	4801      	ldr	r0, [pc, #4]	; (800b210 <__sfp_lock_acquire+0x8>)
 800b20a:	f000 b8c5 	b.w	800b398 <__retarget_lock_acquire_recursive>
 800b20e:	bf00      	nop
 800b210:	20001529 	.word	0x20001529

0800b214 <__sfp_lock_release>:
 800b214:	4801      	ldr	r0, [pc, #4]	; (800b21c <__sfp_lock_release+0x8>)
 800b216:	f000 b8c0 	b.w	800b39a <__retarget_lock_release_recursive>
 800b21a:	bf00      	nop
 800b21c:	20001529 	.word	0x20001529

0800b220 <__sinit_lock_acquire>:
 800b220:	4801      	ldr	r0, [pc, #4]	; (800b228 <__sinit_lock_acquire+0x8>)
 800b222:	f000 b8b9 	b.w	800b398 <__retarget_lock_acquire_recursive>
 800b226:	bf00      	nop
 800b228:	2000152a 	.word	0x2000152a

0800b22c <__sinit_lock_release>:
 800b22c:	4801      	ldr	r0, [pc, #4]	; (800b234 <__sinit_lock_release+0x8>)
 800b22e:	f000 b8b4 	b.w	800b39a <__retarget_lock_release_recursive>
 800b232:	bf00      	nop
 800b234:	2000152a 	.word	0x2000152a

0800b238 <__sinit>:
 800b238:	b510      	push	{r4, lr}
 800b23a:	4604      	mov	r4, r0
 800b23c:	f7ff fff0 	bl	800b220 <__sinit_lock_acquire>
 800b240:	69a3      	ldr	r3, [r4, #24]
 800b242:	b11b      	cbz	r3, 800b24c <__sinit+0x14>
 800b244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b248:	f7ff bff0 	b.w	800b22c <__sinit_lock_release>
 800b24c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b250:	6523      	str	r3, [r4, #80]	; 0x50
 800b252:	4b13      	ldr	r3, [pc, #76]	; (800b2a0 <__sinit+0x68>)
 800b254:	4a13      	ldr	r2, [pc, #76]	; (800b2a4 <__sinit+0x6c>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	62a2      	str	r2, [r4, #40]	; 0x28
 800b25a:	42a3      	cmp	r3, r4
 800b25c:	bf04      	itt	eq
 800b25e:	2301      	moveq	r3, #1
 800b260:	61a3      	streq	r3, [r4, #24]
 800b262:	4620      	mov	r0, r4
 800b264:	f000 f820 	bl	800b2a8 <__sfp>
 800b268:	6060      	str	r0, [r4, #4]
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 f81c 	bl	800b2a8 <__sfp>
 800b270:	60a0      	str	r0, [r4, #8]
 800b272:	4620      	mov	r0, r4
 800b274:	f000 f818 	bl	800b2a8 <__sfp>
 800b278:	2200      	movs	r2, #0
 800b27a:	60e0      	str	r0, [r4, #12]
 800b27c:	2104      	movs	r1, #4
 800b27e:	6860      	ldr	r0, [r4, #4]
 800b280:	f7ff ff82 	bl	800b188 <std>
 800b284:	68a0      	ldr	r0, [r4, #8]
 800b286:	2201      	movs	r2, #1
 800b288:	2109      	movs	r1, #9
 800b28a:	f7ff ff7d 	bl	800b188 <std>
 800b28e:	68e0      	ldr	r0, [r4, #12]
 800b290:	2202      	movs	r2, #2
 800b292:	2112      	movs	r1, #18
 800b294:	f7ff ff78 	bl	800b188 <std>
 800b298:	2301      	movs	r3, #1
 800b29a:	61a3      	str	r3, [r4, #24]
 800b29c:	e7d2      	b.n	800b244 <__sinit+0xc>
 800b29e:	bf00      	nop
 800b2a0:	0800d4cc 	.word	0x0800d4cc
 800b2a4:	0800b1d1 	.word	0x0800b1d1

0800b2a8 <__sfp>:
 800b2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2aa:	4607      	mov	r7, r0
 800b2ac:	f7ff ffac 	bl	800b208 <__sfp_lock_acquire>
 800b2b0:	4b1e      	ldr	r3, [pc, #120]	; (800b32c <__sfp+0x84>)
 800b2b2:	681e      	ldr	r6, [r3, #0]
 800b2b4:	69b3      	ldr	r3, [r6, #24]
 800b2b6:	b913      	cbnz	r3, 800b2be <__sfp+0x16>
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	f7ff ffbd 	bl	800b238 <__sinit>
 800b2be:	3648      	adds	r6, #72	; 0x48
 800b2c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b2c4:	3b01      	subs	r3, #1
 800b2c6:	d503      	bpl.n	800b2d0 <__sfp+0x28>
 800b2c8:	6833      	ldr	r3, [r6, #0]
 800b2ca:	b30b      	cbz	r3, 800b310 <__sfp+0x68>
 800b2cc:	6836      	ldr	r6, [r6, #0]
 800b2ce:	e7f7      	b.n	800b2c0 <__sfp+0x18>
 800b2d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b2d4:	b9d5      	cbnz	r5, 800b30c <__sfp+0x64>
 800b2d6:	4b16      	ldr	r3, [pc, #88]	; (800b330 <__sfp+0x88>)
 800b2d8:	60e3      	str	r3, [r4, #12]
 800b2da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b2de:	6665      	str	r5, [r4, #100]	; 0x64
 800b2e0:	f000 f859 	bl	800b396 <__retarget_lock_init_recursive>
 800b2e4:	f7ff ff96 	bl	800b214 <__sfp_lock_release>
 800b2e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b2ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b2f0:	6025      	str	r5, [r4, #0]
 800b2f2:	61a5      	str	r5, [r4, #24]
 800b2f4:	2208      	movs	r2, #8
 800b2f6:	4629      	mov	r1, r5
 800b2f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b2fc:	f7ff faa4 	bl	800a848 <memset>
 800b300:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b304:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b308:	4620      	mov	r0, r4
 800b30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b30c:	3468      	adds	r4, #104	; 0x68
 800b30e:	e7d9      	b.n	800b2c4 <__sfp+0x1c>
 800b310:	2104      	movs	r1, #4
 800b312:	4638      	mov	r0, r7
 800b314:	f7ff ff62 	bl	800b1dc <__sfmoreglue>
 800b318:	4604      	mov	r4, r0
 800b31a:	6030      	str	r0, [r6, #0]
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d1d5      	bne.n	800b2cc <__sfp+0x24>
 800b320:	f7ff ff78 	bl	800b214 <__sfp_lock_release>
 800b324:	230c      	movs	r3, #12
 800b326:	603b      	str	r3, [r7, #0]
 800b328:	e7ee      	b.n	800b308 <__sfp+0x60>
 800b32a:	bf00      	nop
 800b32c:	0800d4cc 	.word	0x0800d4cc
 800b330:	ffff0001 	.word	0xffff0001

0800b334 <fiprintf>:
 800b334:	b40e      	push	{r1, r2, r3}
 800b336:	b503      	push	{r0, r1, lr}
 800b338:	4601      	mov	r1, r0
 800b33a:	ab03      	add	r3, sp, #12
 800b33c:	4805      	ldr	r0, [pc, #20]	; (800b354 <fiprintf+0x20>)
 800b33e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b342:	6800      	ldr	r0, [r0, #0]
 800b344:	9301      	str	r3, [sp, #4]
 800b346:	f000 fa21 	bl	800b78c <_vfiprintf_r>
 800b34a:	b002      	add	sp, #8
 800b34c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b350:	b003      	add	sp, #12
 800b352:	4770      	bx	lr
 800b354:	20000030 	.word	0x20000030

0800b358 <_fwalk_reent>:
 800b358:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b35c:	4606      	mov	r6, r0
 800b35e:	4688      	mov	r8, r1
 800b360:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b364:	2700      	movs	r7, #0
 800b366:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b36a:	f1b9 0901 	subs.w	r9, r9, #1
 800b36e:	d505      	bpl.n	800b37c <_fwalk_reent+0x24>
 800b370:	6824      	ldr	r4, [r4, #0]
 800b372:	2c00      	cmp	r4, #0
 800b374:	d1f7      	bne.n	800b366 <_fwalk_reent+0xe>
 800b376:	4638      	mov	r0, r7
 800b378:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b37c:	89ab      	ldrh	r3, [r5, #12]
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d907      	bls.n	800b392 <_fwalk_reent+0x3a>
 800b382:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b386:	3301      	adds	r3, #1
 800b388:	d003      	beq.n	800b392 <_fwalk_reent+0x3a>
 800b38a:	4629      	mov	r1, r5
 800b38c:	4630      	mov	r0, r6
 800b38e:	47c0      	blx	r8
 800b390:	4307      	orrs	r7, r0
 800b392:	3568      	adds	r5, #104	; 0x68
 800b394:	e7e9      	b.n	800b36a <_fwalk_reent+0x12>

0800b396 <__retarget_lock_init_recursive>:
 800b396:	4770      	bx	lr

0800b398 <__retarget_lock_acquire_recursive>:
 800b398:	4770      	bx	lr

0800b39a <__retarget_lock_release_recursive>:
 800b39a:	4770      	bx	lr

0800b39c <__swhatbuf_r>:
 800b39c:	b570      	push	{r4, r5, r6, lr}
 800b39e:	460e      	mov	r6, r1
 800b3a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3a4:	2900      	cmp	r1, #0
 800b3a6:	b096      	sub	sp, #88	; 0x58
 800b3a8:	4614      	mov	r4, r2
 800b3aa:	461d      	mov	r5, r3
 800b3ac:	da08      	bge.n	800b3c0 <__swhatbuf_r+0x24>
 800b3ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	602a      	str	r2, [r5, #0]
 800b3b6:	061a      	lsls	r2, r3, #24
 800b3b8:	d410      	bmi.n	800b3dc <__swhatbuf_r+0x40>
 800b3ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b3be:	e00e      	b.n	800b3de <__swhatbuf_r+0x42>
 800b3c0:	466a      	mov	r2, sp
 800b3c2:	f000 fd15 	bl	800bdf0 <_fstat_r>
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	dbf1      	blt.n	800b3ae <__swhatbuf_r+0x12>
 800b3ca:	9a01      	ldr	r2, [sp, #4]
 800b3cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b3d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b3d4:	425a      	negs	r2, r3
 800b3d6:	415a      	adcs	r2, r3
 800b3d8:	602a      	str	r2, [r5, #0]
 800b3da:	e7ee      	b.n	800b3ba <__swhatbuf_r+0x1e>
 800b3dc:	2340      	movs	r3, #64	; 0x40
 800b3de:	2000      	movs	r0, #0
 800b3e0:	6023      	str	r3, [r4, #0]
 800b3e2:	b016      	add	sp, #88	; 0x58
 800b3e4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b3e8 <__smakebuf_r>:
 800b3e8:	898b      	ldrh	r3, [r1, #12]
 800b3ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3ec:	079d      	lsls	r5, r3, #30
 800b3ee:	4606      	mov	r6, r0
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	d507      	bpl.n	800b404 <__smakebuf_r+0x1c>
 800b3f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b3f8:	6023      	str	r3, [r4, #0]
 800b3fa:	6123      	str	r3, [r4, #16]
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	6163      	str	r3, [r4, #20]
 800b400:	b002      	add	sp, #8
 800b402:	bd70      	pop	{r4, r5, r6, pc}
 800b404:	ab01      	add	r3, sp, #4
 800b406:	466a      	mov	r2, sp
 800b408:	f7ff ffc8 	bl	800b39c <__swhatbuf_r>
 800b40c:	9900      	ldr	r1, [sp, #0]
 800b40e:	4605      	mov	r5, r0
 800b410:	4630      	mov	r0, r6
 800b412:	f7ff fa8d 	bl	800a930 <_malloc_r>
 800b416:	b948      	cbnz	r0, 800b42c <__smakebuf_r+0x44>
 800b418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b41c:	059a      	lsls	r2, r3, #22
 800b41e:	d4ef      	bmi.n	800b400 <__smakebuf_r+0x18>
 800b420:	f023 0303 	bic.w	r3, r3, #3
 800b424:	f043 0302 	orr.w	r3, r3, #2
 800b428:	81a3      	strh	r3, [r4, #12]
 800b42a:	e7e3      	b.n	800b3f4 <__smakebuf_r+0xc>
 800b42c:	4b0d      	ldr	r3, [pc, #52]	; (800b464 <__smakebuf_r+0x7c>)
 800b42e:	62b3      	str	r3, [r6, #40]	; 0x28
 800b430:	89a3      	ldrh	r3, [r4, #12]
 800b432:	6020      	str	r0, [r4, #0]
 800b434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b438:	81a3      	strh	r3, [r4, #12]
 800b43a:	9b00      	ldr	r3, [sp, #0]
 800b43c:	6163      	str	r3, [r4, #20]
 800b43e:	9b01      	ldr	r3, [sp, #4]
 800b440:	6120      	str	r0, [r4, #16]
 800b442:	b15b      	cbz	r3, 800b45c <__smakebuf_r+0x74>
 800b444:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b448:	4630      	mov	r0, r6
 800b44a:	f000 fce3 	bl	800be14 <_isatty_r>
 800b44e:	b128      	cbz	r0, 800b45c <__smakebuf_r+0x74>
 800b450:	89a3      	ldrh	r3, [r4, #12]
 800b452:	f023 0303 	bic.w	r3, r3, #3
 800b456:	f043 0301 	orr.w	r3, r3, #1
 800b45a:	81a3      	strh	r3, [r4, #12]
 800b45c:	89a0      	ldrh	r0, [r4, #12]
 800b45e:	4305      	orrs	r5, r0
 800b460:	81a5      	strh	r5, [r4, #12]
 800b462:	e7cd      	b.n	800b400 <__smakebuf_r+0x18>
 800b464:	0800b1d1 	.word	0x0800b1d1

0800b468 <__malloc_lock>:
 800b468:	4801      	ldr	r0, [pc, #4]	; (800b470 <__malloc_lock+0x8>)
 800b46a:	f7ff bf95 	b.w	800b398 <__retarget_lock_acquire_recursive>
 800b46e:	bf00      	nop
 800b470:	20001528 	.word	0x20001528

0800b474 <__malloc_unlock>:
 800b474:	4801      	ldr	r0, [pc, #4]	; (800b47c <__malloc_unlock+0x8>)
 800b476:	f7ff bf90 	b.w	800b39a <__retarget_lock_release_recursive>
 800b47a:	bf00      	nop
 800b47c:	20001528 	.word	0x20001528

0800b480 <__ssputs_r>:
 800b480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b484:	688e      	ldr	r6, [r1, #8]
 800b486:	429e      	cmp	r6, r3
 800b488:	4682      	mov	sl, r0
 800b48a:	460c      	mov	r4, r1
 800b48c:	4690      	mov	r8, r2
 800b48e:	461f      	mov	r7, r3
 800b490:	d838      	bhi.n	800b504 <__ssputs_r+0x84>
 800b492:	898a      	ldrh	r2, [r1, #12]
 800b494:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b498:	d032      	beq.n	800b500 <__ssputs_r+0x80>
 800b49a:	6825      	ldr	r5, [r4, #0]
 800b49c:	6909      	ldr	r1, [r1, #16]
 800b49e:	eba5 0901 	sub.w	r9, r5, r1
 800b4a2:	6965      	ldr	r5, [r4, #20]
 800b4a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	444b      	add	r3, r9
 800b4b0:	106d      	asrs	r5, r5, #1
 800b4b2:	429d      	cmp	r5, r3
 800b4b4:	bf38      	it	cc
 800b4b6:	461d      	movcc	r5, r3
 800b4b8:	0553      	lsls	r3, r2, #21
 800b4ba:	d531      	bpl.n	800b520 <__ssputs_r+0xa0>
 800b4bc:	4629      	mov	r1, r5
 800b4be:	f7ff fa37 	bl	800a930 <_malloc_r>
 800b4c2:	4606      	mov	r6, r0
 800b4c4:	b950      	cbnz	r0, 800b4dc <__ssputs_r+0x5c>
 800b4c6:	230c      	movs	r3, #12
 800b4c8:	f8ca 3000 	str.w	r3, [sl]
 800b4cc:	89a3      	ldrh	r3, [r4, #12]
 800b4ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b4d2:	81a3      	strh	r3, [r4, #12]
 800b4d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4dc:	6921      	ldr	r1, [r4, #16]
 800b4de:	464a      	mov	r2, r9
 800b4e0:	f7ff f98a 	bl	800a7f8 <memcpy>
 800b4e4:	89a3      	ldrh	r3, [r4, #12]
 800b4e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ee:	81a3      	strh	r3, [r4, #12]
 800b4f0:	6126      	str	r6, [r4, #16]
 800b4f2:	6165      	str	r5, [r4, #20]
 800b4f4:	444e      	add	r6, r9
 800b4f6:	eba5 0509 	sub.w	r5, r5, r9
 800b4fa:	6026      	str	r6, [r4, #0]
 800b4fc:	60a5      	str	r5, [r4, #8]
 800b4fe:	463e      	mov	r6, r7
 800b500:	42be      	cmp	r6, r7
 800b502:	d900      	bls.n	800b506 <__ssputs_r+0x86>
 800b504:	463e      	mov	r6, r7
 800b506:	6820      	ldr	r0, [r4, #0]
 800b508:	4632      	mov	r2, r6
 800b50a:	4641      	mov	r1, r8
 800b50c:	f7ff f982 	bl	800a814 <memmove>
 800b510:	68a3      	ldr	r3, [r4, #8]
 800b512:	1b9b      	subs	r3, r3, r6
 800b514:	60a3      	str	r3, [r4, #8]
 800b516:	6823      	ldr	r3, [r4, #0]
 800b518:	4433      	add	r3, r6
 800b51a:	6023      	str	r3, [r4, #0]
 800b51c:	2000      	movs	r0, #0
 800b51e:	e7db      	b.n	800b4d8 <__ssputs_r+0x58>
 800b520:	462a      	mov	r2, r5
 800b522:	f000 fc99 	bl	800be58 <_realloc_r>
 800b526:	4606      	mov	r6, r0
 800b528:	2800      	cmp	r0, #0
 800b52a:	d1e1      	bne.n	800b4f0 <__ssputs_r+0x70>
 800b52c:	6921      	ldr	r1, [r4, #16]
 800b52e:	4650      	mov	r0, sl
 800b530:	f7ff f992 	bl	800a858 <_free_r>
 800b534:	e7c7      	b.n	800b4c6 <__ssputs_r+0x46>
	...

0800b538 <_svfiprintf_r>:
 800b538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b53c:	4698      	mov	r8, r3
 800b53e:	898b      	ldrh	r3, [r1, #12]
 800b540:	061b      	lsls	r3, r3, #24
 800b542:	b09d      	sub	sp, #116	; 0x74
 800b544:	4607      	mov	r7, r0
 800b546:	460d      	mov	r5, r1
 800b548:	4614      	mov	r4, r2
 800b54a:	d50e      	bpl.n	800b56a <_svfiprintf_r+0x32>
 800b54c:	690b      	ldr	r3, [r1, #16]
 800b54e:	b963      	cbnz	r3, 800b56a <_svfiprintf_r+0x32>
 800b550:	2140      	movs	r1, #64	; 0x40
 800b552:	f7ff f9ed 	bl	800a930 <_malloc_r>
 800b556:	6028      	str	r0, [r5, #0]
 800b558:	6128      	str	r0, [r5, #16]
 800b55a:	b920      	cbnz	r0, 800b566 <_svfiprintf_r+0x2e>
 800b55c:	230c      	movs	r3, #12
 800b55e:	603b      	str	r3, [r7, #0]
 800b560:	f04f 30ff 	mov.w	r0, #4294967295
 800b564:	e0d1      	b.n	800b70a <_svfiprintf_r+0x1d2>
 800b566:	2340      	movs	r3, #64	; 0x40
 800b568:	616b      	str	r3, [r5, #20]
 800b56a:	2300      	movs	r3, #0
 800b56c:	9309      	str	r3, [sp, #36]	; 0x24
 800b56e:	2320      	movs	r3, #32
 800b570:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b574:	f8cd 800c 	str.w	r8, [sp, #12]
 800b578:	2330      	movs	r3, #48	; 0x30
 800b57a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b724 <_svfiprintf_r+0x1ec>
 800b57e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b582:	f04f 0901 	mov.w	r9, #1
 800b586:	4623      	mov	r3, r4
 800b588:	469a      	mov	sl, r3
 800b58a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b58e:	b10a      	cbz	r2, 800b594 <_svfiprintf_r+0x5c>
 800b590:	2a25      	cmp	r2, #37	; 0x25
 800b592:	d1f9      	bne.n	800b588 <_svfiprintf_r+0x50>
 800b594:	ebba 0b04 	subs.w	fp, sl, r4
 800b598:	d00b      	beq.n	800b5b2 <_svfiprintf_r+0x7a>
 800b59a:	465b      	mov	r3, fp
 800b59c:	4622      	mov	r2, r4
 800b59e:	4629      	mov	r1, r5
 800b5a0:	4638      	mov	r0, r7
 800b5a2:	f7ff ff6d 	bl	800b480 <__ssputs_r>
 800b5a6:	3001      	adds	r0, #1
 800b5a8:	f000 80aa 	beq.w	800b700 <_svfiprintf_r+0x1c8>
 800b5ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5ae:	445a      	add	r2, fp
 800b5b0:	9209      	str	r2, [sp, #36]	; 0x24
 800b5b2:	f89a 3000 	ldrb.w	r3, [sl]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	f000 80a2 	beq.w	800b700 <_svfiprintf_r+0x1c8>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5c6:	f10a 0a01 	add.w	sl, sl, #1
 800b5ca:	9304      	str	r3, [sp, #16]
 800b5cc:	9307      	str	r3, [sp, #28]
 800b5ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5d2:	931a      	str	r3, [sp, #104]	; 0x68
 800b5d4:	4654      	mov	r4, sl
 800b5d6:	2205      	movs	r2, #5
 800b5d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5dc:	4851      	ldr	r0, [pc, #324]	; (800b724 <_svfiprintf_r+0x1ec>)
 800b5de:	f7f4 fdff 	bl	80001e0 <memchr>
 800b5e2:	9a04      	ldr	r2, [sp, #16]
 800b5e4:	b9d8      	cbnz	r0, 800b61e <_svfiprintf_r+0xe6>
 800b5e6:	06d0      	lsls	r0, r2, #27
 800b5e8:	bf44      	itt	mi
 800b5ea:	2320      	movmi	r3, #32
 800b5ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5f0:	0711      	lsls	r1, r2, #28
 800b5f2:	bf44      	itt	mi
 800b5f4:	232b      	movmi	r3, #43	; 0x2b
 800b5f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5fa:	f89a 3000 	ldrb.w	r3, [sl]
 800b5fe:	2b2a      	cmp	r3, #42	; 0x2a
 800b600:	d015      	beq.n	800b62e <_svfiprintf_r+0xf6>
 800b602:	9a07      	ldr	r2, [sp, #28]
 800b604:	4654      	mov	r4, sl
 800b606:	2000      	movs	r0, #0
 800b608:	f04f 0c0a 	mov.w	ip, #10
 800b60c:	4621      	mov	r1, r4
 800b60e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b612:	3b30      	subs	r3, #48	; 0x30
 800b614:	2b09      	cmp	r3, #9
 800b616:	d94e      	bls.n	800b6b6 <_svfiprintf_r+0x17e>
 800b618:	b1b0      	cbz	r0, 800b648 <_svfiprintf_r+0x110>
 800b61a:	9207      	str	r2, [sp, #28]
 800b61c:	e014      	b.n	800b648 <_svfiprintf_r+0x110>
 800b61e:	eba0 0308 	sub.w	r3, r0, r8
 800b622:	fa09 f303 	lsl.w	r3, r9, r3
 800b626:	4313      	orrs	r3, r2
 800b628:	9304      	str	r3, [sp, #16]
 800b62a:	46a2      	mov	sl, r4
 800b62c:	e7d2      	b.n	800b5d4 <_svfiprintf_r+0x9c>
 800b62e:	9b03      	ldr	r3, [sp, #12]
 800b630:	1d19      	adds	r1, r3, #4
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	9103      	str	r1, [sp, #12]
 800b636:	2b00      	cmp	r3, #0
 800b638:	bfbb      	ittet	lt
 800b63a:	425b      	neglt	r3, r3
 800b63c:	f042 0202 	orrlt.w	r2, r2, #2
 800b640:	9307      	strge	r3, [sp, #28]
 800b642:	9307      	strlt	r3, [sp, #28]
 800b644:	bfb8      	it	lt
 800b646:	9204      	strlt	r2, [sp, #16]
 800b648:	7823      	ldrb	r3, [r4, #0]
 800b64a:	2b2e      	cmp	r3, #46	; 0x2e
 800b64c:	d10c      	bne.n	800b668 <_svfiprintf_r+0x130>
 800b64e:	7863      	ldrb	r3, [r4, #1]
 800b650:	2b2a      	cmp	r3, #42	; 0x2a
 800b652:	d135      	bne.n	800b6c0 <_svfiprintf_r+0x188>
 800b654:	9b03      	ldr	r3, [sp, #12]
 800b656:	1d1a      	adds	r2, r3, #4
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	9203      	str	r2, [sp, #12]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	bfb8      	it	lt
 800b660:	f04f 33ff 	movlt.w	r3, #4294967295
 800b664:	3402      	adds	r4, #2
 800b666:	9305      	str	r3, [sp, #20]
 800b668:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b734 <_svfiprintf_r+0x1fc>
 800b66c:	7821      	ldrb	r1, [r4, #0]
 800b66e:	2203      	movs	r2, #3
 800b670:	4650      	mov	r0, sl
 800b672:	f7f4 fdb5 	bl	80001e0 <memchr>
 800b676:	b140      	cbz	r0, 800b68a <_svfiprintf_r+0x152>
 800b678:	2340      	movs	r3, #64	; 0x40
 800b67a:	eba0 000a 	sub.w	r0, r0, sl
 800b67e:	fa03 f000 	lsl.w	r0, r3, r0
 800b682:	9b04      	ldr	r3, [sp, #16]
 800b684:	4303      	orrs	r3, r0
 800b686:	3401      	adds	r4, #1
 800b688:	9304      	str	r3, [sp, #16]
 800b68a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b68e:	4826      	ldr	r0, [pc, #152]	; (800b728 <_svfiprintf_r+0x1f0>)
 800b690:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b694:	2206      	movs	r2, #6
 800b696:	f7f4 fda3 	bl	80001e0 <memchr>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	d038      	beq.n	800b710 <_svfiprintf_r+0x1d8>
 800b69e:	4b23      	ldr	r3, [pc, #140]	; (800b72c <_svfiprintf_r+0x1f4>)
 800b6a0:	bb1b      	cbnz	r3, 800b6ea <_svfiprintf_r+0x1b2>
 800b6a2:	9b03      	ldr	r3, [sp, #12]
 800b6a4:	3307      	adds	r3, #7
 800b6a6:	f023 0307 	bic.w	r3, r3, #7
 800b6aa:	3308      	adds	r3, #8
 800b6ac:	9303      	str	r3, [sp, #12]
 800b6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b0:	4433      	add	r3, r6
 800b6b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b6b4:	e767      	b.n	800b586 <_svfiprintf_r+0x4e>
 800b6b6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6ba:	460c      	mov	r4, r1
 800b6bc:	2001      	movs	r0, #1
 800b6be:	e7a5      	b.n	800b60c <_svfiprintf_r+0xd4>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	3401      	adds	r4, #1
 800b6c4:	9305      	str	r3, [sp, #20]
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	f04f 0c0a 	mov.w	ip, #10
 800b6cc:	4620      	mov	r0, r4
 800b6ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6d2:	3a30      	subs	r2, #48	; 0x30
 800b6d4:	2a09      	cmp	r2, #9
 800b6d6:	d903      	bls.n	800b6e0 <_svfiprintf_r+0x1a8>
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d0c5      	beq.n	800b668 <_svfiprintf_r+0x130>
 800b6dc:	9105      	str	r1, [sp, #20]
 800b6de:	e7c3      	b.n	800b668 <_svfiprintf_r+0x130>
 800b6e0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e7f0      	b.n	800b6cc <_svfiprintf_r+0x194>
 800b6ea:	ab03      	add	r3, sp, #12
 800b6ec:	9300      	str	r3, [sp, #0]
 800b6ee:	462a      	mov	r2, r5
 800b6f0:	4b0f      	ldr	r3, [pc, #60]	; (800b730 <_svfiprintf_r+0x1f8>)
 800b6f2:	a904      	add	r1, sp, #16
 800b6f4:	4638      	mov	r0, r7
 800b6f6:	f3af 8000 	nop.w
 800b6fa:	1c42      	adds	r2, r0, #1
 800b6fc:	4606      	mov	r6, r0
 800b6fe:	d1d6      	bne.n	800b6ae <_svfiprintf_r+0x176>
 800b700:	89ab      	ldrh	r3, [r5, #12]
 800b702:	065b      	lsls	r3, r3, #25
 800b704:	f53f af2c 	bmi.w	800b560 <_svfiprintf_r+0x28>
 800b708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b70a:	b01d      	add	sp, #116	; 0x74
 800b70c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b710:	ab03      	add	r3, sp, #12
 800b712:	9300      	str	r3, [sp, #0]
 800b714:	462a      	mov	r2, r5
 800b716:	4b06      	ldr	r3, [pc, #24]	; (800b730 <_svfiprintf_r+0x1f8>)
 800b718:	a904      	add	r1, sp, #16
 800b71a:	4638      	mov	r0, r7
 800b71c:	f000 f9d4 	bl	800bac8 <_printf_i>
 800b720:	e7eb      	b.n	800b6fa <_svfiprintf_r+0x1c2>
 800b722:	bf00      	nop
 800b724:	0800d6e4 	.word	0x0800d6e4
 800b728:	0800d6ee 	.word	0x0800d6ee
 800b72c:	00000000 	.word	0x00000000
 800b730:	0800b481 	.word	0x0800b481
 800b734:	0800d6ea 	.word	0x0800d6ea

0800b738 <__sfputc_r>:
 800b738:	6893      	ldr	r3, [r2, #8]
 800b73a:	3b01      	subs	r3, #1
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	b410      	push	{r4}
 800b740:	6093      	str	r3, [r2, #8]
 800b742:	da08      	bge.n	800b756 <__sfputc_r+0x1e>
 800b744:	6994      	ldr	r4, [r2, #24]
 800b746:	42a3      	cmp	r3, r4
 800b748:	db01      	blt.n	800b74e <__sfputc_r+0x16>
 800b74a:	290a      	cmp	r1, #10
 800b74c:	d103      	bne.n	800b756 <__sfputc_r+0x1e>
 800b74e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b752:	f7ff bb79 	b.w	800ae48 <__swbuf_r>
 800b756:	6813      	ldr	r3, [r2, #0]
 800b758:	1c58      	adds	r0, r3, #1
 800b75a:	6010      	str	r0, [r2, #0]
 800b75c:	7019      	strb	r1, [r3, #0]
 800b75e:	4608      	mov	r0, r1
 800b760:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b764:	4770      	bx	lr

0800b766 <__sfputs_r>:
 800b766:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b768:	4606      	mov	r6, r0
 800b76a:	460f      	mov	r7, r1
 800b76c:	4614      	mov	r4, r2
 800b76e:	18d5      	adds	r5, r2, r3
 800b770:	42ac      	cmp	r4, r5
 800b772:	d101      	bne.n	800b778 <__sfputs_r+0x12>
 800b774:	2000      	movs	r0, #0
 800b776:	e007      	b.n	800b788 <__sfputs_r+0x22>
 800b778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b77c:	463a      	mov	r2, r7
 800b77e:	4630      	mov	r0, r6
 800b780:	f7ff ffda 	bl	800b738 <__sfputc_r>
 800b784:	1c43      	adds	r3, r0, #1
 800b786:	d1f3      	bne.n	800b770 <__sfputs_r+0xa>
 800b788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b78c <_vfiprintf_r>:
 800b78c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b790:	460d      	mov	r5, r1
 800b792:	b09d      	sub	sp, #116	; 0x74
 800b794:	4614      	mov	r4, r2
 800b796:	4698      	mov	r8, r3
 800b798:	4606      	mov	r6, r0
 800b79a:	b118      	cbz	r0, 800b7a4 <_vfiprintf_r+0x18>
 800b79c:	6983      	ldr	r3, [r0, #24]
 800b79e:	b90b      	cbnz	r3, 800b7a4 <_vfiprintf_r+0x18>
 800b7a0:	f7ff fd4a 	bl	800b238 <__sinit>
 800b7a4:	4b89      	ldr	r3, [pc, #548]	; (800b9cc <_vfiprintf_r+0x240>)
 800b7a6:	429d      	cmp	r5, r3
 800b7a8:	d11b      	bne.n	800b7e2 <_vfiprintf_r+0x56>
 800b7aa:	6875      	ldr	r5, [r6, #4]
 800b7ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7ae:	07d9      	lsls	r1, r3, #31
 800b7b0:	d405      	bmi.n	800b7be <_vfiprintf_r+0x32>
 800b7b2:	89ab      	ldrh	r3, [r5, #12]
 800b7b4:	059a      	lsls	r2, r3, #22
 800b7b6:	d402      	bmi.n	800b7be <_vfiprintf_r+0x32>
 800b7b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7ba:	f7ff fded 	bl	800b398 <__retarget_lock_acquire_recursive>
 800b7be:	89ab      	ldrh	r3, [r5, #12]
 800b7c0:	071b      	lsls	r3, r3, #28
 800b7c2:	d501      	bpl.n	800b7c8 <_vfiprintf_r+0x3c>
 800b7c4:	692b      	ldr	r3, [r5, #16]
 800b7c6:	b9eb      	cbnz	r3, 800b804 <_vfiprintf_r+0x78>
 800b7c8:	4629      	mov	r1, r5
 800b7ca:	4630      	mov	r0, r6
 800b7cc:	f7ff fb8e 	bl	800aeec <__swsetup_r>
 800b7d0:	b1c0      	cbz	r0, 800b804 <_vfiprintf_r+0x78>
 800b7d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7d4:	07dc      	lsls	r4, r3, #31
 800b7d6:	d50e      	bpl.n	800b7f6 <_vfiprintf_r+0x6a>
 800b7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b7dc:	b01d      	add	sp, #116	; 0x74
 800b7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7e2:	4b7b      	ldr	r3, [pc, #492]	; (800b9d0 <_vfiprintf_r+0x244>)
 800b7e4:	429d      	cmp	r5, r3
 800b7e6:	d101      	bne.n	800b7ec <_vfiprintf_r+0x60>
 800b7e8:	68b5      	ldr	r5, [r6, #8]
 800b7ea:	e7df      	b.n	800b7ac <_vfiprintf_r+0x20>
 800b7ec:	4b79      	ldr	r3, [pc, #484]	; (800b9d4 <_vfiprintf_r+0x248>)
 800b7ee:	429d      	cmp	r5, r3
 800b7f0:	bf08      	it	eq
 800b7f2:	68f5      	ldreq	r5, [r6, #12]
 800b7f4:	e7da      	b.n	800b7ac <_vfiprintf_r+0x20>
 800b7f6:	89ab      	ldrh	r3, [r5, #12]
 800b7f8:	0598      	lsls	r0, r3, #22
 800b7fa:	d4ed      	bmi.n	800b7d8 <_vfiprintf_r+0x4c>
 800b7fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7fe:	f7ff fdcc 	bl	800b39a <__retarget_lock_release_recursive>
 800b802:	e7e9      	b.n	800b7d8 <_vfiprintf_r+0x4c>
 800b804:	2300      	movs	r3, #0
 800b806:	9309      	str	r3, [sp, #36]	; 0x24
 800b808:	2320      	movs	r3, #32
 800b80a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b80e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b812:	2330      	movs	r3, #48	; 0x30
 800b814:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b9d8 <_vfiprintf_r+0x24c>
 800b818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b81c:	f04f 0901 	mov.w	r9, #1
 800b820:	4623      	mov	r3, r4
 800b822:	469a      	mov	sl, r3
 800b824:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b828:	b10a      	cbz	r2, 800b82e <_vfiprintf_r+0xa2>
 800b82a:	2a25      	cmp	r2, #37	; 0x25
 800b82c:	d1f9      	bne.n	800b822 <_vfiprintf_r+0x96>
 800b82e:	ebba 0b04 	subs.w	fp, sl, r4
 800b832:	d00b      	beq.n	800b84c <_vfiprintf_r+0xc0>
 800b834:	465b      	mov	r3, fp
 800b836:	4622      	mov	r2, r4
 800b838:	4629      	mov	r1, r5
 800b83a:	4630      	mov	r0, r6
 800b83c:	f7ff ff93 	bl	800b766 <__sfputs_r>
 800b840:	3001      	adds	r0, #1
 800b842:	f000 80aa 	beq.w	800b99a <_vfiprintf_r+0x20e>
 800b846:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b848:	445a      	add	r2, fp
 800b84a:	9209      	str	r2, [sp, #36]	; 0x24
 800b84c:	f89a 3000 	ldrb.w	r3, [sl]
 800b850:	2b00      	cmp	r3, #0
 800b852:	f000 80a2 	beq.w	800b99a <_vfiprintf_r+0x20e>
 800b856:	2300      	movs	r3, #0
 800b858:	f04f 32ff 	mov.w	r2, #4294967295
 800b85c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b860:	f10a 0a01 	add.w	sl, sl, #1
 800b864:	9304      	str	r3, [sp, #16]
 800b866:	9307      	str	r3, [sp, #28]
 800b868:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b86c:	931a      	str	r3, [sp, #104]	; 0x68
 800b86e:	4654      	mov	r4, sl
 800b870:	2205      	movs	r2, #5
 800b872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b876:	4858      	ldr	r0, [pc, #352]	; (800b9d8 <_vfiprintf_r+0x24c>)
 800b878:	f7f4 fcb2 	bl	80001e0 <memchr>
 800b87c:	9a04      	ldr	r2, [sp, #16]
 800b87e:	b9d8      	cbnz	r0, 800b8b8 <_vfiprintf_r+0x12c>
 800b880:	06d1      	lsls	r1, r2, #27
 800b882:	bf44      	itt	mi
 800b884:	2320      	movmi	r3, #32
 800b886:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b88a:	0713      	lsls	r3, r2, #28
 800b88c:	bf44      	itt	mi
 800b88e:	232b      	movmi	r3, #43	; 0x2b
 800b890:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b894:	f89a 3000 	ldrb.w	r3, [sl]
 800b898:	2b2a      	cmp	r3, #42	; 0x2a
 800b89a:	d015      	beq.n	800b8c8 <_vfiprintf_r+0x13c>
 800b89c:	9a07      	ldr	r2, [sp, #28]
 800b89e:	4654      	mov	r4, sl
 800b8a0:	2000      	movs	r0, #0
 800b8a2:	f04f 0c0a 	mov.w	ip, #10
 800b8a6:	4621      	mov	r1, r4
 800b8a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8ac:	3b30      	subs	r3, #48	; 0x30
 800b8ae:	2b09      	cmp	r3, #9
 800b8b0:	d94e      	bls.n	800b950 <_vfiprintf_r+0x1c4>
 800b8b2:	b1b0      	cbz	r0, 800b8e2 <_vfiprintf_r+0x156>
 800b8b4:	9207      	str	r2, [sp, #28]
 800b8b6:	e014      	b.n	800b8e2 <_vfiprintf_r+0x156>
 800b8b8:	eba0 0308 	sub.w	r3, r0, r8
 800b8bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	9304      	str	r3, [sp, #16]
 800b8c4:	46a2      	mov	sl, r4
 800b8c6:	e7d2      	b.n	800b86e <_vfiprintf_r+0xe2>
 800b8c8:	9b03      	ldr	r3, [sp, #12]
 800b8ca:	1d19      	adds	r1, r3, #4
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	9103      	str	r1, [sp, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	bfbb      	ittet	lt
 800b8d4:	425b      	neglt	r3, r3
 800b8d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b8da:	9307      	strge	r3, [sp, #28]
 800b8dc:	9307      	strlt	r3, [sp, #28]
 800b8de:	bfb8      	it	lt
 800b8e0:	9204      	strlt	r2, [sp, #16]
 800b8e2:	7823      	ldrb	r3, [r4, #0]
 800b8e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b8e6:	d10c      	bne.n	800b902 <_vfiprintf_r+0x176>
 800b8e8:	7863      	ldrb	r3, [r4, #1]
 800b8ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ec:	d135      	bne.n	800b95a <_vfiprintf_r+0x1ce>
 800b8ee:	9b03      	ldr	r3, [sp, #12]
 800b8f0:	1d1a      	adds	r2, r3, #4
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	9203      	str	r2, [sp, #12]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	bfb8      	it	lt
 800b8fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b8fe:	3402      	adds	r4, #2
 800b900:	9305      	str	r3, [sp, #20]
 800b902:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b9e8 <_vfiprintf_r+0x25c>
 800b906:	7821      	ldrb	r1, [r4, #0]
 800b908:	2203      	movs	r2, #3
 800b90a:	4650      	mov	r0, sl
 800b90c:	f7f4 fc68 	bl	80001e0 <memchr>
 800b910:	b140      	cbz	r0, 800b924 <_vfiprintf_r+0x198>
 800b912:	2340      	movs	r3, #64	; 0x40
 800b914:	eba0 000a 	sub.w	r0, r0, sl
 800b918:	fa03 f000 	lsl.w	r0, r3, r0
 800b91c:	9b04      	ldr	r3, [sp, #16]
 800b91e:	4303      	orrs	r3, r0
 800b920:	3401      	adds	r4, #1
 800b922:	9304      	str	r3, [sp, #16]
 800b924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b928:	482c      	ldr	r0, [pc, #176]	; (800b9dc <_vfiprintf_r+0x250>)
 800b92a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b92e:	2206      	movs	r2, #6
 800b930:	f7f4 fc56 	bl	80001e0 <memchr>
 800b934:	2800      	cmp	r0, #0
 800b936:	d03f      	beq.n	800b9b8 <_vfiprintf_r+0x22c>
 800b938:	4b29      	ldr	r3, [pc, #164]	; (800b9e0 <_vfiprintf_r+0x254>)
 800b93a:	bb1b      	cbnz	r3, 800b984 <_vfiprintf_r+0x1f8>
 800b93c:	9b03      	ldr	r3, [sp, #12]
 800b93e:	3307      	adds	r3, #7
 800b940:	f023 0307 	bic.w	r3, r3, #7
 800b944:	3308      	adds	r3, #8
 800b946:	9303      	str	r3, [sp, #12]
 800b948:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b94a:	443b      	add	r3, r7
 800b94c:	9309      	str	r3, [sp, #36]	; 0x24
 800b94e:	e767      	b.n	800b820 <_vfiprintf_r+0x94>
 800b950:	fb0c 3202 	mla	r2, ip, r2, r3
 800b954:	460c      	mov	r4, r1
 800b956:	2001      	movs	r0, #1
 800b958:	e7a5      	b.n	800b8a6 <_vfiprintf_r+0x11a>
 800b95a:	2300      	movs	r3, #0
 800b95c:	3401      	adds	r4, #1
 800b95e:	9305      	str	r3, [sp, #20]
 800b960:	4619      	mov	r1, r3
 800b962:	f04f 0c0a 	mov.w	ip, #10
 800b966:	4620      	mov	r0, r4
 800b968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b96c:	3a30      	subs	r2, #48	; 0x30
 800b96e:	2a09      	cmp	r2, #9
 800b970:	d903      	bls.n	800b97a <_vfiprintf_r+0x1ee>
 800b972:	2b00      	cmp	r3, #0
 800b974:	d0c5      	beq.n	800b902 <_vfiprintf_r+0x176>
 800b976:	9105      	str	r1, [sp, #20]
 800b978:	e7c3      	b.n	800b902 <_vfiprintf_r+0x176>
 800b97a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b97e:	4604      	mov	r4, r0
 800b980:	2301      	movs	r3, #1
 800b982:	e7f0      	b.n	800b966 <_vfiprintf_r+0x1da>
 800b984:	ab03      	add	r3, sp, #12
 800b986:	9300      	str	r3, [sp, #0]
 800b988:	462a      	mov	r2, r5
 800b98a:	4b16      	ldr	r3, [pc, #88]	; (800b9e4 <_vfiprintf_r+0x258>)
 800b98c:	a904      	add	r1, sp, #16
 800b98e:	4630      	mov	r0, r6
 800b990:	f3af 8000 	nop.w
 800b994:	4607      	mov	r7, r0
 800b996:	1c78      	adds	r0, r7, #1
 800b998:	d1d6      	bne.n	800b948 <_vfiprintf_r+0x1bc>
 800b99a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b99c:	07d9      	lsls	r1, r3, #31
 800b99e:	d405      	bmi.n	800b9ac <_vfiprintf_r+0x220>
 800b9a0:	89ab      	ldrh	r3, [r5, #12]
 800b9a2:	059a      	lsls	r2, r3, #22
 800b9a4:	d402      	bmi.n	800b9ac <_vfiprintf_r+0x220>
 800b9a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b9a8:	f7ff fcf7 	bl	800b39a <__retarget_lock_release_recursive>
 800b9ac:	89ab      	ldrh	r3, [r5, #12]
 800b9ae:	065b      	lsls	r3, r3, #25
 800b9b0:	f53f af12 	bmi.w	800b7d8 <_vfiprintf_r+0x4c>
 800b9b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9b6:	e711      	b.n	800b7dc <_vfiprintf_r+0x50>
 800b9b8:	ab03      	add	r3, sp, #12
 800b9ba:	9300      	str	r3, [sp, #0]
 800b9bc:	462a      	mov	r2, r5
 800b9be:	4b09      	ldr	r3, [pc, #36]	; (800b9e4 <_vfiprintf_r+0x258>)
 800b9c0:	a904      	add	r1, sp, #16
 800b9c2:	4630      	mov	r0, r6
 800b9c4:	f000 f880 	bl	800bac8 <_printf_i>
 800b9c8:	e7e4      	b.n	800b994 <_vfiprintf_r+0x208>
 800b9ca:	bf00      	nop
 800b9cc:	0800d6a4 	.word	0x0800d6a4
 800b9d0:	0800d6c4 	.word	0x0800d6c4
 800b9d4:	0800d684 	.word	0x0800d684
 800b9d8:	0800d6e4 	.word	0x0800d6e4
 800b9dc:	0800d6ee 	.word	0x0800d6ee
 800b9e0:	00000000 	.word	0x00000000
 800b9e4:	0800b767 	.word	0x0800b767
 800b9e8:	0800d6ea 	.word	0x0800d6ea

0800b9ec <_printf_common>:
 800b9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9f0:	4616      	mov	r6, r2
 800b9f2:	4699      	mov	r9, r3
 800b9f4:	688a      	ldr	r2, [r1, #8]
 800b9f6:	690b      	ldr	r3, [r1, #16]
 800b9f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	bfb8      	it	lt
 800ba00:	4613      	movlt	r3, r2
 800ba02:	6033      	str	r3, [r6, #0]
 800ba04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba08:	4607      	mov	r7, r0
 800ba0a:	460c      	mov	r4, r1
 800ba0c:	b10a      	cbz	r2, 800ba12 <_printf_common+0x26>
 800ba0e:	3301      	adds	r3, #1
 800ba10:	6033      	str	r3, [r6, #0]
 800ba12:	6823      	ldr	r3, [r4, #0]
 800ba14:	0699      	lsls	r1, r3, #26
 800ba16:	bf42      	ittt	mi
 800ba18:	6833      	ldrmi	r3, [r6, #0]
 800ba1a:	3302      	addmi	r3, #2
 800ba1c:	6033      	strmi	r3, [r6, #0]
 800ba1e:	6825      	ldr	r5, [r4, #0]
 800ba20:	f015 0506 	ands.w	r5, r5, #6
 800ba24:	d106      	bne.n	800ba34 <_printf_common+0x48>
 800ba26:	f104 0a19 	add.w	sl, r4, #25
 800ba2a:	68e3      	ldr	r3, [r4, #12]
 800ba2c:	6832      	ldr	r2, [r6, #0]
 800ba2e:	1a9b      	subs	r3, r3, r2
 800ba30:	42ab      	cmp	r3, r5
 800ba32:	dc26      	bgt.n	800ba82 <_printf_common+0x96>
 800ba34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba38:	1e13      	subs	r3, r2, #0
 800ba3a:	6822      	ldr	r2, [r4, #0]
 800ba3c:	bf18      	it	ne
 800ba3e:	2301      	movne	r3, #1
 800ba40:	0692      	lsls	r2, r2, #26
 800ba42:	d42b      	bmi.n	800ba9c <_printf_common+0xb0>
 800ba44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba48:	4649      	mov	r1, r9
 800ba4a:	4638      	mov	r0, r7
 800ba4c:	47c0      	blx	r8
 800ba4e:	3001      	adds	r0, #1
 800ba50:	d01e      	beq.n	800ba90 <_printf_common+0xa4>
 800ba52:	6823      	ldr	r3, [r4, #0]
 800ba54:	68e5      	ldr	r5, [r4, #12]
 800ba56:	6832      	ldr	r2, [r6, #0]
 800ba58:	f003 0306 	and.w	r3, r3, #6
 800ba5c:	2b04      	cmp	r3, #4
 800ba5e:	bf08      	it	eq
 800ba60:	1aad      	subeq	r5, r5, r2
 800ba62:	68a3      	ldr	r3, [r4, #8]
 800ba64:	6922      	ldr	r2, [r4, #16]
 800ba66:	bf0c      	ite	eq
 800ba68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba6c:	2500      	movne	r5, #0
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	bfc4      	itt	gt
 800ba72:	1a9b      	subgt	r3, r3, r2
 800ba74:	18ed      	addgt	r5, r5, r3
 800ba76:	2600      	movs	r6, #0
 800ba78:	341a      	adds	r4, #26
 800ba7a:	42b5      	cmp	r5, r6
 800ba7c:	d11a      	bne.n	800bab4 <_printf_common+0xc8>
 800ba7e:	2000      	movs	r0, #0
 800ba80:	e008      	b.n	800ba94 <_printf_common+0xa8>
 800ba82:	2301      	movs	r3, #1
 800ba84:	4652      	mov	r2, sl
 800ba86:	4649      	mov	r1, r9
 800ba88:	4638      	mov	r0, r7
 800ba8a:	47c0      	blx	r8
 800ba8c:	3001      	adds	r0, #1
 800ba8e:	d103      	bne.n	800ba98 <_printf_common+0xac>
 800ba90:	f04f 30ff 	mov.w	r0, #4294967295
 800ba94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba98:	3501      	adds	r5, #1
 800ba9a:	e7c6      	b.n	800ba2a <_printf_common+0x3e>
 800ba9c:	18e1      	adds	r1, r4, r3
 800ba9e:	1c5a      	adds	r2, r3, #1
 800baa0:	2030      	movs	r0, #48	; 0x30
 800baa2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800baa6:	4422      	add	r2, r4
 800baa8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800baac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bab0:	3302      	adds	r3, #2
 800bab2:	e7c7      	b.n	800ba44 <_printf_common+0x58>
 800bab4:	2301      	movs	r3, #1
 800bab6:	4622      	mov	r2, r4
 800bab8:	4649      	mov	r1, r9
 800baba:	4638      	mov	r0, r7
 800babc:	47c0      	blx	r8
 800babe:	3001      	adds	r0, #1
 800bac0:	d0e6      	beq.n	800ba90 <_printf_common+0xa4>
 800bac2:	3601      	adds	r6, #1
 800bac4:	e7d9      	b.n	800ba7a <_printf_common+0x8e>
	...

0800bac8 <_printf_i>:
 800bac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bacc:	7e0f      	ldrb	r7, [r1, #24]
 800bace:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bad0:	2f78      	cmp	r7, #120	; 0x78
 800bad2:	4691      	mov	r9, r2
 800bad4:	4680      	mov	r8, r0
 800bad6:	460c      	mov	r4, r1
 800bad8:	469a      	mov	sl, r3
 800bada:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bade:	d807      	bhi.n	800baf0 <_printf_i+0x28>
 800bae0:	2f62      	cmp	r7, #98	; 0x62
 800bae2:	d80a      	bhi.n	800bafa <_printf_i+0x32>
 800bae4:	2f00      	cmp	r7, #0
 800bae6:	f000 80d8 	beq.w	800bc9a <_printf_i+0x1d2>
 800baea:	2f58      	cmp	r7, #88	; 0x58
 800baec:	f000 80a3 	beq.w	800bc36 <_printf_i+0x16e>
 800baf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800baf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800baf8:	e03a      	b.n	800bb70 <_printf_i+0xa8>
 800bafa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bafe:	2b15      	cmp	r3, #21
 800bb00:	d8f6      	bhi.n	800baf0 <_printf_i+0x28>
 800bb02:	a101      	add	r1, pc, #4	; (adr r1, 800bb08 <_printf_i+0x40>)
 800bb04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb08:	0800bb61 	.word	0x0800bb61
 800bb0c:	0800bb75 	.word	0x0800bb75
 800bb10:	0800baf1 	.word	0x0800baf1
 800bb14:	0800baf1 	.word	0x0800baf1
 800bb18:	0800baf1 	.word	0x0800baf1
 800bb1c:	0800baf1 	.word	0x0800baf1
 800bb20:	0800bb75 	.word	0x0800bb75
 800bb24:	0800baf1 	.word	0x0800baf1
 800bb28:	0800baf1 	.word	0x0800baf1
 800bb2c:	0800baf1 	.word	0x0800baf1
 800bb30:	0800baf1 	.word	0x0800baf1
 800bb34:	0800bc81 	.word	0x0800bc81
 800bb38:	0800bba5 	.word	0x0800bba5
 800bb3c:	0800bc63 	.word	0x0800bc63
 800bb40:	0800baf1 	.word	0x0800baf1
 800bb44:	0800baf1 	.word	0x0800baf1
 800bb48:	0800bca3 	.word	0x0800bca3
 800bb4c:	0800baf1 	.word	0x0800baf1
 800bb50:	0800bba5 	.word	0x0800bba5
 800bb54:	0800baf1 	.word	0x0800baf1
 800bb58:	0800baf1 	.word	0x0800baf1
 800bb5c:	0800bc6b 	.word	0x0800bc6b
 800bb60:	682b      	ldr	r3, [r5, #0]
 800bb62:	1d1a      	adds	r2, r3, #4
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	602a      	str	r2, [r5, #0]
 800bb68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb70:	2301      	movs	r3, #1
 800bb72:	e0a3      	b.n	800bcbc <_printf_i+0x1f4>
 800bb74:	6820      	ldr	r0, [r4, #0]
 800bb76:	6829      	ldr	r1, [r5, #0]
 800bb78:	0606      	lsls	r6, r0, #24
 800bb7a:	f101 0304 	add.w	r3, r1, #4
 800bb7e:	d50a      	bpl.n	800bb96 <_printf_i+0xce>
 800bb80:	680e      	ldr	r6, [r1, #0]
 800bb82:	602b      	str	r3, [r5, #0]
 800bb84:	2e00      	cmp	r6, #0
 800bb86:	da03      	bge.n	800bb90 <_printf_i+0xc8>
 800bb88:	232d      	movs	r3, #45	; 0x2d
 800bb8a:	4276      	negs	r6, r6
 800bb8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb90:	485e      	ldr	r0, [pc, #376]	; (800bd0c <_printf_i+0x244>)
 800bb92:	230a      	movs	r3, #10
 800bb94:	e019      	b.n	800bbca <_printf_i+0x102>
 800bb96:	680e      	ldr	r6, [r1, #0]
 800bb98:	602b      	str	r3, [r5, #0]
 800bb9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bb9e:	bf18      	it	ne
 800bba0:	b236      	sxthne	r6, r6
 800bba2:	e7ef      	b.n	800bb84 <_printf_i+0xbc>
 800bba4:	682b      	ldr	r3, [r5, #0]
 800bba6:	6820      	ldr	r0, [r4, #0]
 800bba8:	1d19      	adds	r1, r3, #4
 800bbaa:	6029      	str	r1, [r5, #0]
 800bbac:	0601      	lsls	r1, r0, #24
 800bbae:	d501      	bpl.n	800bbb4 <_printf_i+0xec>
 800bbb0:	681e      	ldr	r6, [r3, #0]
 800bbb2:	e002      	b.n	800bbba <_printf_i+0xf2>
 800bbb4:	0646      	lsls	r6, r0, #25
 800bbb6:	d5fb      	bpl.n	800bbb0 <_printf_i+0xe8>
 800bbb8:	881e      	ldrh	r6, [r3, #0]
 800bbba:	4854      	ldr	r0, [pc, #336]	; (800bd0c <_printf_i+0x244>)
 800bbbc:	2f6f      	cmp	r7, #111	; 0x6f
 800bbbe:	bf0c      	ite	eq
 800bbc0:	2308      	moveq	r3, #8
 800bbc2:	230a      	movne	r3, #10
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbca:	6865      	ldr	r5, [r4, #4]
 800bbcc:	60a5      	str	r5, [r4, #8]
 800bbce:	2d00      	cmp	r5, #0
 800bbd0:	bfa2      	ittt	ge
 800bbd2:	6821      	ldrge	r1, [r4, #0]
 800bbd4:	f021 0104 	bicge.w	r1, r1, #4
 800bbd8:	6021      	strge	r1, [r4, #0]
 800bbda:	b90e      	cbnz	r6, 800bbe0 <_printf_i+0x118>
 800bbdc:	2d00      	cmp	r5, #0
 800bbde:	d04d      	beq.n	800bc7c <_printf_i+0x1b4>
 800bbe0:	4615      	mov	r5, r2
 800bbe2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bbe6:	fb03 6711 	mls	r7, r3, r1, r6
 800bbea:	5dc7      	ldrb	r7, [r0, r7]
 800bbec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bbf0:	4637      	mov	r7, r6
 800bbf2:	42bb      	cmp	r3, r7
 800bbf4:	460e      	mov	r6, r1
 800bbf6:	d9f4      	bls.n	800bbe2 <_printf_i+0x11a>
 800bbf8:	2b08      	cmp	r3, #8
 800bbfa:	d10b      	bne.n	800bc14 <_printf_i+0x14c>
 800bbfc:	6823      	ldr	r3, [r4, #0]
 800bbfe:	07de      	lsls	r6, r3, #31
 800bc00:	d508      	bpl.n	800bc14 <_printf_i+0x14c>
 800bc02:	6923      	ldr	r3, [r4, #16]
 800bc04:	6861      	ldr	r1, [r4, #4]
 800bc06:	4299      	cmp	r1, r3
 800bc08:	bfde      	ittt	le
 800bc0a:	2330      	movle	r3, #48	; 0x30
 800bc0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc14:	1b52      	subs	r2, r2, r5
 800bc16:	6122      	str	r2, [r4, #16]
 800bc18:	f8cd a000 	str.w	sl, [sp]
 800bc1c:	464b      	mov	r3, r9
 800bc1e:	aa03      	add	r2, sp, #12
 800bc20:	4621      	mov	r1, r4
 800bc22:	4640      	mov	r0, r8
 800bc24:	f7ff fee2 	bl	800b9ec <_printf_common>
 800bc28:	3001      	adds	r0, #1
 800bc2a:	d14c      	bne.n	800bcc6 <_printf_i+0x1fe>
 800bc2c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc30:	b004      	add	sp, #16
 800bc32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc36:	4835      	ldr	r0, [pc, #212]	; (800bd0c <_printf_i+0x244>)
 800bc38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bc3c:	6829      	ldr	r1, [r5, #0]
 800bc3e:	6823      	ldr	r3, [r4, #0]
 800bc40:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc44:	6029      	str	r1, [r5, #0]
 800bc46:	061d      	lsls	r5, r3, #24
 800bc48:	d514      	bpl.n	800bc74 <_printf_i+0x1ac>
 800bc4a:	07df      	lsls	r7, r3, #31
 800bc4c:	bf44      	itt	mi
 800bc4e:	f043 0320 	orrmi.w	r3, r3, #32
 800bc52:	6023      	strmi	r3, [r4, #0]
 800bc54:	b91e      	cbnz	r6, 800bc5e <_printf_i+0x196>
 800bc56:	6823      	ldr	r3, [r4, #0]
 800bc58:	f023 0320 	bic.w	r3, r3, #32
 800bc5c:	6023      	str	r3, [r4, #0]
 800bc5e:	2310      	movs	r3, #16
 800bc60:	e7b0      	b.n	800bbc4 <_printf_i+0xfc>
 800bc62:	6823      	ldr	r3, [r4, #0]
 800bc64:	f043 0320 	orr.w	r3, r3, #32
 800bc68:	6023      	str	r3, [r4, #0]
 800bc6a:	2378      	movs	r3, #120	; 0x78
 800bc6c:	4828      	ldr	r0, [pc, #160]	; (800bd10 <_printf_i+0x248>)
 800bc6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc72:	e7e3      	b.n	800bc3c <_printf_i+0x174>
 800bc74:	0659      	lsls	r1, r3, #25
 800bc76:	bf48      	it	mi
 800bc78:	b2b6      	uxthmi	r6, r6
 800bc7a:	e7e6      	b.n	800bc4a <_printf_i+0x182>
 800bc7c:	4615      	mov	r5, r2
 800bc7e:	e7bb      	b.n	800bbf8 <_printf_i+0x130>
 800bc80:	682b      	ldr	r3, [r5, #0]
 800bc82:	6826      	ldr	r6, [r4, #0]
 800bc84:	6961      	ldr	r1, [r4, #20]
 800bc86:	1d18      	adds	r0, r3, #4
 800bc88:	6028      	str	r0, [r5, #0]
 800bc8a:	0635      	lsls	r5, r6, #24
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	d501      	bpl.n	800bc94 <_printf_i+0x1cc>
 800bc90:	6019      	str	r1, [r3, #0]
 800bc92:	e002      	b.n	800bc9a <_printf_i+0x1d2>
 800bc94:	0670      	lsls	r0, r6, #25
 800bc96:	d5fb      	bpl.n	800bc90 <_printf_i+0x1c8>
 800bc98:	8019      	strh	r1, [r3, #0]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	6123      	str	r3, [r4, #16]
 800bc9e:	4615      	mov	r5, r2
 800bca0:	e7ba      	b.n	800bc18 <_printf_i+0x150>
 800bca2:	682b      	ldr	r3, [r5, #0]
 800bca4:	1d1a      	adds	r2, r3, #4
 800bca6:	602a      	str	r2, [r5, #0]
 800bca8:	681d      	ldr	r5, [r3, #0]
 800bcaa:	6862      	ldr	r2, [r4, #4]
 800bcac:	2100      	movs	r1, #0
 800bcae:	4628      	mov	r0, r5
 800bcb0:	f7f4 fa96 	bl	80001e0 <memchr>
 800bcb4:	b108      	cbz	r0, 800bcba <_printf_i+0x1f2>
 800bcb6:	1b40      	subs	r0, r0, r5
 800bcb8:	6060      	str	r0, [r4, #4]
 800bcba:	6863      	ldr	r3, [r4, #4]
 800bcbc:	6123      	str	r3, [r4, #16]
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcc4:	e7a8      	b.n	800bc18 <_printf_i+0x150>
 800bcc6:	6923      	ldr	r3, [r4, #16]
 800bcc8:	462a      	mov	r2, r5
 800bcca:	4649      	mov	r1, r9
 800bccc:	4640      	mov	r0, r8
 800bcce:	47d0      	blx	sl
 800bcd0:	3001      	adds	r0, #1
 800bcd2:	d0ab      	beq.n	800bc2c <_printf_i+0x164>
 800bcd4:	6823      	ldr	r3, [r4, #0]
 800bcd6:	079b      	lsls	r3, r3, #30
 800bcd8:	d413      	bmi.n	800bd02 <_printf_i+0x23a>
 800bcda:	68e0      	ldr	r0, [r4, #12]
 800bcdc:	9b03      	ldr	r3, [sp, #12]
 800bcde:	4298      	cmp	r0, r3
 800bce0:	bfb8      	it	lt
 800bce2:	4618      	movlt	r0, r3
 800bce4:	e7a4      	b.n	800bc30 <_printf_i+0x168>
 800bce6:	2301      	movs	r3, #1
 800bce8:	4632      	mov	r2, r6
 800bcea:	4649      	mov	r1, r9
 800bcec:	4640      	mov	r0, r8
 800bcee:	47d0      	blx	sl
 800bcf0:	3001      	adds	r0, #1
 800bcf2:	d09b      	beq.n	800bc2c <_printf_i+0x164>
 800bcf4:	3501      	adds	r5, #1
 800bcf6:	68e3      	ldr	r3, [r4, #12]
 800bcf8:	9903      	ldr	r1, [sp, #12]
 800bcfa:	1a5b      	subs	r3, r3, r1
 800bcfc:	42ab      	cmp	r3, r5
 800bcfe:	dcf2      	bgt.n	800bce6 <_printf_i+0x21e>
 800bd00:	e7eb      	b.n	800bcda <_printf_i+0x212>
 800bd02:	2500      	movs	r5, #0
 800bd04:	f104 0619 	add.w	r6, r4, #25
 800bd08:	e7f5      	b.n	800bcf6 <_printf_i+0x22e>
 800bd0a:	bf00      	nop
 800bd0c:	0800d6f5 	.word	0x0800d6f5
 800bd10:	0800d706 	.word	0x0800d706

0800bd14 <__sread>:
 800bd14:	b510      	push	{r4, lr}
 800bd16:	460c      	mov	r4, r1
 800bd18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd1c:	f000 f8cc 	bl	800beb8 <_read_r>
 800bd20:	2800      	cmp	r0, #0
 800bd22:	bfab      	itete	ge
 800bd24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bd26:	89a3      	ldrhlt	r3, [r4, #12]
 800bd28:	181b      	addge	r3, r3, r0
 800bd2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bd2e:	bfac      	ite	ge
 800bd30:	6563      	strge	r3, [r4, #84]	; 0x54
 800bd32:	81a3      	strhlt	r3, [r4, #12]
 800bd34:	bd10      	pop	{r4, pc}

0800bd36 <__swrite>:
 800bd36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd3a:	461f      	mov	r7, r3
 800bd3c:	898b      	ldrh	r3, [r1, #12]
 800bd3e:	05db      	lsls	r3, r3, #23
 800bd40:	4605      	mov	r5, r0
 800bd42:	460c      	mov	r4, r1
 800bd44:	4616      	mov	r6, r2
 800bd46:	d505      	bpl.n	800bd54 <__swrite+0x1e>
 800bd48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f000 f870 	bl	800be34 <_lseek_r>
 800bd54:	89a3      	ldrh	r3, [r4, #12]
 800bd56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd5e:	81a3      	strh	r3, [r4, #12]
 800bd60:	4632      	mov	r2, r6
 800bd62:	463b      	mov	r3, r7
 800bd64:	4628      	mov	r0, r5
 800bd66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd6a:	f000 b817 	b.w	800bd9c <_write_r>

0800bd6e <__sseek>:
 800bd6e:	b510      	push	{r4, lr}
 800bd70:	460c      	mov	r4, r1
 800bd72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd76:	f000 f85d 	bl	800be34 <_lseek_r>
 800bd7a:	1c43      	adds	r3, r0, #1
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	bf15      	itete	ne
 800bd80:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd8a:	81a3      	strheq	r3, [r4, #12]
 800bd8c:	bf18      	it	ne
 800bd8e:	81a3      	strhne	r3, [r4, #12]
 800bd90:	bd10      	pop	{r4, pc}

0800bd92 <__sclose>:
 800bd92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd96:	f000 b81b 	b.w	800bdd0 <_close_r>
	...

0800bd9c <_write_r>:
 800bd9c:	b538      	push	{r3, r4, r5, lr}
 800bd9e:	4d07      	ldr	r5, [pc, #28]	; (800bdbc <_write_r+0x20>)
 800bda0:	4604      	mov	r4, r0
 800bda2:	4608      	mov	r0, r1
 800bda4:	4611      	mov	r1, r2
 800bda6:	2200      	movs	r2, #0
 800bda8:	602a      	str	r2, [r5, #0]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	f7f8 fd98 	bl	80048e0 <_write>
 800bdb0:	1c43      	adds	r3, r0, #1
 800bdb2:	d102      	bne.n	800bdba <_write_r+0x1e>
 800bdb4:	682b      	ldr	r3, [r5, #0]
 800bdb6:	b103      	cbz	r3, 800bdba <_write_r+0x1e>
 800bdb8:	6023      	str	r3, [r4, #0]
 800bdba:	bd38      	pop	{r3, r4, r5, pc}
 800bdbc:	2000152c 	.word	0x2000152c

0800bdc0 <abort>:
 800bdc0:	b508      	push	{r3, lr}
 800bdc2:	2006      	movs	r0, #6
 800bdc4:	f000 f8b2 	bl	800bf2c <raise>
 800bdc8:	2001      	movs	r0, #1
 800bdca:	f7f9 fcc3 	bl	8005754 <_exit>
	...

0800bdd0 <_close_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	4d06      	ldr	r5, [pc, #24]	; (800bdec <_close_r+0x1c>)
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	4608      	mov	r0, r1
 800bdda:	602b      	str	r3, [r5, #0]
 800bddc:	f7f9 fce1 	bl	80057a2 <_close>
 800bde0:	1c43      	adds	r3, r0, #1
 800bde2:	d102      	bne.n	800bdea <_close_r+0x1a>
 800bde4:	682b      	ldr	r3, [r5, #0]
 800bde6:	b103      	cbz	r3, 800bdea <_close_r+0x1a>
 800bde8:	6023      	str	r3, [r4, #0]
 800bdea:	bd38      	pop	{r3, r4, r5, pc}
 800bdec:	2000152c 	.word	0x2000152c

0800bdf0 <_fstat_r>:
 800bdf0:	b538      	push	{r3, r4, r5, lr}
 800bdf2:	4d07      	ldr	r5, [pc, #28]	; (800be10 <_fstat_r+0x20>)
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	4604      	mov	r4, r0
 800bdf8:	4608      	mov	r0, r1
 800bdfa:	4611      	mov	r1, r2
 800bdfc:	602b      	str	r3, [r5, #0]
 800bdfe:	f7f9 fcdc 	bl	80057ba <_fstat>
 800be02:	1c43      	adds	r3, r0, #1
 800be04:	d102      	bne.n	800be0c <_fstat_r+0x1c>
 800be06:	682b      	ldr	r3, [r5, #0]
 800be08:	b103      	cbz	r3, 800be0c <_fstat_r+0x1c>
 800be0a:	6023      	str	r3, [r4, #0]
 800be0c:	bd38      	pop	{r3, r4, r5, pc}
 800be0e:	bf00      	nop
 800be10:	2000152c 	.word	0x2000152c

0800be14 <_isatty_r>:
 800be14:	b538      	push	{r3, r4, r5, lr}
 800be16:	4d06      	ldr	r5, [pc, #24]	; (800be30 <_isatty_r+0x1c>)
 800be18:	2300      	movs	r3, #0
 800be1a:	4604      	mov	r4, r0
 800be1c:	4608      	mov	r0, r1
 800be1e:	602b      	str	r3, [r5, #0]
 800be20:	f7f9 fcdb 	bl	80057da <_isatty>
 800be24:	1c43      	adds	r3, r0, #1
 800be26:	d102      	bne.n	800be2e <_isatty_r+0x1a>
 800be28:	682b      	ldr	r3, [r5, #0]
 800be2a:	b103      	cbz	r3, 800be2e <_isatty_r+0x1a>
 800be2c:	6023      	str	r3, [r4, #0]
 800be2e:	bd38      	pop	{r3, r4, r5, pc}
 800be30:	2000152c 	.word	0x2000152c

0800be34 <_lseek_r>:
 800be34:	b538      	push	{r3, r4, r5, lr}
 800be36:	4d07      	ldr	r5, [pc, #28]	; (800be54 <_lseek_r+0x20>)
 800be38:	4604      	mov	r4, r0
 800be3a:	4608      	mov	r0, r1
 800be3c:	4611      	mov	r1, r2
 800be3e:	2200      	movs	r2, #0
 800be40:	602a      	str	r2, [r5, #0]
 800be42:	461a      	mov	r2, r3
 800be44:	f7f9 fcd4 	bl	80057f0 <_lseek>
 800be48:	1c43      	adds	r3, r0, #1
 800be4a:	d102      	bne.n	800be52 <_lseek_r+0x1e>
 800be4c:	682b      	ldr	r3, [r5, #0]
 800be4e:	b103      	cbz	r3, 800be52 <_lseek_r+0x1e>
 800be50:	6023      	str	r3, [r4, #0]
 800be52:	bd38      	pop	{r3, r4, r5, pc}
 800be54:	2000152c 	.word	0x2000152c

0800be58 <_realloc_r>:
 800be58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be5c:	4680      	mov	r8, r0
 800be5e:	4614      	mov	r4, r2
 800be60:	460e      	mov	r6, r1
 800be62:	b921      	cbnz	r1, 800be6e <_realloc_r+0x16>
 800be64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be68:	4611      	mov	r1, r2
 800be6a:	f7fe bd61 	b.w	800a930 <_malloc_r>
 800be6e:	b92a      	cbnz	r2, 800be7c <_realloc_r+0x24>
 800be70:	f7fe fcf2 	bl	800a858 <_free_r>
 800be74:	4625      	mov	r5, r4
 800be76:	4628      	mov	r0, r5
 800be78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be7c:	f000 f872 	bl	800bf64 <_malloc_usable_size_r>
 800be80:	4284      	cmp	r4, r0
 800be82:	4607      	mov	r7, r0
 800be84:	d802      	bhi.n	800be8c <_realloc_r+0x34>
 800be86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800be8a:	d812      	bhi.n	800beb2 <_realloc_r+0x5a>
 800be8c:	4621      	mov	r1, r4
 800be8e:	4640      	mov	r0, r8
 800be90:	f7fe fd4e 	bl	800a930 <_malloc_r>
 800be94:	4605      	mov	r5, r0
 800be96:	2800      	cmp	r0, #0
 800be98:	d0ed      	beq.n	800be76 <_realloc_r+0x1e>
 800be9a:	42bc      	cmp	r4, r7
 800be9c:	4622      	mov	r2, r4
 800be9e:	4631      	mov	r1, r6
 800bea0:	bf28      	it	cs
 800bea2:	463a      	movcs	r2, r7
 800bea4:	f7fe fca8 	bl	800a7f8 <memcpy>
 800bea8:	4631      	mov	r1, r6
 800beaa:	4640      	mov	r0, r8
 800beac:	f7fe fcd4 	bl	800a858 <_free_r>
 800beb0:	e7e1      	b.n	800be76 <_realloc_r+0x1e>
 800beb2:	4635      	mov	r5, r6
 800beb4:	e7df      	b.n	800be76 <_realloc_r+0x1e>
	...

0800beb8 <_read_r>:
 800beb8:	b538      	push	{r3, r4, r5, lr}
 800beba:	4d07      	ldr	r5, [pc, #28]	; (800bed8 <_read_r+0x20>)
 800bebc:	4604      	mov	r4, r0
 800bebe:	4608      	mov	r0, r1
 800bec0:	4611      	mov	r1, r2
 800bec2:	2200      	movs	r2, #0
 800bec4:	602a      	str	r2, [r5, #0]
 800bec6:	461a      	mov	r2, r3
 800bec8:	f7f9 fc4e 	bl	8005768 <_read>
 800becc:	1c43      	adds	r3, r0, #1
 800bece:	d102      	bne.n	800bed6 <_read_r+0x1e>
 800bed0:	682b      	ldr	r3, [r5, #0]
 800bed2:	b103      	cbz	r3, 800bed6 <_read_r+0x1e>
 800bed4:	6023      	str	r3, [r4, #0]
 800bed6:	bd38      	pop	{r3, r4, r5, pc}
 800bed8:	2000152c 	.word	0x2000152c

0800bedc <_raise_r>:
 800bedc:	291f      	cmp	r1, #31
 800bede:	b538      	push	{r3, r4, r5, lr}
 800bee0:	4604      	mov	r4, r0
 800bee2:	460d      	mov	r5, r1
 800bee4:	d904      	bls.n	800bef0 <_raise_r+0x14>
 800bee6:	2316      	movs	r3, #22
 800bee8:	6003      	str	r3, [r0, #0]
 800beea:	f04f 30ff 	mov.w	r0, #4294967295
 800beee:	bd38      	pop	{r3, r4, r5, pc}
 800bef0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bef2:	b112      	cbz	r2, 800befa <_raise_r+0x1e>
 800bef4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bef8:	b94b      	cbnz	r3, 800bf0e <_raise_r+0x32>
 800befa:	4620      	mov	r0, r4
 800befc:	f000 f830 	bl	800bf60 <_getpid_r>
 800bf00:	462a      	mov	r2, r5
 800bf02:	4601      	mov	r1, r0
 800bf04:	4620      	mov	r0, r4
 800bf06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bf0a:	f000 b817 	b.w	800bf3c <_kill_r>
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d00a      	beq.n	800bf28 <_raise_r+0x4c>
 800bf12:	1c59      	adds	r1, r3, #1
 800bf14:	d103      	bne.n	800bf1e <_raise_r+0x42>
 800bf16:	2316      	movs	r3, #22
 800bf18:	6003      	str	r3, [r0, #0]
 800bf1a:	2001      	movs	r0, #1
 800bf1c:	e7e7      	b.n	800beee <_raise_r+0x12>
 800bf1e:	2400      	movs	r4, #0
 800bf20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bf24:	4628      	mov	r0, r5
 800bf26:	4798      	blx	r3
 800bf28:	2000      	movs	r0, #0
 800bf2a:	e7e0      	b.n	800beee <_raise_r+0x12>

0800bf2c <raise>:
 800bf2c:	4b02      	ldr	r3, [pc, #8]	; (800bf38 <raise+0xc>)
 800bf2e:	4601      	mov	r1, r0
 800bf30:	6818      	ldr	r0, [r3, #0]
 800bf32:	f7ff bfd3 	b.w	800bedc <_raise_r>
 800bf36:	bf00      	nop
 800bf38:	20000030 	.word	0x20000030

0800bf3c <_kill_r>:
 800bf3c:	b538      	push	{r3, r4, r5, lr}
 800bf3e:	4d07      	ldr	r5, [pc, #28]	; (800bf5c <_kill_r+0x20>)
 800bf40:	2300      	movs	r3, #0
 800bf42:	4604      	mov	r4, r0
 800bf44:	4608      	mov	r0, r1
 800bf46:	4611      	mov	r1, r2
 800bf48:	602b      	str	r3, [r5, #0]
 800bf4a:	f7f9 fbf3 	bl	8005734 <_kill>
 800bf4e:	1c43      	adds	r3, r0, #1
 800bf50:	d102      	bne.n	800bf58 <_kill_r+0x1c>
 800bf52:	682b      	ldr	r3, [r5, #0]
 800bf54:	b103      	cbz	r3, 800bf58 <_kill_r+0x1c>
 800bf56:	6023      	str	r3, [r4, #0]
 800bf58:	bd38      	pop	{r3, r4, r5, pc}
 800bf5a:	bf00      	nop
 800bf5c:	2000152c 	.word	0x2000152c

0800bf60 <_getpid_r>:
 800bf60:	f7f9 bbe0 	b.w	8005724 <_getpid>

0800bf64 <_malloc_usable_size_r>:
 800bf64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf68:	1f18      	subs	r0, r3, #4
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	bfbc      	itt	lt
 800bf6e:	580b      	ldrlt	r3, [r1, r0]
 800bf70:	18c0      	addlt	r0, r0, r3
 800bf72:	4770      	bx	lr

0800bf74 <_init>:
 800bf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf76:	bf00      	nop
 800bf78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf7a:	bc08      	pop	{r3}
 800bf7c:	469e      	mov	lr, r3
 800bf7e:	4770      	bx	lr

0800bf80 <_fini>:
 800bf80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf82:	bf00      	nop
 800bf84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bf86:	bc08      	pop	{r3}
 800bf88:	469e      	mov	lr, r3
 800bf8a:	4770      	bx	lr
